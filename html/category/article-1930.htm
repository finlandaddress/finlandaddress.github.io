<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-1930.htm" />
    <title>Java高并发优化：中间件redis - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>Java高并发优化：中间件redis</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>Redis</h3> <ul> <li>1. 高并发系统设计的目标</li> <li>2. 高并发中的问题</li> <li>3. 消息队列，和redis的使用场景</li> <li>3. Redis为什么这么快（特点）</li> <li>4. 使用Redis要注意的问题</li> <li> <ul> <li>1. 缓存与数据库的一致性问题</li> <li>2. 缓存雪崩</li> <li>3. 缓存穿透</li> </ul> </li> <li>5. Redis 常⻅数据结构</li> <li>6. Redis 设置过期时间底层</li> <li></li> <li>7. Redis 内存淘汰机制</li> <li>8. Redis 持久化</li> <li>9. Redis 事务</li> <li>10. Redis 的并发竞争 Key 问题</li> <li>11. Redis实现分布锁</li> <li>12. 为什么不使用HashMap，而是要使用redis</li> </ul> </div> <h1> 1. 高并发系统设计的目标</h1> <ul> <li>高性能：性能体现了系统的并行处理能力</li> <li>高可用：表示系统可以正常服务的时间</li> <li>高扩展：表示系统的扩展能力，流量高峰时能否在短时间内完成扩容</li> </ul> <blockquote> <p>性能衡量指标<br /> 大体上可以分为：吞吐量、响应时间、并发量、秒开率和正确性等<br /> 吞吐量：单位时间内执行的请求数量<br /> 并发量：并发量指的是系统能够同时处理的请求数量，反映的是系统的负载能力<br /> 秒开率：秒开率主要针对的是前端网页或者移动端APP来说的，如果一个前端网页或者APP能够在1秒内很平滑的打开，尤其是首页的加载<br /> 正确性：</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221230/8a9b877e6436306b046cfe3b4167f670.jpg" alt="Java高并发优化：中间件redis"></p> <h1> 2. 高并发中的问题</h1> <p>日常分享模块：请求数据量大，网络IO操作</p> <blockquote> <p>解决方案：</p> <ol> <li>上拉加载机制，后端分页查询机制，每次请求一部分数据，</li> <li>这部分对于实时性，一致性的要求并不高，所以可以使用CDN，或者redis进行缓存</li> </ol> </blockquote> <p>购买模块：对于一致性要求高，典型的原子性要求</p> <blockquote> <p>解决方案：</p> <ol> <li>后端使用事务控制，买家账户的减操作，卖家账户的增操作，以及商品数量的更新。</li> </ol> <p>扩展<br /> 高并发的场景中，如果一本书是一个热点的商品，那么在这行数据上会产生大量的竞争。（秒杀）<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221230/4acb848b302927e2e26084ba0b95cc81.jpg" alt="Java高并发优化：中间件redis"><br /> 热点数据的处理性能影响<br /> 主要是在事务的执行时间，一个事务必须等待另一个事务commit之后才能开始。<br /> 如果在客户端去控制事务的逻辑的话，其会受网络IO的影响<br /> 所以解决方法是</p> <ol> <li>将事务的逻辑放在服务端。</li> <li>使用存储过程优化：事务行级锁的持有时间<br /> 这部分其实也不是redis所解决的问题</li> </ol> </blockquote> <h1> 3. 消息队列，和redis的使用场景</h1> <p>为什么使用消息队列？</p> <blockquote> <p>消息队列的特点：异步，削峰，解耦</p> <ul> <li>削峰：当流量大的时候，服务器承受能力不够，大量的请求流量全部涌入到服务器中，会对服务器造成问题。所以先将请求放在队列中，然后服务器去从队列中取请求去处理即可。</li> <li>异步：消息队列的特点，将不需要同步的逻辑放在消息队列中，可以减少用户的等待时间</li> <li>解耦：</li> </ul> </blockquote> <p>为什么使用redis？</p> <blockquote> <ol> <li>性能：对于一些耗时久，结果不频繁变动的sql，适合将运行结果放入缓存，提高查询速度</li> <li>并发：高并发的情况下，所有请求直接访问数据库，数据库会出现连接异常。这个时候使用redis做一个缓冲操作，让请求先访问redis，而不是直接访问数据库。</li> </ol> </blockquote> <h1> 3. Redis为什么这么快（特点）</h1> <blockquote> <ol> <li>Redis是基于内存的NoSql（Redis 也支持持久化）</li> <li>Redis 采用单线程模式处理请求。这样做的原因有 2个：一个是因为采用了非阻塞的异步事件处理机制；另一个是缓存数据都是内存操作 IO 时间不会太长，单线程可以避免线程上下文切换产生的代价。</li> <li>Redis还有一个非常大的优势，就是除了 K-V 之外，还支持多种数据格式，例如 list、set、sorted set、hash 等。</li> <li>Redis提供主从同步机制，以及 Cluster 集群部署能力，能够提供高可用服务</li> </ol> </blockquote> <h1> 4. 使用Redis要注意的问题</h1> <h2> 1. 缓存与数据库的一致性问题</h2> <p>对于读多写少的高并发场景，我们会经常使用redis做缓存来进行优化。<br /> 但是当出现数据更新的时候，如何保证redis缓存与数据库的数据一致性问题。<br /><strong>核心：更新数据库和更新缓存这两个操作，是无法保证原子性的</strong></p> <blockquote> <p>一致性的解决方案<br /> 先更新数据库再让缓存失效，当数据库更新成功，缓存失效失败的时候，发送失败消息到一个消息队列中去，自己消费，再次让缓存失效，直到成功</p> </blockquote> <h2> 2. 缓存雪崩</h2> <p>缓存雪崩是指设置缓存时采用了相同的过期时间，导致缓存在某一个时刻同时失效，或者缓存服务器宕机宕机导致缓存全面失效，请求全部转发到了DB层面，DB由于瞬间压力增大而导致崩溃。缓存失效导致的雪崩效应对底层系统的冲击是很大的。</p> <blockquote> <p>解决方案：</p> <ol> <li>事前：将缓存失效的时间分散，降低每一个缓存过期时间的重复率</li> <li>事前：如果是因为缓存服务器故障导致的问题，一方面尽量保证整个 redis 集群的⾼可⽤性，发现机器宕机尽快补上。另一方面，应用程序中可以采用多级缓存</li> <li>事中：限流，避免大量请求进入数据库</li> <li>事后：利⽤ redis 持久化机制保存的数据尽快恢复缓存</li> </ol> </blockquote> <h2> 3. 缓存穿透</h2> <p>缓存穿透说简单点就是⼤量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有<br /> 经过缓存这⼀层。举个例⼦：某个⿊客故意制造我们缓存中不存在的 key 发起⼤量请求，导致⼤量请求落到数据库。</p> <blockquote> <p>解决方案：</p> <ol> <li>缓存⽆效 key : 如果缓存和数据库都查不到某个 key 的数据就写⼀个到 redis 中去并设置过期时间（这种⽅式可以解决请求的 key 变化不频繁的情况，如果⿊客恶意攻击，每次构建不同的请求key，会导致 redis 中缓存⼤量⽆效的 key）</li> <li>布隆过滤器：将不符合规则的key进行过滤</li> </ol> </blockquote> <h1> 5. Redis 常⻅数据结构</h1> <blockquote> <p>String<br /> Hash<br /> list<br /> set<br /> zset</p> </blockquote> <h1> 6. Redis 设置过期时间底层</h1> <blockquote> <ol> <li> <p>定期删除：redis默认是每隔 100ms 就随机抽取⼀些设置了过期时间的key，检查其是否过期，如果过期就删除。注意这⾥是随机抽取的。为什么要随机呢？你想⼀想假如 redis 存了⼏⼗万个 key ，每隔100ms就遍历所有的设置过期时间的 key 的话，就会给 CPU 带来很⼤的负载</p> </li> <li> <p>惰性删除 ：定期删除可能会导致很多过期 key 到了时间并没有被删除掉。所以就有了惰性删除。假如你的过期 key，靠定期删除没有被删除掉，还停留在内存⾥，除⾮你的系统去查⼀下那个 key，才会被redis给删除掉。这就是所谓的惰性删除，也是够懒的</p> </li> </ol> </blockquote> <blockquote> <p>问题：</p> <ul> <li>但是仅仅通过设置过期时间还是有问题的。我们想⼀下：如果定期删除漏掉了很多过期 key，然后你也没及时去查，也就没⾛惰性删除，此时会怎么样？<br /> ⼤量过期key堆积在内存⾥，导致redis内存块耗尽</li> </ul> <h1></h1> <ul> <li>怎么解决这个问题呢？<br /> redis 内存淘汰机制。</li> </ul> </blockquote> <h1> 7. Redis 内存淘汰机制</h1> <blockquote> <ol> <li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使⽤的数据淘汰</li> <li>volatile-lfu：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使⽤的数据<br /> 淘汰</li> <li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li> <li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li> <li>allkeys-lru：当内存不⾜以容纳新写⼊数据时，在键空间中，移除最近最少使⽤的key（这个是最常⽤的）</li> <li>allkeys-lfu：当内存不⾜以容纳新写⼊数据时，在键空间中，移除最不经常使⽤的key</li> <li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li> <li>no-eviction：禁⽌驱逐数据，也就是说当内存不⾜以容纳新写⼊数据时，新写⼊操作会报错。</li> </ol> </blockquote> <h1> 8. Redis 持久化</h1> <ol> <li>快照（snapshotting，RDB）</li> </ol> <blockquote> <p>Redis可以通过创建快照来获得存储在内存⾥⾯的数据在某个时间点上的副本。Redis创建快照之后，可以对快照进⾏备份，可以将快照复制到其他服务器从⽽创建具有相同数据的服务器副本（Redis主从结构，主要⽤来提⾼Redis性能），还可以将快照留在原地以便重启服务器的时候使⽤</p> </blockquote> <blockquote> <p>在Redis的配置⽂件中存在三种不同的RDB 持久化⽅式，它们分别是：</p> <ol> <li>save 900 1 #在900秒(15分钟)之后，如果⾄少有1个key发⽣变化，Redis就会⾃动触发BGSAVE命令创建快照。</li> <li>save 300 10 #在300秒(5分钟)之后，如果⾄少有10个key发⽣变化，Redis就会⾃动触发BGSAVE命令创建快照。</li> <li>save 60 10000 #在60秒(1分钟)之后，如果⾄少有10000个key发⽣变化，Redis就会⾃动触发BGSAVE命令创建快照。</li> </ol> </blockquote> <ol start="2"> <li>只追加⽂件（append-only file,AOF）</li> </ol> <blockquote> <p>与快照持久化相⽐，AOF持久化 的实时性更好，因此已成为主流的持久化⽅案。默认情况下Redis没有开启AOF（append only file）⽅式的持久化，可以通过appendonly参数开启<br /> 开启AOF持久化后每执⾏⼀条会更改Redis中的数据的命令，Redis就会将该命令写⼊硬盘中的AOF⽂件。<br /> AOF⽂件的保存位置和RDB⽂件的位置相同，都是通过dir参数设置的，默认的⽂件名是 appendonly.aof</p> </blockquote> <blockquote> <p>在Redis的配置⽂件中存在三种不同的 AOF 持久化⽅式，它们分别是：</p> <ol> <li>appendfsync always #每次有数据修改发⽣时都会写⼊AOF⽂件,这样会严重降低Redis的速度</li> <li>appendfsync everysec #每秒钟同步⼀次，显示地将多个写命令同步到硬盘</li> <li>appendfsync no #让操作系统决定何时进⾏同步</li> </ol> </blockquote> <h1> 9. Redis 事务</h1> <p>Redis 通过 MULTI、EXEC、WATCH 等命令来实现事务(transaction)功能。事务提供了⼀种将多个命令请求打包，然后⼀次性、按顺序地执⾏多个命令的机制，并且在事务执⾏期间，服务器不会中断事务⽽改去执⾏其他客户端的命令请求，它会将事务中的所有命令都执⾏完毕，然后才去处理其他客户端的命令请求。<br /> 在传统的关系式数据库中，常常⽤ ACID 性质来检验事务功能的可靠性和安全性。在 Redis 中，事务总是具有原⼦性（Atomicity）、⼀致性（Consistency）和隔离性（Isolation），并且当 Redis 运⾏在某种特定的持久化模式下时，事务也具有持久性（Durability）</p> <blockquote> <p>Redis同⼀个事务中如果有⼀条命令执⾏失败，其后的命令仍然会被执⾏，没有回滚。（来⾃ issue：关于Redis事务不是原⼦性问题 ）</p> </blockquote> <h1> 10. Redis 的并发竞争 Key 问题</h1> <p>所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对⼀个 key 进⾏操作，但是最后执⾏的顺序和我们期望的顺序不同，这样也就导致了结果的不同</p> <blockquote> <p>解决方案：<br /> 分布式锁（zookeeper 和 redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使⽤分布式锁，这样会影响性能）</p> </blockquote> <h1> 11. Redis实现分布锁</h1> <p>java 中的Synchronized， Lock是单机环境中多线程的并发锁方案<br /> 那么在分布式的环境中，如何实现一个分布式锁呢？</p> <blockquote> <p>SET lock_key random_value NX PX 5000<br /> 加锁实际上就是在redis中，给Key键设置一个值，为避免死锁，并给定一个过期时间。<br /> 解锁的过程就是将Key键删除。但也不能乱删，不能说客户端1的请求将客户端2的锁给删除掉。这时候random_value的作用就体现出来</p> </blockquote> <h1> 12. 为什么不使用HashMap，而是要使用redis</h1> <blockquote> <ol> <li>Redis 可以用几十G内存来做缓存，Map 不行，一般 JVM 也就分几个 G 数据就够大了</li> <li>Redis 的缓存可以持久化，Map 是内存对象，程序一重启数据就没了</li> <li>Redis 可以实现分布式的缓存，Map 只能存在创建它的程序里</li> <li>Redis 缓存有过期机制，Map 本身无此功能</li> </ol> </blockquote></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-1929.htm">Android7.0特性及适配</a></p>
                                                <p>下一个：<a href="/html/category/article-1943.htm">linux磁盘清理方法详解</a></p>
                                            </div>

                                        <div class="panel panel-default mt-5">
                        <div class="panel-heading">
                            <h3 class="m-0">推荐文章</h3>
                        </div>
                        <div class="panel-body">
                            <ul class="p-0 x-0">
                                                                <li class="py-2"><a href="/html/category/article-779.htm">vue中动态控制btn的disabled属性方式_vue.js</a></li>
                                                                <li class="py-2"><a href="/html/category/article-752.htm">jpa 原生SQL写法</a></li>
                                                                <li class="py-2"><a href="/html/category/article-727.htm">用Python读hdfs集群parquet格式文件</a></li>
                                                                <li class="py-2"><a href="/html/category/article-708.htm">有一个数字矩阵，矩阵的每行从左到右是递增的，矩阵从上到下是递增的，请编写程序在这样的矩阵中查找某个数字是否存在。</a></li>
                                                                <li class="py-2"><a href="/html/category/article-657.htm">netty系列之:netty中的核心编码器bytes数组</a></li>
                                                                <li class="py-2"><a href="/html/category/article-619.htm">Antd的Form.Item自定义类型输入框</a></li>
                                                                <li class="py-2"><a href="/html/category/article-600.htm">基于Python编写一个简单的端口扫描器_python</a></li>
                                                                <li class="py-2"><a href="/html/category/article-599.htm">Java中的守护线程与用户线程</a></li>
                                                                <li class="py-2"><a href="/html/category/article-595.htm">java8日期常用API，日期详解</a></li>
                                                                <li class="py-2"><a href="/html/category/article-557.htm">SpringBoot（3） &#8211; SpringApplication（3） &#8211; 自定义FailureAnalyzer</a></li>
                                                            </ul>
                        </div>
                    </div>
                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6108.htm" title="动物疫苗管理法律法规（动物疫苗的管理方法）">动物疫苗管理法律法规（动物疫苗的管理方法）</a></li>
                        <li class="py-2"><a href="/html/category/article-6020.htm" title="宠物疫苗能带上高铁吗国内（宠物疫苗可以过安检吗）">宠物疫苗能带上高铁吗国内（宠物疫苗可以过安检吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-5573.htm" title="领养宠物机构（宠物领养中心要钱吗）">领养宠物机构（宠物领养中心要钱吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7400.htm" title="北京正规免费领养宠物的地方（北京有免费领养宠物狗的地方）">北京正规免费领养宠物的地方（北京有免费领养宠物狗的地方）</a></li>
                        <li class="py-2"><a href="/html/category/article-7263.htm" title="BAO美啦｜《活着》终于上线！可朴信惠这是又胖了一圈？(活着美好吗)">BAO美啦｜《活着》终于上线！可朴信惠这是又胖了一圈？(活着美好吗)</a></li>
                        <li class="py-2"><a href="/html/category/article-5933.htm" title="动物打完疫苗可以洗澡吗有影响吗知乎（动物打疫苗后多久能杀了吃）">动物打完疫苗可以洗澡吗有影响吗知乎（动物打疫苗后多久能杀了吃）</a></li>
                        <li class="py-2"><a href="/html/category/article-7493.htm" title="刀切馒头的做法大全(刀切馒头的做法教程)">刀切馒头的做法大全(刀切馒头的做法教程)</a></li>
                        <li class="py-2"><a href="/html/category/article-6986.htm" title="什么牌子的蟑螂药最管用(什么牌子的蟑螂药最管用最好)">什么牌子的蟑螂药最管用(什么牌子的蟑螂药最管用最好)</a></li>
                        <li class="py-2"><a href="/html/category/article-5574.htm" title="猫粮利润空间大吗? 猫粮利润空间大吗">猫粮利润空间大吗? 猫粮利润空间大吗</a></li>
                        <li class="py-2"><a href="/html/category/article-7401.htm" title="猫粮品牌大全图片及名称（猫粮品牌排行榜及名称）">猫粮品牌大全图片及名称（猫粮品牌排行榜及名称）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>