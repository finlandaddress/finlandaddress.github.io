<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-641.htm" />
    <title>Django请求与响应 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>Django请求与响应</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div id="content_views" class="htmledit_views"> <div id="cnblogs_post_body" class="blogpost-body"> <p>利用HTTP协议向服务器传参的几种途径.</p> <ul> <li>提取URL的特定部分，如/weather/wuhan/2018/month/day，可以在服务器端的路由中用正则表达式截取；</li> <li>查询字符串（query string)，形如key1=value1&amp;key2=value2；</li> <li>请求体（body）中发送的数据，比如表单数据、json、xml；</li> <li>在http报文的头（header）中。</li> </ul> <h2 id="1-url路径参数">1 URL路径参数</h2> <p>在定义路由URL时，可以使用正则表达式提取参数的方法从URL中获取请求参数，Django会将提取的参数直接传递到视图的传入参数中。</p> <ul> <li> <p>未命名参数按定义顺序传递， 如</p> <pre><code class="lang-python">url(<span class="hljs-string">r'^weather/([a-z]+)/(\d{4})/$', views.weather),  <span class="hljs-function"><span class="hljs-keyword">def <span class="hljs-title">weather<span class="hljs-params">(request, city, year): print(<span class="hljs-string">'city=%s' % city) print(<span class="hljs-string">'year=%s' % year) <span class="hljs-keyword">return HttpResponse(<span class="hljs-string">'OK') </span></span></span></span></span></span></span></span></span></code></pre> </li> <li> <p>命名参数按名字传递，如</p> <pre><code class="lang-python">url(<span class="hljs-string">r'^weather/(?P&lt;city&gt;[a-z]+)/(?P&lt;year&gt;\d{4})/$', views.weather),  <span class="hljs-function"><span class="hljs-keyword">def <span class="hljs-title">weather<span class="hljs-params">(request, year, city): print(<span class="hljs-string">'city=%s' % city) print(<span class="hljs-string">'year=%s' % year) <span class="hljs-keyword">return HttpResponse(<span class="hljs-string">'OK') </span></span></span></span></span></span></span></span></span></code></pre> </li> </ul> <h2 id="2-django中的querydict对象">2 Django中的QueryDict对象</h2> <p>定义在django.http.QueryDict</p> <p>HttpRequest对象的属性GET、POST都是QueryDict类型的对象</p> <p>与python字典不同，QueryDict类型的对象用来处理同一个键带有多个值的情况</p> <ul> <li> <p>方法get()：根据键获取值</p> <p>如果一个键同时拥有多个值将获取最后一个值</p> <p>如果键不存在则返回None值，可以设置默认值进行后续处理</p> <pre><code class="lang-python">dict.get(<span class="hljs-string">'键',默认值) 可简写为 dict[<span class="hljs-string">'键'] </span></span></code></pre> </li> <li> <p>方法getlist()：根据键获取值，值以列表返回，可以获取指定键的所有值</p> <p>如果键不存在则返回空列表[]，可以设置默认值进行后续处理</p> <pre><code class="lang-python">dict.getlist(<span class="hljs-string">'键',默认值) </span></code></pre> </li> </ul> <h2 id="3-查询字符串query-string">3. 查询字符串Query String</h2> <p>获取请求路径中的查询字符串参数（形如?k1=v1&amp;k2=v2），可以通过request.GET属性获取，返回QueryDict对象。</p> <pre><code class="lang-python"><span class="hljs-comment"># /qs/?a=1&amp;b=2&amp;a=3  <span class="hljs-function"><span class="hljs-keyword">def <span class="hljs-title">qs<span class="hljs-params">(request): a = request.GET.get(<span class="hljs-string">'a') b = request.GET.get(<span class="hljs-string">'b') alist = request.GET.getlist(<span class="hljs-string">'a') print(a) <span class="hljs-comment"># 3 print(b) <span class="hljs-comment"># 2 print(alist) <span class="hljs-comment"># ['1', '3'] <span class="hljs-keyword">return HttpResponse(<span class="hljs-string">'OK') </span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> <p>重要：查询字符串不区分请求方式，即假使客户端进行POST方式的请求，依然可以通过request.GET获取请求中的查询字符串数据。</p> <h2 id="4-请求体">4 请求体</h2> <p>请求体数据格式不固定，可以是表单类型字符串，可以是JSON字符串，可以是XML字符串，应区别对待。</p> <p>可以发送请求体数据的请求方式有POST、PUT、PATCH、DELETE。</p> <p>Django默认开启了CSRF防护，会对上述请求方式进行CSRF防护验证，在测试时可以关闭CSRF防护机制，方法为在settings.py文件中注释掉CSRF中间件.</p> <h3 id="41-表单类型-form-data">4.1 表单类型 Form Data</h3> <p>前端发送的表单类型的请求体数据，可以通过request.POST属性获取，返回QueryDict对象。</p> <pre><code class="lang-python"><span class="hljs-function"><span class="hljs-keyword">def <span class="hljs-title">get_body<span class="hljs-params">(request):     a = request.POST.get(<span class="hljs-string">'a') b = request.POST.get(<span class="hljs-string">'b') alist = request.POST.getlist(<span class="hljs-string">'a') print(a) print(b) print(alist) <span class="hljs-keyword">return HttpResponse(<span class="hljs-string">'OK') </span></span></span></span></span></span></span></span></span></code></pre> <p>重要：只要请求体的数据是表单类型，请求方式POST,可以使用request.POST来获取请求体的表单数据。</p> <h2 id="42-非表单类型-nonform-data">4.2 非表单类型 Non-Form Data</h2> <p>非表单类型的请求体数据，Django无法自动解析，可以通过request.body属性获取最原始的请求体数据，自己按照请求体格式（JSON、XML等）进行解析。request.body返回<strong>bytes</strong>类型。</p> <p>例如要获取请求体中的如下JSON数据</p> <pre><code class="lang-json">{<!-- --><span class="hljs-string">"a": <span class="hljs-number">1, <span class="hljs-string">"b": <span class="hljs-number">2}  注意:JSON数据最后一个键值对后面不能加逗号 </span></span></span></span></code></pre> <p>可以进行如下方法操作：</p> <pre><code class="lang-python"><span class="hljs-keyword">import json  <span class="hljs-function"><span class="hljs-keyword">def <span class="hljs-title">get_body_json<span class="hljs-params">(request): json_str = request.body json_str = json_str.decode() <span class="hljs-comment"># 将字节类型转换为字符串,python3.6 无需执行此步 req_data = json.loads(json_str) # 将json字符串转换为字典 print(req_data[<span class="hljs-string">'a']) print(req_data[<span class="hljs-string">'b']) <span class="hljs-keyword">return HttpResponse(<span class="hljs-string">'OK')<br/><br/></span></span></span></span></span></span></span></span></span></span></code></pre> <h2 id="5-请求头">5 请求头</h2> <p>可以通过request.META属性获取请求头headers中的数据，request.META为字典类型。</p> <p>常见的请求头如：</p> <ul> <li> <code>CONTENT_LENGTH</code>&nbsp;– The length of the request body (as a string).</li> <li> <code>CONTENT_TYPE</code>&nbsp;– The MIME type of the request body.</li> <li> <code>HTTP_ACCEPT</code>&nbsp;– Acceptable content types for the response.</li> <li> <code>HTTP_ACCEPT_ENCODING</code>&nbsp;– Acceptable encodings for the response.</li> <li> <code>HTTP_ACCEPT_LANGUAGE</code>&nbsp;– Acceptable languages for the response.</li> <li> <code>HTTP_HOST</code>&nbsp;– The HTTP Host header sent by the client.</li> <li> <code>HTTP_REFERER</code>&nbsp;– The referring page, if any.</li> <li> <code>HTTP_USER_AGENT</code>&nbsp;– The client’s user-agent string.</li> <li> <code>QUERY_STRING</code>&nbsp;– The query string, as a single (unparsed) string.</li> <li> <code>REMOTE_ADDR</code>&nbsp;– The IP address of the client.</li> <li> <code>REMOTE_HOST</code>&nbsp;– The hostname of the client.</li> <li> <code>REMOTE_USER</code>&nbsp;– The user authenticated by the Web server, if any.</li> <li> <code>REQUEST_METHOD</code>&nbsp;– A string such as&nbsp;<code>"GET"</code>&nbsp;or&nbsp;<code>"POST"</code>.</li> <li> <code>SERVER_NAME</code>&nbsp;– The hostname of the server.</li> <li> <code>SERVER_PORT</code>&nbsp;– The port of the server (as a string).</li> </ul> <p>具体使用如:</p> <pre><code class="lang-python"><span class="hljs-function"><span class="hljs-keyword">def <span class="hljs-title">get_headers<span class="hljs-params">(request):     print(request.META[<span class="hljs-string">'CONTENT_TYPE']) <span class="hljs-keyword">return HttpResponse(<span class="hljs-string">'OK')</span></span></span></span></span></span></span></code><br/><br/></pre> <h2 id="6-其他常用httprequest对象属性">6 其他常用HttpRequest对象属性</h2> <ul> <li>method：一个字符串，表示请求使用的HTTP方法，常用值包括：'GET'、'POST'。</li> <li>user：请求的用户对象。</li> <li>path：一个字符串，表示请求的页面的完整路径，不包含域名和参数部分。</li> <li>encoding：一个字符串，表示提交的数据的编码方式。 <ul> <li>如果为None则表示使用浏览器的默认设置，一般为utf-8。</li> <li>这个属性是可写的，可以通过修改它来修改访问表单数据使用的编码，接下来对属性的任何访问将使用新的encoding值。</li> </ul> </li> </ul> <ul> <li>FILES：一个类似于字典的对象，包含所有的上传文件。</li> </ul> <pre><code class="lang-python"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-params"><span class="hljs-comment"><span class="hljs-string"><span class="hljs-string"><span class="hljs-keyword"><span class="hljs-string">&nbsp;</span></span></span></span></span></span></span></span></span></span></code></pre> <h1 id="响应">响应</h1> <p>视图在接收请求并处理后，必须返回HttpResponse对象或子对象。HttpRequest对象由Django创建，HttpResponse对象由开发人员创建。</p> <h2 id="1-httpresponse">1 HttpResponse</h2> <p>可以使用django.http.HttpResponse来构造响应对象。</p> <pre><code class="lang-python">HttpResponse(content=响应体, content_type=响应体数据类型, status=状态码) </code></pre> <p>也可通过HttpResponse对象属性来设置响应体、响应体数据类型、状态码：</p> <ul> <li>content：表示返回的内容。</li> <li>status_code：返回的HTTP响应状态码。</li> <li>content_type：指定返回数据的的MIME类型。</li> </ul> <p>响应头可以直接将HttpResponse对象当做字典进行响应头键值对的设置：</p> <pre><code class="lang-python">response = HttpResponse() response[<span class="hljs-string">'web'] = <span class="hljs-string">'Django'  <span class="hljs-comment"># 自定义响应头web, 值为</span></span></span></code><code class="lang-python">Django</code></pre> <p>示例：</p> <pre><code class="lang-python"><span class="hljs-keyword">from django.http <span class="hljs-keyword">import HttpResponse  <span class="hljs-function"><span class="hljs-keyword">def <span class="hljs-title">demo_view<span class="hljs-params">(request): <span class="hljs-keyword">return HttpResponse(<span class="hljs-string">'hello python', status=<span class="hljs-number">400) 或者 response = HttpResponse(<span class="hljs-string">'hello python') response.status_code = <span class="hljs-number">400 response[<span class="hljs-string">'web'] = <span class="hljs-string">'Django' <span class="hljs-keyword">return response<br/><br/></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> <h2 id="2-httpresponse子类">2 HttpResponse子类</h2> <p>Django提供了一系列HttpResponse的子类，可以快速设置状态码,使用方法和HttpResponse一样,直接return,不用写状态码,</p> <p>例如:&nbsp;return&nbsp;HttpResponseNotFound("not&nbsp;found",Content-Type:applicationjson)</p> <ul> <li>HttpResponseRedirect 301</li> <li>HttpResponsePermanentRedirect 302</li> <li>HttpResponseNotModified 304</li> <li>HttpResponseBadRequest 400</li> <li>HttpResponseNotFound 404</li> <li>HttpResponseForbidden 403</li> <li>HttpResponseNotAllowed 405</li> <li>HttpResponseGone 410</li> <li>HttpResponseServerError 500</li> </ul> <h2 id="3-jsonresponse">3 JsonResponse(不是Httpresponse的子类)</h2> <p>若要返回json数据，可以使用JsonResponse来构造响应对象，比较常用,作用：</p> <ul> <li>帮助我们将数据转换为json字符串</li> <li>设置响应头Content-Type为&nbsp;application/json</li> </ul> <pre><code class="lang-python"><span class="hljs-keyword">from django.http <span class="hljs-keyword">import JsonResponse  <span class="hljs-function"><span class="hljs-keyword">def <span class="hljs-title">demo_view<span class="hljs-params">(request): <span class="hljs-keyword">return JsonResponse({<!-- --><span class="hljs-string">'city': <span class="hljs-string">'beijing', <span class="hljs-string">'subject': <span class="hljs-string">'python'}) </span></span></span></span></span></span></span></span></span></span></span></code></pre> <h2 id="4-redirect重定向">4 redirect重定向</h2> <pre><code class="lang-python"><span class="hljs-keyword">from django.shortcuts <span class="hljs-keyword">import redirect  <span class="hljs-function"><span class="hljs-keyword">def <span class="hljs-title">demo_view<span class="hljs-params">(request): # <span class="hljs-keyword">return redirect(<span class="hljs-string">'/index.html')<br/>　　# 最好还是和reverse反解析一起用<br/>　　return redirect('users:index') # 可以重定向到users/index<br/></span></span></span></span></span></span></span></span></code></pre> <pre><code class="lang-python"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-params"><span class="hljs-keyword"><span class="hljs-string"><span class="hljs-number"><span class="hljs-string"><span class="hljs-number"><span class="hljs-string"><span class="hljs-string"><span class="hljs-keyword">　　</span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> </div> <p>转载于:https://www.cnblogs.com/yinjiangchong/p/9255555.html</p> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-640.htm">uniapp封装request</a></p>
                                                <p>下一个：<a href="/html/category/article-642.htm">我们如何从MySQL表中获取特定行作为输出？</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4554.htm" title="动物医院需要几个兽医资格证书才能开诊所呢（开动物医院什么资质）">动物医院需要几个兽医资格证书才能开诊所呢（开动物医院什么资质）</a></li>
                        <li class="py-2"><a href="/html/category/article-4327.htm" title="宠物之家官网（深圳宠物之家官网）">宠物之家官网（深圳宠物之家官网）</a></li>
                        <li class="py-2"><a href="/html/category/article-4296.htm" title="宠物领养图片真实大全（宠物领养百度百科）">宠物领养图片真实大全（宠物领养百度百科）</a></li>
                        <li class="py-2"><a href="/html/category/article-4518.htm" title="最便宜的批发平台（最便宜的批发网站大全）">最便宜的批发平台（最便宜的批发网站大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-793.htm" title="Java中线程状态+线程安全问题+synchronized的用法详解_java_">Java中线程状态+线程安全问题+synchronized的用法详解_java_</a></li>
                        <li class="py-2"><a href="/html/category/article-1916.htm" title="Python 3.10 的一些新特性">Python 3.10 的一些新特性</a></li>
                        <li class="py-2"><a href="/html/category/article-4373.htm" title="属马的适不适合养猫（属马的可以养猫吗?）">属马的适不适合养猫（属马的可以养猫吗?）</a></li>
                        <li class="py-2"><a href="/html/category/article-1633.htm" title="javaScript深拷贝和浅拷贝简单梳理_在线工具">javaScript深拷贝和浅拷贝简单梳理_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2828.htm" title="JavaScript从数组中计数/ par元素以下方法详解">JavaScript从数组中计数/ par元素以下方法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-2244.htm" title="Spring Boot Web项目ConcurrentLinkedQueue+ReentrantLock+Condition实现消费者功能(类似MQ队列)">Spring Boot Web项目ConcurrentLinkedQueue+ReentrantLock+Condition实现消费者功能(类似MQ队列)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>