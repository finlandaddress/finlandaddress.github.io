<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-680.htm" />
    <title>SpringBoot使用线程池之ThreadPoolTaskExecutor和ThreadPoolExecutor - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>SpringBoot使用线程池之ThreadPoolTaskExecutor和ThreadPoolExecutor</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div id="content_views" class="markdown_views prism-github-gist"> <div class="toc"> <h3>文章目录</h3> <ul> <li>前言</li> <li>预热：ThreadPoolExecutor</li> <li> <ul> <li>构造器</li> <li>四种拒绝策略</li> <li> <ul> <li>ThreadPoolExecutor.AbortPolicy</li> <li>ThreadPoolExecutor.CallerRunsPolicy</li> <li>ThreadPoolExecutor.DiscardPolicy</li> <li>ThreadPoolExecutor.DiscardOldestPolicy</li> </ul> </li> <li>工作流程</li> </ul> </li> <li>正题：ThreadPoolTaskExecutor</li> <li> <ul> <li>继承关系</li> <li>成员变/常量</li> <li>初始化方法</li> </ul> </li> <li>高潮：SpringBoot中使用ThreadPoolTaskExecutor</li> <li> <ul> <li>创建SpringBoot项目</li> <li>文件列表</li> <li>配置属性文件</li> <li>配置类</li> <li>测试</li> </ul> </li> <li>结语：个人骚话(可看可不看鸭)</li> </ul> </div> <h1> 前言</h1> <p>一般的，我们提及线程池，最先想到的自然是java中的Executors，它作为一个线程池的工具类，提供给我们几种常见的线程池。稍微深入的童鞋应该也知道，它的底层实现，是使用了java中的ThreadPoolExecutor，而且一般在面试的时候，面试官问到的也会是这个ThreadPoolExecutor。</p> <p>我的这篇文章说的是在SpringBoot中使用线程池，自然也和它有关（底层代码实现也是它）。因此先来讲讲ThreadPoolExecutor的基本特点吧！</p> <h1> 预热：ThreadPoolExecutor</h1> <p>首先我们看看它的继承关系：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/d7448b06e225a87627c440217a70d665.jpg" alt="SpringBoot使用线程池之ThreadPoolTaskExecutor和ThreadPoolExecutor"></p> <h2> 构造器</h2> <p>这里是它的参数最多的一个构造器：</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                               <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                               <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                               <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                               <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>                               <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                               <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> </code></pre> <p>几个参数的含义分别是</p> <ul> <li> <code>corePoolSize</code>：要保留在池中的线程数，即使它们处于空闲状态，除非设置了<code>allowCoreThreadTimeOut</code>；</li> <li> <code>maximumPoolSize</code>：池中允许的最大线程数；</li> <li> <code>keepAliveTime</code>：当线程数大于核心数时，这是多余空闲线程在终止前等待新任务的最长时间；</li> <li> <code>unit</code>：<code>keepAliveTime</code>参数的时间单位；</li> <li> <code>workQueue</code>：用于在执行任务之前保存任务的队列。 这个队列将只保存<code>execute</code>方法提交的<code>Runnable</code>任务；</li> <li> <code>threadFactory</code>：执行程序创建新线程时使用的工厂；</li> <li> <code>handler</code>：执行被阻塞时使用的处理程序，因为达到了线程边界和队列容量；</li> </ul> <p>其中，<code>ThreadFactory</code> 的默认实现是：<code>Executors.defaultThreadFactory()</code>。</p> <p><code>RejectedExecutionHandler</code>的默认实现是<code>AbortPolicy</code>，内部使用的是抛出异常的方式。当然，在企业中，为了不丢失任务，<code>CallerRunsPolicy</code>用的也是很多的。<br /><code>CallerRunsPolicy</code>的功能是：被拒绝任务的处理程序，它直接在<code>execute</code>方法的调用线程中运行被拒绝的任务，除非执行程序已关闭，在这种情况下任务将被丢弃。</p> <h2> 四种拒绝策略</h2> <h3> ThreadPoolExecutor.AbortPolicy</h3> <p>处理程序在拒绝时抛出运行时<code>RejectedExecutionException</code> 。</p> <h3> ThreadPoolExecutor.CallerRunsPolicy</h3> <p>调用execute自身的线程运行任务。 这提供了一个简单的反馈控制机制，可以减慢提交新任务的速度。</p> <h3> ThreadPoolExecutor.DiscardPolicy</h3> <p>无法执行的任务被简单地丢弃。</p> <h3> ThreadPoolExecutor.DiscardOldestPolicy</h3> <p>如果执行器没有关闭，工作队列头部的任务会被丢弃，然后重试执行（可能会再次失败，导致重复执行）。</p> <h2> 工作流程</h2> <p>当一个新的任务提交给线程池时，<strong>线程池的处理步骤</strong>：</p> <ol> <li> <p>首先判断核心线程数是否已满，如果没满，则调用一个线程处理Task任务，如果已满，则执行步骤(2)。</p> </li> <li> <p>这时会判断阻塞队列是否已满，如果阻塞队列没满，就将Task任务加入到阻塞队列中等待执行，如果阻塞队列已满，则执行步骤(3)。</p> </li> <li> <p>判断是否大于最大线程数，如果小于最大线程数，则创建线程执行Task任务，如果大于最大线程数，则执行步骤(4)。</p> </li> <li> <p>这时会使用淘汰策略来处理无法执行的Task任务。</p> </li> </ol> <h1> 正题：ThreadPoolTaskExecutor</h1> <p>那现在进入正题，ThreadPoolTaskExecutor 这个类是Spring-Context支持的一个，专门用于Spring环境的线程池。其底层是在ThreadPoolExecutor的基础上包装一层，使得与Spring的整合更加方便。</p> <h2> 继承关系</h2> <p>这是根据Idea生成的一个继承关系：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/cd6d282f6bed5c5274edcef73d714d0b.jpg" alt="SpringBoot使用线程池之ThreadPoolTaskExecutor和ThreadPoolExecutor"></p> <h2> 成员变/常量</h2> <p>内部的成员变量有：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/327d07d00906cd9212398972842aaed7.jpg" alt="SpringBoot使用线程池之ThreadPoolTaskExecutor和ThreadPoolExecutor"><br /> 可以看到，确实依赖的是ThreadPoolExecutor。</p> <h2> 初始化方法</h2> <p>其中有一个初始化用的方法：</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Initializing ExecutorService"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">" '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanName <span class="token operator">+</span> <span class="token string">"'"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadNamePrefixSet <span class="token operator">&&</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanName <span class="token operator">+</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> <span class="token function">initializeExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <p>可以看到这里调用的是<code>initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)</code>，那么我们再来看看这个方法做了什么？其实是初始化了一个<code>ThreadPoolExecutor</code>！</p> <pre><code class="prism language-java"><span class="token keyword">protected</span> <span class="token class-name">ExecutorService</span> <span class="token function">initializeExecutor</span><span class="token punctuation">(</span> 			<span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span> <span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>  		<span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queueCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>  		<span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">;</span> 		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskDecorator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span> 					<span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxPoolSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveSeconds<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> 					queue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> rejectedExecutionHandler<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token annotation punctuation">@Override</span> 				<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 					<span class="token class-name">Runnable</span> decorated <span class="token operator">=</span> taskDecorator<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span> 					<span class="token keyword">if</span> <span class="token punctuation">(</span>decorated <span class="token operator">!=</span> command<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 						decoratedTaskMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>decorated<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span> 					<span class="token punctuation">}</span> 					<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>decorated<span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token punctuation">}</span> 			<span class="token punctuation">}</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span> 			executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span> 					<span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxPoolSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveSeconds<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> 					queue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  		<span class="token punctuation">}</span>  		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCoreThreadTimeOut<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			executor<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span>  		<span class="token keyword">this</span><span class="token punctuation">.</span>threadPoolExecutor <span class="token operator">=</span> executor<span class="token punctuation">;</span> 		<span class="token keyword">return</span> executor<span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  </code></pre> <p>所以，它俩的关系，你明白了吗？就是这么暧昧！</p> <h1> 高潮：SpringBoot中使用ThreadPoolTaskExecutor</h1> <blockquote> <p>首先确定你的java版本是1.8及其以上！</p> </blockquote> <h2> 创建SpringBoot项目</h2> <p>然后创建一个最简单的SpringBoot项目：<br /> 依赖只需要：</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>scope</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>version</span><span class="token punctuation">></span></span>1.18.20<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>dependencies</span><span class="token punctuation">></span></span>  </code></pre> <h2> 文件列表</h2> <p>启动类并未使用，直接用测试类测试即可达到效果！<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/47392dc5877e07a37fbc7b3d23536bc1.jpg" alt="SpringBoot使用线程池之ThreadPoolTaskExecutor和ThreadPoolExecutor"></p> <h2> 配置属性文件</h2> <pre><code class="prism language-properties"> thread-pool.config.corePoolSize = 10 thread-pool.config.maxPoolSize = 100 thread-pool.config.queueCapacity = 200 thread-pool.config.threadNamePrefix = MyThread- #  CallerRunsPolicy thread-pool.config.rejectedExecutionHandler=  </code></pre> <h2> 配置类</h2> <pre><code class="prism language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>feng<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">AsyncUncaughtExceptionHandler</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AsyncConfigurer</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableAsync</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executor</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">RejectedExecutionHandler</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">;</span>  <span class="token comment">/**  * SpringBoot 装配线程池  * @author FengJinSong  */</span> <span class="token annotation punctuation">@Slf4j</span> <span class="token annotation punctuation">@EnableAsync</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> EXECUTOR_NAME <span class="token operator">=</span> <span class="token string">"asyncExecutor"</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${thread-pool.config.corePoolSize:10}"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">Integer</span> corePoolSize<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${thread-pool.config.maxPoolSize:100}"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">Integer</span> maxPoolSize<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${thread-pool.config.queueCapacity:200}"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">Integer</span> queueCapacity<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${thread-pool.config.threadNamePrefix:AsyncThread-}"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> threadNamePrefix<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${thread-pool.config.rejectedExecutionHandler:CallerRunsPolicy}"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> rejectedExecutionHandler<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> EXECUTOR_NAME<span class="token punctuation">)</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">ThreadPoolTaskExecutor</span> threadPoolTaskExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 核心线程数</span>         threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 最大线程数</span>         threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span>maxPoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 阻塞队列容量</span>         threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span>queueCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 待任务在关机时完成--表明等待所有线程执行完</span>         threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setWaitForTasksToCompleteOnShutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 线程名称前缀</span>         threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span>threadNamePrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 设置拒绝策略</span>         threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token function">getRejectedExecutionHandler</span><span class="token punctuation">(</span>rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> threadPoolTaskExecutor<span class="token punctuation">;</span>     <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token class-name">AsyncUncaughtExceptionHandler</span> <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>throwable<span class="token punctuation">,</span> method<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">{<!-- --></span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[ThreadPool Exception]：Message [{}], Method [{}]"</span><span class="token punctuation">,</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> param <span class="token operator">:</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Parameter value [{}] "</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">/**      * 根据传入的参数获取拒绝策略      * @param rejectedName 拒绝策略名，比如 CallerRunsPolicy      * @return RejectedExecutionHandler 实例对象，没有匹配的策略时，默认取 CallerRunsPolicy 实例      */</span>     <span class="token keyword">public</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token function">getRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> rejectedName<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">RejectedExecutionHandler</span><span class="token punctuation">></span></span> rejectedExecutionHandlerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation"><</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         rejectedExecutionHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CallerRunsPolicy"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         rejectedExecutionHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"AbortPolicy"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         rejectedExecutionHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"DiscardPolicy"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         rejectedExecutionHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"DiscardOldestPolicy"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> rejectedExecutionHandlerMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>rejectedName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>   </code></pre> <h2> 测试</h2> <pre><code class="prism language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>feng</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@SpringBootTest</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootDemoApplicationTests</span> <span class="token punctuation">{<!-- --></span>      <span class="token annotation punctuation">@Resource</span>     <span class="token class-name">ThreadPoolTaskExecutor</span> asyncExecutor<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Test</span>     <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">// 控制台输出：MyThread-1-666</span>         <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">{<!-- --></span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span> asyncExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h1> 结语：个人骚话(可看可不看鸭)</h1> <p>关于这些东西，都不能仅限制在能看懂代码，要尝试思考，灵活运用，及其核心的思想是如何的。<br /> 最后，各位，如果本文对你多少有点 学到了 的样子，烦请高抬贵手点个赞吧，求求了。</p> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-679.htm">Vue混入mixins，让你减少一半代码</a></p>
                                                <p>下一个：<a href="/html/category/article-681.htm">docker之SonarQube安装</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7401.htm" title="猫粮品牌大全图片及名称（猫粮品牌排行榜及名称）">猫粮品牌大全图片及名称（猫粮品牌排行榜及名称）</a></li>
                        <li class="py-2"><a href="/html/category/article-7262.htm" title="宠物寄养市场需求（宠物寄养市场需求大吗）">宠物寄养市场需求（宠物寄养市场需求大吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-8045.htm" title="动物疫苗种类及类型图片及价格大全（动物疫苗种类及类型图片及价格大全视频）">动物疫苗种类及类型图片及价格大全（动物疫苗种类及类型图片及价格大全视频）</a></li>
                        <li class="py-2"><a href="/html/category/article-7769.htm" title="不宜养猫的4个属相女人图片（养猫不能养的植物图）">不宜养猫的4个属相女人图片（养猫不能养的植物图）</a></li>
                        <li class="py-2"><a href="/html/category/article-7631.htm" title="the body shop茶树系列怎么样(thebodyshop茶树洗面奶怎么样)">the body shop茶树系列怎么样(thebodyshop茶树洗面奶怎么样)</a></li>
                        <li class="py-2"><a href="/html/category/article-8044.htm" title="被猫抓伤要打针吗?没出血要打针吗多少钱（被猫抓伤了没出血要打针吗）">被猫抓伤要打针吗?没出血要打针吗多少钱（被猫抓伤了没出血要打针吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7539.htm" title="动物疫苗板块什么时候能涨起来（动物疫苗板块什么时候能涨起来啊）">动物疫苗板块什么时候能涨起来（动物疫苗板块什么时候能涨起来啊）</a></li>
                        <li class="py-2"><a href="/html/category/article-8229.htm" title="宠物粮在哪里买便宜（宠物粮在哪里买比较放心）">宠物粮在哪里买便宜（宠物粮在哪里买比较放心）</a></li>
                        <li class="py-2"><a href="/html/category/article-7999.htm" title="动物疫苗种类及类型分类图片 动物疫苗种类及类型分类图片大全">动物疫苗种类及类型分类图片 动物疫苗种类及类型分类图片大全</a></li>
                        <li class="py-2"><a href="/html/category/article-7217.htm" title="蒜苔炒肉的做法川菜(川菜蒜薹肉丝的做法)">蒜苔炒肉的做法川菜(川菜蒜薹肉丝的做法)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>