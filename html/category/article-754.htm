<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-754.htm" />
    <title>手把手带你入门链表的基本操作及其优化 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>手把手带你入门链表的基本操作及其优化</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>文章目录</h3> <ul> <li>一、概念</li> <li> <ul> <li>头指针：</li> <li>头结点(虚拟头结点/哨兵节点/哑节点)</li> <li>首元节点</li> <li>三者关系图</li> <li>判断链表为空</li> </ul> </li> <li>代码理解</li> <li> <ul> <li>一、遍历</li> <li>二、查找</li> <li>三、插入</li> <li> <ul> <li>1、链表头部插入</li> <li>2、链表尾部插入</li> <li> <ul> <li>1）优化1：添加tail尾节点</li> <li>2）优化2：添加虚拟头结点</li> </ul> </li> <li>3、给点节点后插入</li> </ul> </li> <li>四、删除</li> <li> <ul> <li>1、删除指定节点后面的节点</li> <li>2、删除指定节点</li> <li> <ul> <li>虚拟头结点优化</li> </ul> </li> </ul> </li> <li>五、根据索引下标插入删除</li> <li>六、时间复杂度分析</li> </ul> </li> <li>完整代码测试</li> </ul> </div> <h1> 一、概念</h1> <h2> 头指针：</h2> <p>1）头指针是指链表中 ，指向第一个结点的指针（可以是头结点也可以是首元节点，看实现方式）</p> <p>2）<strong>头指针是必须存在的</strong>,链表为空也存在（head=null）</p> <h2> 头结点(虚拟头结点/哨兵节点/哑节点)</h2> <p>1)数据域可以不存信息，也可以存储长度等附加信息</p> <p>2)<strong>头结点不是必须的</strong>，一般设置头结点是为了简化编程处理统一逻辑，有头结点的情况，头指针指向头结点(head.next==dummyHead)</p> <h2> 首元节点</h2> <p>链表中存储实际数据的第一个元素</p> <h2> 三者关系图</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/c2857a6bf9e65dc5f45b530ef7d377ad.jpg" alt="手把手带你入门链表的基本操作及其优化"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/f95dc0c3c659719ec1779de5a9f764ae.jpg" alt="手把手带你入门链表的基本操作及其优化"></p> <h2> 判断链表为空</h2> <p>带头结点的单链表的判空：head.next == null;</p> <p>不带头结点的单链表的判空：head == null;</p> <h1> 代码理解</h1> <h2> 一、遍历</h2> <pre><code>		//head 如果链表为空，那就是null     public void traverse() {         Node p = head;         //不能p.next!=null  很可能p本身就null，而且重点要遍历到最后一个元素         while (p != null) {             System.out.print(p.data + "->");             p = p.next;         }         System.out.println();     } </code></pre> <h2> 二、查找</h2> <pre><code>  public Node find(int value) {         Node p = head;         //不能p.next!=null  很可能p本身就null，而且重点要遍历到最后一个元素         while (p != null) {             if (p.data == value) {                 return p;             }             p = p.next;         }         return null;     } </code></pre> <h2> 三、插入</h2> <h3> 1、链表头部插入</h3> <p><strong>需要注意的是：</strong></p> <ul> <li> <p>头部插入 遍历的时候 与输入顺序相反 最后一个插入的最先遍历</p> </li> <li> <p>头插法不需要判断链表是否为空，链表为空，也是满足下面的代码的</p> </li> </ul> <pre><code> public void insertAtHead(int value) {         Node newNode = new Node(value);         if (head != null) {             newNode.next = head;         }         head = newNode;     } </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/f54b13bce394c6c93a8921cb89b5418e.jpg" alt="手把手带你入门链表的基本操作及其优化"></p> <h3> 2、链表尾部插入</h3> <p>我们可以发现插入操作是O(N) 每次都要遍历到最后，所以可以进行下面的优化–添加tail尾节点</p> <pre><code> 		//(data,next)     //head->1 ->2->3->null     //head->null     public void insertAtTail(int value) {         Node newNode = new Node(value);         //特殊处理链表为空的情况         if (head == null) {             head = newNode;         } else {             Node p = head;             //这里不能改成p!=null，因为改成这个的话，直接遍历到最后一个节点，但是并没有前后连接起来：用next             while (p.next != null) {                 p = p.next;             }             p.next = newNode;         }     } </code></pre> <h4> 1）优化1：添加tail尾节点</h4> <p><strong>这里我们添加尾结点优化每次需要遍历</strong></p> <p><strong>但是我们发现这里还有个问题就是每次需要特殊处理链表为空的情况，其实我们可以使用上面的虚拟头结点来进行优化</strong></p> <pre><code>		public Node head;     public Node tail; //添加尾结点优化每次需要遍历 </code></pre> <pre><code>		//尾插法优化1：添加尾节点     //head->1 ->2->3->null     //head->null     public void insertTailPlus1(int value) {         Node newNode = new Node(value);         //特殊处理链表为空的情况         if (head == null) {             head = newNode;             tail = head;         } else {             tail.next = newNode;             tail = newNode;         }     } </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/54324e62bdbd10a2fb4924c1b4d30a66.jpg" alt="手把手带你入门链表的基本操作及其优化"></p> <h4> 2）优化2：添加虚拟头结点</h4> <p>这里我们添加虚拟头结点进行优化</p> <pre><code> 		public Node newHead = new Node();  //添加虚拟头结点     public Node newTail = newHead;  	 //相当于newTail一直往后塞数据，但是虚拟头结点还是不变的 </code></pre> <pre><code>  	//尾插法优化2：添加虚拟头结点     //head->1 ->2->3->null     //head->null     public void insertTailPlus2(int value) {         Node newNode = new Node(value);         newTail.next = newNode;         newTail = newNode;         //由于遍历的时候使用head，将newHead.next也就是第一个实际的元素指向head,其实只要赋值一次即可         //如果不用head头指针遍历，用newHead进行遍历，不需要添加这个         //head = newHead.next;     } </code></pre> <p>图解可参考上面，只是不需要考虑head==null的情况</p> <h3> 3、给点节点后插入</h3> <pre><code>		//指定节点后面插入     //head->1 ->2->3->null     //head->null     public void insertAfterThisNode(Node p, int value) {         Node newNode = new Node(value);         //指定节点是空直接不用处理         if (p == null) {             return;         }         newNode.next = p.next;         p.next = newNode;     } </code></pre> <h2> 四、删除</h2> <h3> 1、删除指定节点后面的节点</h3> <pre><code> //删除指点节点的下一个节点     //head->1 ->2->3->null     //head->null     public void deleteNextNode(Node p) {     		//如果是最后一个节点或者节点不存在就不需要处理         if (p == null || p.next == null) {             return;         }         p.next = p.next.next;     } </code></pre> <h3> 2、删除指定节点</h3> <p>我们知道删除指定节点的时候需要知道前驱节点，所以最主要是在遍历的过程中时刻保存待删除节点的前驱节点</p> <p>这个逻辑稍微复杂点，思路如下:</p> <p>1）定义一个变量prev时刻保存待删除节点的前驱节点</p> <p>2）遍历链表，当找到待删除节点的时候跳出循环，没有的话就用prev时刻保存前驱节点</p> <p>3）判断是否找到了最后还没找到待删除节点 比如Node node=new Node(99999999);不存在，直接返回</p> <p>4）这时候要进行判断prev的情况</p> <ul> <li>前驱节点为空，说明删除的是头结点，则head=head.next即可</li> <li>前驱节点不为空，说明是正常删除，直接prev.next=prev.next.next</li> </ul> <pre><code>		//删除指定节点     //head->1 ->2->3->null     //head->null     public Node deleteThisNode(Node thisNode) {         if (head == null || thisNode == null) {             return null;         }         Node p = head;         Node prev = null;         //这里有可能要删除的就是最后一个节点  这时候  p.next!=null已经不满足条件会跳出，所以要用p!=null判断         while (p != null) {             if (p == thisNode) {                 break;             }             //保存每次向后移 之前的前驱节点             prev = p;             p = p.next;         }         //找到了最后还没  比如Node node=new Node(99999999);不存在         if (p == null) {             return null;         }          //说明删除的是头结点，第一次进入while就break了，头结点没有前驱节点，所以直接将头结点向后移一位即可         if (prev == null) {             head = head.next;         } else {             //删除非头结点             prev.next = prev.next.next;         }         return head;     } </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/67d16e68e4581f4f703d60a0be4edd9f.jpg" alt="手把手带你入门链表的基本操作及其优化"></p> <h4> 虚拟头结点优化</h4> <p>前面逻辑有个修改就是前驱节点从虚拟头结点开始而不是null，所以在最后面不需要对prev进行判空了，因为链表为空，有了虚拟头节点<code>prev.next = prev.next.next;</code>也是符合的</p> <pre><code>public Node deleteThisNodePlus(Node thisNode) {         if (head == null || thisNode == null) {             return null;         }         newHead.next = head;         Node prev = newHead;  //前驱节点从虚拟头结点开始而不是null         Node p = head;         while (p != null) {             if (p == thisNode) {                 break;             }             prev = p;             p = p.next;         }         if (p == null) {             return null;         }         prev.next = prev.next.next;         return newHead.next;      } </code></pre> <h2> 五、根据索引下标插入删除</h2> <p>这部分代码就不在做过多的解释，如果上面理解了，下面这个也能很好的理解，直接贴代码</p> <pre><code>		//根据索引下标插入值     //head->1 ->2->3->null     //head->null     public void insertAtIndex(int index, int value) {         if (index < 0 || index > count) {             return;         }         Node newNode = new Node(value);         Node p = head;         if (head == null) {             head = newNode;             count++;         } else {             int k = 0;             while (p != null) {                 if (k == index) {                     newNode.next = p.next;                     p.next = newNode;                     count++;                     return;                 }                 k++;                 p = p.next;             }         }     }  </code></pre> <pre><code>		//删除指定下标     //head->1 ->2->3->null     //head->null     public void deleteAtIndex(int index) {         if (index < 0 || index > count || head == null) {             return;         }          Node p = head;         int k = 0;         Node prev = null;         while (p != null) {             if (k == index) {                 count--;                 break;             }             k++;             prev = p;             p = p.next;         }         //没找到         if (p == null) {             return;         }         if (prev == null) {             head = head.next;         } else {             prev.next = prev.next.next;         }      } </code></pre> <h2> 六、时间复杂度分析</h2> <p>我们经常听到说数组查询快、插入删除慢；链表插入删除快、查询慢；</p> <p><strong>其实这都是不完整的，我们说数组查询快，说的是根据下标随机访问时间复杂度是O(1)，而如果具体我们要找某个值，还是要遍历整个数组</strong></p> <p><strong>链表插入删除快，也是有前提的，要在知道前驱节点的情况，插入删除才是O(1)；如果不知道的话，还是要遍历链表找到待删除节点的前驱节点</strong></p> <h1> 完整代码测试</h1> <p>这里贴上完整的代码和对应每个方法的测试如下,可以直接运行</p> <pre><code>package com.apple;  import org.junit.Test;  /**  * @author Apple  * @date 2021-12-10 22:07  **/ public class MyLinkedList {     public Node head;     public Node tail;     public int count;      public Node newHead = new Node();      public Node newTail = newHead;  //相当于newTail一直往后塞数据，但是虚拟头结点还是不变的      //head 如果链表为空，那就是null     public void traverse() {         Node p = head;         //不能p.next!=null  很可能p本身就null，而且重点要遍历到最后一个元素         while (p != null) {             System.out.print(p.data + "->");             p = p.next;         }         System.out.println();     }      public void insertAtHead(int value) {         Node newNode = new Node(value);         if (head != null) {             newNode.next = head;         }         head = newNode;       /*   if (head == null) {             head = newNode;         } else {             newNode.next = head;             head = newNode;         }*/     }      //(data,next)     //head->1 ->2->3->null     //head->null     public void insertAtTail(int value) {         Node newNode = new Node(value);         if (head == null) {             head = newNode;         } else {             Node p = head;             //这里不能改成p!=null，因为改成这个的话，直接遍历到最后一个节点，但是并没有前后连接起来：用next             while (p.next != null) {                 p = p.next;             }             p.next = newNode;         }         count++;     }      //尾插法优化1：添加尾节点     //head->1 ->2->3->null     //head->null     public void insertTailPlus1(int value) {         Node newNode = new Node(value);         if (head == null) {             head = newNode;             tail = head;         } else {             tail.next = newNode;             tail = newNode;         }         count++;     }      //尾插法优化2：添加虚拟头结点     //head->1 ->2->3->null     //head->null     public void insertTailPlus2(int value) {         Node newNode = new Node(value);         newTail.next = newNode;         newTail = newNode;         //由于遍历的时候使用head，将newHead.next也就是第一个实际的元素指向head,其实只要赋值一次即可         head = newHead.next;         count++;     }      //指定节点后面插入     //head->1 ->2->3->null     //head->null     public void insertAfterThisNode(Node p, int value) {         Node newNode = new Node(value);         if (p == null) {             return;         }         newNode.next = p.next;         p.next = newNode;         count++;     }      //删除指点节点的下一个节点     //head->1 ->2->3->null     //head->null     public void deleteNextNode(Node p) {         if (p == null || p.next == null) {             return;         }         p.next = p.next.next;         count--;     }      //删除指定节点     //head->1 ->2->3->null     //head->null     public Node deleteThisNode(Node thisNode) {         if (head == null || thisNode == null) {             return null;         }         Node p = head;         Node prev = null;         //这里有可能要删除的就是最后一个节点  这时候  p.next!=null已经不满足条件会跳出，所以要用p!=null判断         while (p != null) {             if (p == thisNode) {                 break;             }             //保存每次向后移 之前的前驱节点             prev = p;             p = p.next;         }         //找到了最后还没  比如Node node=new Node(123);不存在而不是null         if (p == null) {             return null;         }          //说明删除的是头结点，第一次进入while就break了   头结点没有前驱节点         if (prev == null) {             head = head.next;         } else {             //删除非头结点             prev.next = prev.next.next;         }         count--;          return head;     }      public Node deleteThisNodePlus(Node thisNode) {         if (head == null || thisNode == null) {             return null;         }         newHead.next = head;         Node prev = newHead;  //前驱节点从虚拟头结点开始而不是null         Node p = head;         while (p != null) {             if (p == thisNode) {                 break;             }             prev = p;             p = p.next;         }         if (p == null) {             return null;         }          prev.next = prev.next.next;         count--;         head=newHead.next;         return head;      }      //根据索引下标插入值     //head->1 ->2->3->null     //head->null     public void insertAtIndex(int index, int value) {         if (index < 0 || index > count) {             return;         }         Node newNode = new Node(value);         Node p = head;         if (head == null) {             head = newNode;             count++;         } else {             int k = 0;             while (p != null) {                 if (k == index) {                     newNode.next = p.next;                     p.next = newNode;                     count++;                     return;                 }                 k++;                 p = p.next;             }         }     }      //删除指定下标     //head->1 ->2->3->null     //head->null     public void deleteAtIndex(int index) {         if (index < 0 || index > count || head == null) {             return;         }          Node p = head;         int k = 0;         Node prev = null;         while (p != null) {             if (k == index) {                 count--;                 break;             }             k++;             prev = p;             p = p.next;         }         //没找到         if (p == null) {             return;         }         if (prev == null) {             head = head.next;         } else {             prev.next = prev.next.next;         }      }      public Node find(int value) {         Node p = head;         //不能p.next!=null  很可能p本身就null，而且重点要遍历到最后一个元素         while (p != null) {             if (p.data == value) {                 return p;             }             p = p.next;         }         return null;     }      class Node {         public int data;         public Node next;          public Node(int data, Node next) {             this.data = data;             this.next = next;         }          public Node(int data) {             this.data = data;         }          public Node() {         }     }      //头插法：初始化插入链表     @Test     public void testInsertAtHead() {         //头插法：初始化插入链表         insertAtHead(1);         insertAtHead(2);         insertAtHead(3);         //遍历链表         traverse();         Node findNode = find(3);         System.out.println(findNode.data);     }      //尾插法：初始化     @Test     public void testInsertAtTail() {         insertAtTail(1);         insertAtTail(2);         insertAtTail(3);         //遍历链表         traverse();         Node findNode = find(3);         System.out.println(findNode.data);     }      //尾插法优化1：添加尾节点     @Test     public void testInsertTailPlus1() {         insertTailPlus1(1);         insertTailPlus1(2);         insertTailPlus1(3);         //遍历链表         traverse();         Node findNode = find(3);         System.out.println(findNode.data);     }      //尾插法优化2：添加虚拟头节点     @Test     public void testInsertTailPlus2() {         insertTailPlus2(1);         insertTailPlus2(2);         insertTailPlus2(3);         //遍历链表         traverse();         Node findNode = find(3);         //System.out.println(findNode.data);     }      //指定节点后面插入     @Test     public void testInsertThisNode() {         insertTailPlus2(1);         insertTailPlus2(2);         insertTailPlus2(3);         Node findNode = find(2);         insertAfterThisNode(findNode, 999);         //找一个不存在的值插入         Node findNullNode = find(222);         insertAfterThisNode(findNullNode, 111);         traverse();     }      //删除指定节点之后的节点     @Test     public void testDeleteNextNode() {         insertTailPlus2(1);         insertTailPlus2(2);         insertTailPlus2(3);         Node findNode = find(2);         deleteNextNode(null);         deleteNextNode(findNode);         //找一个不存在的值插入         traverse();     }      //删除指定节点     //1->2->3  ：删除4   删除1 2 3       //1、比如删除的刚好就是最后一个3 带进去看看符不符合  删除1就是删除头结点     //链表只有一个元素 1  删除1   就是删除头结点：prev=null     @Test     public void testDeleteThisNode() {         insertTailPlus2(1);         //insertTailPlus2(2);         //insertTailPlus2(3);         Node findNode = find(1);          Node findNode2 = new Node(3);         deleteThisNode(findNode);         //deleteThisNode(findNode2);         //找一个不存在的值插入         traverse();     }      //删除指定节点     //1->2->3  ：删除4   删除1 2 3       //1、比如删除的刚好就是最后一个3 带进去看看符不符合  删除1就是删除头结点     //链表只有一个元素 1  删除1   就是删除头结点：prev=null     @Test     public void testDeleteThisNodePlus() {         insertTailPlus2(1);         insertTailPlus2(2);         insertTailPlus2(3);         Node findNode = find(2);          Node findNode2 = new Node(3);         deleteThisNodePlus(findNode);         //deleteThisNode(findNode2);         //找一个不存在的值插入         traverse();     }      @Test     public void testInsertAtIndex() {         insertAtIndex(0, 6);         insertAtIndex(0, 7);         insertAtIndex(0, 20);         insertAtIndex(5, 11);         //insertAtIndex(0,6);         //insertTailPlus2(2);         //insertTailPlus2(3);         //Node findNode = find(1);          //deleteThisNode(findNode2);         //找一个不存在的值插入         traverse();     }      @Test     public void testDeleteAtIndex() {         insertTailPlus1(1);         insertTailPlus1(2);         insertTailPlus1(3);          deleteAtIndex(5);  //不存在的         deleteAtIndex(1);         //Node findNode = find(1);          //找一个不存在的值插入         traverse();         System.out.println(count);     }  }  </code></pre> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-753.htm">爬虫系列：爬虫验证码识别_在线工具</a></p>
                                                <p>下一个：<a href="/html/category/article-755.htm">第2章 图灵的计算王国</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6987.htm" title="宠物托运检疫证明去哪里办宁波（宠物托运检疫证明去哪里办）">宠物托运检疫证明去哪里办宁波（宠物托运检疫证明去哪里办）</a></li>
                        <li class="py-2"><a href="/html/category/article-6664.htm" title="兽用注射针筒和人用的区别（兽用注射器和医用注射器有什么区别）">兽用注射针筒和人用的区别（兽用注射器和医用注射器有什么区别）</a></li>
                        <li class="py-2"><a href="/html/category/article-7216.htm" title="动物疫苗研究现状（动物疫苗研究现状分析）">动物疫苗研究现状（动物疫苗研究现状分析）</a></li>
                        <li class="py-2"><a href="/html/category/article-7906.htm" title="动物疫苗的使用方法有哪些种类的（动物疫苗知识）">动物疫苗的使用方法有哪些种类的（动物疫苗知识）</a></li>
                        <li class="py-2"><a href="/html/category/article-7769.htm" title="不宜养猫的4个属相女人图片（养猫不能养的植物图）">不宜养猫的4个属相女人图片（养猫不能养的植物图）</a></li>
                        <li class="py-2"><a href="/html/category/article-6757.htm" title="亚麻服装品牌女款(亚麻时尚女装)">亚麻服装品牌女款(亚麻时尚女装)</a></li>
                        <li class="py-2"><a href="/html/category/article-7677.htm" title="领养宠物协议书范本大全最新 领养宠物协议书范本大全最新版">领养宠物协议书范本大全最新 领养宠物协议书范本大全最新版</a></li>
                        <li class="py-2"><a href="/html/category/article-7723.htm" title="动物疫病防控中心可以打疫苗吗 动物疫病防控中心可以打疫苗吗多少钱">动物疫病防控中心可以打疫苗吗 动物疫病防控中心可以打疫苗吗多少钱</a></li>
                        <li class="py-2"><a href="/html/category/article-7584.htm" title="动物防疫站打疫苗需要狗证吗 动物防疫站打针需要什么">动物防疫站打疫苗需要狗证吗 动物防疫站打针需要什么</a></li>
                        <li class="py-2"><a href="/html/category/article-7263.htm" title="BAO美啦｜《活着》终于上线！可朴信惠这是又胖了一圈？(活着美好吗)">BAO美啦｜《活着》终于上线！可朴信惠这是又胖了一圈？(活着美好吗)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>