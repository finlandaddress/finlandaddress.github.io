<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-781.htm" />
    <title>一文搞定CompletableFuture并行处理，成倍缩短查询时间。 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>一文搞定CompletableFuture并行处理，成倍缩短查询时间。</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<h3 id="前言">前言</h3> <blockquote> <p>  工作中你可能会遇到很多这样的场景，一个接口，要从其他几个service调用查询方法，分别获取到需要的值之后再封装数据返回。</p> <p>  还可能在微服务中遇到类似的情况，某个服务的接口，要使用好几次feign去调用其他服务的方法获取数据，最后拿到想要的值并封装返回给前端。</p> <p>  这样的场景下，当某个或多个rpc调用的方法比较耗时，整个接口的响应就会非常慢。Java8之后，有一个工具非常适合处理这种场景，就是CompletableFuture。</p> </blockquote> <p></p> <h3 id="场景">场景</h3> <p>  本章主要讲解CompletableFuture的并行处理用法，来针对这种很常见的场景，帮助大家快速掌握并应用到实际工作当中。CompletableFuture内部的用法还有许多，但个人用到的场景大多都是并行处理，对其他场景感兴趣的小伙伴可以另行百度搜索。</p> <blockquote> <p>场景说明：</p> <p>写一个接口，调用另外两个HTTP接口，分别获取二十四节气和星座，最后放在一起返回。</p> </blockquote> <p></p> <h3 id="用法">用法</h3> <h4 id="1在线api">1、在线API</h4> <p>我们访问极速数据网站https://www.jisuapi.com ，注册一个账号，就可以免费使用里面的一些在线API，平均每天有100次免费机会，对于我这样经常本地做一些测试的人来说完全够用了。</p> <p>这里，我使用了其中的查询二十四节气API，和查询星座API，后面会提供案例代码，也可以直接使用我的。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8b4920693d53f553379807c94690a988.jpg" alt="一文搞定CompletableFuture并行处理，成倍缩短查询时间。"></p> <p></p> <h4 id="2编写在线api查询">2、编写在线API查询</h4> <p>这里，我们在查询时，模拟耗时的情况。</p> <h5 id="1查询二十四节气">1）、查询二十四节气</h5> <pre><code class="language-java">package com.example.async.service;  import cn.hutool.http.HttpUtil; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Service;  /**  * &lt;p&gt;  * 查询二十四节气的服务  * &lt;/p&gt;  *  * @author 福隆苑居士，公众号：【Java分享客栈】  * @since 2022-04-26 15:25  */ @Service @Slf4j public class TwentyFourService {     public static final String APPKEY = "xxxxxx";// 你的appkey    public static final String URL = "https://api.jisuapi.com/jieqi/query";     public String getResult() {        String url = URL + "?appkey=" + APPKEY;        String result = HttpUtil.get(url);         // 模拟耗时        try {           TimeUnit.SECONDS.sleep(5);        } catch (Exception e) {           log.error("[二十四节气]&gt;&gt;&gt;&gt; 异常: {}", e.getMessage(), e);        }         return result;    }     }</code></pre> <h5 id="2查询星座">2）、查询星座</h5> <pre><code class="language-java">package com.example.async.service;  import cn.hutool.http.HttpUtil; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Service;  import java.util.concurrent.TimeUnit;  /**  * &lt;p&gt;  * 查询星座的服务  * &lt;/p&gt;  *  * @author 福隆苑居士，公众号：【Java分享客栈】  * @since 2022-04-26 15:25  */ @Service @Slf4j public class ConstellationService {    public static final String APPKEY = "xxxxxx";// 你的appkey    public static final String URL = "https://api.jisuapi.com/astro/all";     public String getResult() {        String url = URL + "?appkey=" + APPKEY;       String result = HttpUtil.get(url);        // 模拟耗时       try {          TimeUnit.SECONDS.sleep(5);       } catch (Exception e) {          log.error("[星座]&gt;&gt;&gt;&gt; 异常: {}", e.getMessage(), e);       }        return result;    }     }</code></pre> <p></p> <h4 id="3编写查询服务">3、编写查询服务</h4> <pre><code class="language-java">package com.example.async.service;  import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Service;  import java.util.HashMap; import java.util.Map;  /**  * &lt;p&gt;  * 查询服务  * &lt;/p&gt;  *  * @author 福隆苑居士，公众号：【Java分享客栈】  * @since 2022-04-26 17:38  */ @Service @Slf4j public class QueryService {    private final TwentyFourService twentyFourService;    private final ConstellationService constellationService;     public QueryService(TwentyFourService twentyFourService, ConstellationService constellationService) {       this.twentyFourService = twentyFourService;       this.constellationService = constellationService;    }     /**     * 同步返回结果     * @return 结果     */    public Map&lt;String, Object&gt; query() {       // 1、查询二十四节气       String twentyFourResult = twentyFourService.getResult();        // 2、查询星座       String constellationResult = constellationService.getResult();        // 3、返回       Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();       map.put("twentyFourResult", twentyFourResult);       map.put("constellationResult", constellationResult);       return map;    } }</code></pre> <p></p> <h4 id="4编写测试接口">4、编写测试接口</h4> <blockquote> <p>这里，我们专门加上了耗时计算。</p> </blockquote> <pre><code class="language-java">package com.example.async.controller;  import cn.hutool.core.date.TimeInterval; import com.example.async.service.QueryService; import lombok.extern.slf4j.Slf4j; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import java.util.Map;  /**  * &lt;p&gt;  * 测试  * &lt;/p&gt;  *  * @author 福隆苑居士，公众号：【Java分享客栈】  * @since 2022-04-26 17:35  */ @RestController @RequestMapping("/api") @Slf4j public class TestController {     private final QueryService queryService;     public TestController(QueryService queryService) {       this.queryService = queryService;    }     /**     * 同步查询     * @return 结果     */    @GetMapping("/query")    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; query() {       // 计时       final TimeInterval timer = new TimeInterval();       timer.start();       Map&lt;String, Object&gt; map = queryService.query();       map.put("costTime", timer.intervalMs() + " ms");       return ResponseEntity.ok().body(map);    } }</code></pre> <p></p> <h4 id="5效果">5、效果</h4> <blockquote> <p>可以看到，两个接口一共耗费了10秒左右才返回。</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ecd240b3fcfc3cc1de45c1b6cab030c4.jpg" alt="一文搞定CompletableFuture并行处理，成倍缩短查询时间。"></p> <p></p> <h4 id="6completablefuture并行查询">6、CompletableFuture并行查询</h4> <blockquote> <p>现在我们来使用CompletableFuture改造下接口，并行查询两个HTTP接口再返回。</p> </blockquote> <pre><code class="language-java">package com.example.async.service;  import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Service;  import java.util.HashMap; import java.util.Map; import java.util.concurrent.CompletableFuture;  /**  * &lt;p&gt;  * 查询服务  * &lt;/p&gt;  *  * @author 福隆苑居士，公众号：【Java分享客栈】  * @since 2022-04-26 17:38  */ @Service @Slf4j public class QueryService {    private final TwentyFourService twentyFourService;    private final ConstellationService constellationService;     public QueryService(TwentyFourService twentyFourService, ConstellationService constellationService) {       this.twentyFourService = twentyFourService;       this.constellationService = constellationService;    }     /**     * 异步返回结果     * @return 结果     */    public Map&lt;String, Object&gt; queryAsync() {        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();        // 1、查询二十四节气       CompletableFuture&lt;String&gt; twentyFourQuery = CompletableFuture.supplyAsync(twentyFourService::getResult);       twentyFourQuery.thenAccept((result) -&gt; {          log.info("查询二十四节气结果：{}", result);          map.put("twentyFourResult", result);       }).exceptionally((e) -&gt; {          log.error("查询二十四节气异常: {}", e.getMessage(), e);          map.put("twentyFourResult", "");          return null;       });        // 2、查询星座       CompletableFuture&lt;String&gt; constellationQuery = CompletableFuture.supplyAsync(constellationService::getResult);       constellationQuery.thenAccept((result) -&gt; {          log.info("查询星座结果：{}", result);          map.put("constellationResult", result);       }).exceptionally((e) -&gt; {          log.error("查询星座异常: {}", e.getMessage(), e);          map.put("constellationResult", "");          return null;       });        // 3、allOf-两个查询必须都完成       CompletableFuture&lt;Void&gt; allQuery = CompletableFuture.allOf(twentyFourQuery, constellationQuery);       CompletableFuture&lt;Map&lt;String, Object&gt;&gt; future = allQuery.thenApply((result) -&gt; {          log.info("------------------ 全部查询都完成 ------------------ ");          return map;       }).exceptionally((e) -&gt; {          log.error(e.getMessage(), e);          return null;       });        // 获取异步方法返回值       // get()-内部抛出了异常需手动处理; join()-内部处理了异常无需手动处理，点进去一看便知。       future.join();        return map;    } }</code></pre> <p></p> <h4 id="7编写测试接口">7、编写测试接口</h4> <pre><code>package com.example.async.controller;  import cn.hutool.core.date.TimeInterval; import com.example.async.service.QueryService; import lombok.extern.slf4j.Slf4j; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import java.util.Map;  /**  * &lt;p&gt;  * 测试  * &lt;/p&gt;  *  * @author 福隆苑居士，公众号：【Java分享客栈】  * @since 2022-04-26 17:35  */ @RestController @RequestMapping("/api") @Slf4j public class TestController {     private final QueryService queryService;     public TestController(QueryService queryService) {       this.queryService = queryService;    }     /**     * 异步查询     * @return 结果     */    @GetMapping("/queryAsync")    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; queryAsync() {       // 计时       final TimeInterval timer = new TimeInterval();       timer.start();       Map&lt;String, Object&gt; map = queryService.queryAsync();       map.put("costTime", timer.intervalMs() + " ms");       return ResponseEntity.ok().body(map);    } }</code></pre> <p></p> <h4 id="8completablefuture效果">8、CompletableFuture效果</h4> <blockquote> <p>可以看到，时间缩短了一倍。</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ffe3adfeb532a5b1d421ae34fcc34fc9.jpg" alt="一文搞定CompletableFuture并行处理，成倍缩短查询时间。"></p> <p></p> <h4 id="9思考">9、思考</h4> <blockquote> <p>如果在微服务中，有一个很复杂的业务需要远程调用5个第三方laji厂家的接口，每个接口假设都耗时5秒，使用CompletableFuture并行处理最终需要多久？<br /> 答案是肯定的，同步查询需要25秒左右，CompletableFuture并行处理还是5秒左右，也就是说，同一个接口中，调用的耗时接口越多，CompletableFuture优化的幅度就越大。</p> </blockquote> <p></p> <h3 id="示例代码">示例代码</h3> <blockquote> <p>可以下载我的完整示例代码本地按需测试，里面有我的极速数据API的key，省得自己注册账号了，每天免费就100次，先到先得哦。</p> <p>链接：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://pan.baidu.com/doc/share/P_Jn_x22fos0ED3YEnqI8A-232386145447394"  target="_blank" rel="nofollow">https://pan.baidu.com/doc/share/P_Jn_x22fos0ED3YEnqI8A-232386145447394</a><br /> 提取码：piil</p> </blockquote> <p></p> <hr/> <p>觉得有帮助的话，就请顺手点个【推荐】吧，本人定期分享工作中的经验及趣事，原创文章均为手打，喜欢的话也可以关注一下哦~</p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-780.htm">@RequestBody某些属性值得不到</a></p>
                                                <p>下一个：<a href="/html/category/article-782.htm">Spring Cloud Config 配置中心(用途、使用、加解密)</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-786.htm" title="pandas读取csv文件提示字符读取失败">pandas读取csv文件提示字符读取失败</a></li>
                        <li class="py-2"><a href="/html/category/article-1916.htm" title="Python 3.10 的一些新特性">Python 3.10 的一些新特性</a></li>
                        <li class="py-2"><a href="/html/category/article-763.htm" title="PyMySQL中where __ in__ 的用法">PyMySQL中where __ in__ 的用法</a></li>
                        <li class="py-2"><a href="/html/category/article-782.htm" title="Spring Cloud Config 配置中心(用途、使用、加解密)">Spring Cloud Config 配置中心(用途、使用、加解密)</a></li>
                        <li class="py-2"><a href="/html/category/article-2243.htm" title="Android jetpack room+ViewModel+liveData 数据自动更新">Android jetpack room+ViewModel+liveData 数据自动更新</a></li>
                        <li class="py-2"><a href="/html/category/article-767.htm" title="超详细，Python 多线程总结的太到位了">超详细，Python 多线程总结的太到位了</a></li>
                        <li class="py-2"><a href="/html/category/article-1336.htm" title="SpringMVC拦截器path路径的坑">SpringMVC拦截器path路径的坑</a></li>
                        <li class="py-2"><a href="/html/category/article-783.htm" title="Vue中所有的v-指令">Vue中所有的v-指令</a></li>
                        <li class="py-2"><a href="/html/category/article-770.htm" title="win11系统怎么更改屏幕刷新率">win11系统怎么更改屏幕刷新率</a></li>
                        <li class="py-2"><a href="/html/category/article-3126.htm" title="pytorch cuda上tensor的定义  以及 减少cpu操作的方法">pytorch cuda上tensor的定义  以及 减少cpu操作的方法</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>