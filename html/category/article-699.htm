<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-699.htm" />
    <title>mysql的时间用什么存储_MySQL存储时间类型选择的问题讲解 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>mysql的时间用什么存储_MySQL存储时间类型选择的问题讲解</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div id="content_views" class="htmledit_views"> <div style="font-size:16px;"> <p>MySQL中存储时间通常会用datetime类型，但现在很多系统也用int存储unix时间戳，它们有什么区别？本人总结如下：</p> <p>int</p> <p>(1)4个字节存储，INT的长度是4个字节，存储空间上比datatime少，int索引存储空间也相对较小，排序和查询效率相对较高一点点</p> <p>(2)可读性极差，无法直观的看到数据</p> <p>TIMESTAMP</p> <p>(1)4个字节储存</p> <p>(2)值以UTC格式保存</p> <p>(3)时区转化 ，存储时对当前的时区进行转换，检索时再转换回当前的时区。</p> <p>(4)TIMESTAMP值不能早于1970或晚于2037</p> <p>datetime</p> <p>(1)8个字节储存</p> <p>(2)与时区无关</p> <p>(3)以'YYYY-MM-DD HH:MM:SS'格式检索和显示DATETIME值。支持的范围为'1000-01-01 00:00:00'到'9999-12-31 23:59:59'</p> <p>随着Mysql性能越来越来高，个人觉得关于时间的存储方式，具体怎么存储看个人习惯和项目需求吧</p> <p>分享两篇关于int vs timestamp vs datetime性能测试的文章</p> <p>Myisam:MySQL DATETIME vs TIMESTAMP vs INT 测试仪</p> <p>CREATE TABLE `test_datetime` (</p> <p>`id` int(10) unsigned NOT NULL AUTO_INCREMENT,</p> <p>`datetime` FIELDTYPE NOT NULL,</p> <p>PRIMARY KEY (`id`)</p> <p>) ENGINE=MyISAM;</p> <p>机型配置</p> <p>kip-locking</p> <p>key_buffer = 128M</p> <p>max_allowed_packet = 1M</p> <p>table_cache = 512</p> <p>sort_buffer_size = 2M</p> <p>read_buffer_size = 2M</p> <p>read_rnd_buffer_size = 8M</p> <p>myisam_sort_buffer_size = 8M</p> <p>thread_cache_size = 8</p> <p>query_cache_type = 0</p> <p>query_cache_size = 0</p> <p>thread_concurrency = 4</p> <p>测试</p> <p>DATETIME&nbsp;&nbsp; 14111 14010&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 14369&nbsp;&nbsp;&nbsp;&nbsp; 130000000</p> <p>TIMESTAMP&nbsp; 13888&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 13887&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 14122&nbsp;&nbsp;&nbsp;&nbsp; 90000000</p> <p>INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 13270&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 12970&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 13496&nbsp;&nbsp;&nbsp;&nbsp; 90000000</p> <p>执行mysql</p> <p>mysql&gt; select * from test_datetime into outfile ‘/tmp/test_datetime.sql';</p> <p>Query OK, 10000000 rows affected (6.19 sec)</p> <p>mysql&gt; select * from test_timestamp into outfile ‘/tmp/test_timestamp.sql';</p> <p>Query OK, 10000000 rows affected (8.75 sec)</p> <p>mysql&gt; select * from test_int into outfile ‘/tmp/test_int.sql';</p> <p>Query OK, 10000000 rows affected (4.29 sec)</p> <p>alter table test_datetime rename test_int;</p> <p>alter table test_int add column datetimeint INT NOT NULL;</p> <p>update test_int set datetimeint = UNIX_TIMESTAMP(datetime);</p> <p>alter table test_int drop column datetime;</p> <p>alter table test_int change column datetimeint datetime int not null;</p> <p>select * from test_int into outfile ‘/tmp/test_int2.sql';</p> <p>drop table test_int;</p> <p>So now I have exactly the same timestamps from the DATETIME test, and it will be possible to reuse the originals for TIMESTAMP tests as well.</p> <p>mysql&gt; load data infile ‘/export/home/ntavares/test_datetime.sql' into table test_datetime;</p> <p>Query OK, 10000000 rows affected (41.52 sec)</p> <p>Records: 10000000 Deleted: 0 Skipped: 0 Warnings: 0</p> <p>mysql&gt; load data infile ‘/export/home/ntavares/test_datetime.sql' into table test_timestamp;</p> <p>Query OK, 10000000 rows affected, 44 warnings (48.32 sec)</p> <p>Records: 10000000 Deleted: 0 Skipped: 0 Warnings: 44</p> <p>mysql&gt; load data infile ‘/export/home/ntavares/test_int2.sql' into table test_int;</p> <p>Query OK, 10000000 rows affected (37.73 sec)</p> <p>Records: 10000000 Deleted: 0 Skipped: 0 Warnings: 0</p> <p>As expected, since INT is simply stored as is while the others have to be recalculated. Notice how TIMESTAMP still performs worse, even though uses half of DATETIME storage size.</p> <p>Let's check the performance of full table scan:</p> <p>mysql&gt; SELECT SQL_NO_CACHE count(id) FROM test_datetime WHERE datetime &gt; ‘1970-01-01 01:30:00′ AND datetime &lt; ‘1970-01-01 01:35:00′;</p> <p>+———–+</p> <p>| count(id) |</p> <p>+———–+</p> <p>| 211991 |</p> <p>+———–+</p> <p>1 row in set (3.93 sec)</p> <p>mysql&gt; SELECT SQL_NO_CACHE count(id) FROM test_timestamp WHERE datetime &gt; ‘1970-01-01 01:30:00′ AND datetime &lt; ‘1970-01-01 01:35:00′;</p> <p>+———–+</p> <p>| count(id) |</p> <p>+———–+</p> <p>| 211991 |</p> <p>+———–+</p> <p>1 row in set (9.87 sec)</p> <p>mysql&gt; SELECT SQL_NO_CACHE count(id) FROM test_int WHERE datetime &gt; UNIX_TIMESTAMP('1970-01-01 01:30:00′) AND datetime &lt; UNIX_TIMESTAMP('1970-01-01 01:35:00′);</p> <p>+———–+</p> <p>| count(id) |</p> <p>+———–+</p> <p>| 211991 |</p> <p>+———–+</p> <p>1 row in set (15.12 sec)</p> <p>Then again, TIMESTAMP performs worse and the recalculations seemed to impact, so the next good thing to test seemed to be without those recalculations: find the equivalents of those UNIX_TIMESTAMP() values, and use them instead:</p> <p>mysql&gt; select UNIX_TIMESTAMP('1970-01-01 01:30:00′) AS lower, UNIX_TIMESTAMP('1970-01-01 01:35:00′) AS bigger;</p> <p>+——-+——–+</p> <p>| lower | bigger |</p> <p>+——-+——–+</p> <p>| 1800 | 2100 |</p> <p>+——-+——–+</p> <p>1 row in set (0.00 sec)</p> <p>mysql&gt; SELECT SQL_NO_CACHE count(id) FROM test_int WHERE datetime &gt; 1800 AND datetime &lt; 2100;</p> <p>+———–+</p> <p>| count(id) |</p> <p>+———–+</p> <p>| 211991 |</p> <p>+———–+</p> <p>1 row in set (1.94 sec)</p> <p></p> </div> </div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-698.htm">mysql中的日期时间类型有哪些？</a></p>
                                                <p>下一个：<a href="/html/category/article-700.htm">什么是汇编中的循环详解</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1916.htm" title="Python 3.10 的一些新特性">Python 3.10 的一些新特性</a></li>
                        <li class="py-2"><a href="/html/category/article-761.htm" title="springMVC拦截器从Request中获取Json格式并解决request的请求流只能读取一次的问题">springMVC拦截器从Request中获取Json格式并解决request的请求流只能读取一次的问题</a></li>
                        <li class="py-2"><a href="/html/category/article-760.htm" title="win11系统怎么隐藏菜单">win11系统怎么隐藏菜单</a></li>
                        <li class="py-2"><a href="/html/category/article-1345.htm" title="vue2.x版本中computed和watch的使用入门详解-watch篇_在线工具">vue2.x版本中computed和watch的使用入门详解-watch篇_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-765.htm" title="如何在MySQL DATEDIFF()函数中使用两位数的年份值？">如何在MySQL DATEDIFF()函数中使用两位数的年份值？</a></li>
                        <li class="py-2"><a href="/html/category/article-1057.htm" title="mysql 数据库密码问题">mysql 数据库密码问题</a></li>
                        <li class="py-2"><a href="/html/category/article-762.htm" title="SpringBoot入门教程：浅聊POJO简单对象(VO、DTO、Entity)">SpringBoot入门教程：浅聊POJO简单对象(VO、DTO、Entity)</a></li>
                        <li class="py-2"><a href="/html/category/article-774.htm" title="手把手教你调用微信扫一扫！三分钟包会">手把手教你调用微信扫一扫！三分钟包会</a></li>
                        <li class="py-2"><a href="/html/category/article-1929.htm" title="Android7.0特性及适配">Android7.0特性及适配</a></li>
                        <li class="py-2"><a href="/html/category/article-766.htm" title="Java：线程的三种中断方式">Java：线程的三种中断方式</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>