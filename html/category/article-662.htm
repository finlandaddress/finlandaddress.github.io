<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-662.htm" />
    <title>golang开发:go并发的建议 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>golang开发:go并发的建议</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<blockquote> <p>这个是前段时间看到Go语言的贡献者与布道师 Dave Cheney对Go并发的建议或者叫使用的陷阱（不是我自己的建议），结合自己最近几年对gorotine的使用，再回头看这几条建议，真的会茅塞顿开，觉得特别重要。这篇文章对并发的建议的章节地址<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://dave.cheney.net/practical-go/presentations/qcon-china.html#_concurrency"  target="_blank" rel="nofollow">https://dave.cheney.net/practical-go/presentations/qcon-china.html#_concurrency</a></p> </blockquote> <h3 id="dave-cheney">Dave Cheney</h3> <p>Dave Cheney 是 Go 编程语言的开源贡献者和项目成员。David 是技术社区中备受尊敬的声音，他就软件设计、性能和 Go 编程语言等各种主题发表演讲。David 在go语言历程中，分享过很多关于Golang语言的正确使用的文章。这是他的博客地址。<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://dave.cheney.net/"  target="_blank" rel="nofollow">https://dave.cheney.net/</a></p> <h3 id="81-keep-yourself-busy-or-do-the-work-yourself让自己忙碌起来或自己做工作">8.1. Keep yourself busy or do the work yourself(让自己忙碌起来或自己做工作)</h3> <p>这个建议应该比较容易理解，启动一个gorotine应该是执行程序的，自己执行或者被人调用执行，不应该启动gorotine之后这个gorotine啥事都没干。<br /> 作者举了一个例子</p> <pre><code class="language-go">package main  import ( 	"fmt" 	"log" 	"net/http" )  func main() { 	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) { 		fmt.Fprintln(w, "Hello, GopherCon SG") 	}) 	go func() { 		if err := http.ListenAndServe(":8080", nil); err != nil { 			log.Fatal(err) 		} 	}()  	for { 	} }</code></pre> <p>为了阻塞main gorotine不要直接退出，等待go func的执行，最后写了一个for的死循环，这样的话，main gorotine就是通常所说的啥事都没干，毫无结果地运行。我们当然可以使用WaitGroup去等待go func的结束。作者给我们的建议，既然我们只有一个任务需要做，main gorotine就可以完成，为什么要启动一个gorotine去做这个任务，而让main gorotine去等待，完全可以让main去做这个任务</p> <pre><code class="language-go">import ( 	"fmt" 	"log" 	"net/http" )  func main() { 	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) { 		fmt.Fprintln(w, "Hello, GopherCon SG") 	}) 	if err := http.ListenAndServe(":8080", nil); err != nil { 		log.Fatal(err) 	} }</code></pre> <p><strong>许多 Go 程序员过度使用 goroutine，尤其是在他们刚开始的时候。与生活中的所有事物一样，适度是成功的关键。</strong></p> <h3 id="82-leave-concurrency-to-the-caller将并发留给调用者">8.2. Leave concurrency to the caller(将并发留给调用者)</h3> <p><strong>这个表述起来比较容易，平常开发中可能会被忽略，一个对象提供了启动使用goroutine的方法，那么就必须提供关闭goroutine的方法，而且一般得原则的是谁调用谁关闭。</strong><br /> 举一个我们项目开发中的例子</p> <pre><code class="language-go">timer_go.go package main  import ( 	"fmt" 	"sync" 	"time" )  type TimerGo struct { 	quit chan bool }  func NewTimerGo() *TimerGo { 	timer := new(TimerGo) 	timer.quit = make(chan bool) 	return timer }  func (this *TimerGo) Run(wg *sync.WaitGroup) { 	defer wg.Done() 	cfgTime := 3  	t := time.NewTicker(time.Duration(cfgTime) * time.Second) 	defer t.Stop()  	for { 		select { 		case &lt;- this.quit: 			fmt.Println("quite") 			return 		case &lt;-t.C: 			this.Sync() 		} 	} }  func (this *TimerGo) Sync() { 	fmt.Printf("Sync") }  func (this *TimerGo) Close() { 	close(this.quit) }</code></pre> <pre><code class="language-go">main.go package main func main() { 	timergo := NewTimerGo() 	wg := new(sync.WaitGroup) 	wg.Add(1) 	go timergo.Run(wg) 	//start up 	timergo.Close() 	wg.Wait() }</code></pre> <p>这个例子比较容易理解，我们需要每隔三秒执行一个异步的任务，这个工作我们启动一个goroutine去执行，所以我们在main函数执行go timergo.Run，我们也提供Close的方法，通过一个channal去关闭它。<br /><strong>原则就是，谁调用谁关闭。提供执行方法，就必须提供关闭方法。</strong></p> <h3 id="83-never-start-a-goroutine-without-knowning-when-it-will-stop永远不要在不知道何时停止的情况下启动-goroutine">8.3. Never start a goroutine without knowning when it will stop(永远不要在不知道何时停止的情况下启动 goroutine)</h3> <p>这个原则我觉得应该是最重要的原则，而且在开发中最容易遇到的问题。我们前期也写过很多这样的代码，而且我看大家使用的项目基本也都是在需要启动一个goroutine去执行代码的时候是这样写的</p> <pre><code class="language-go">go AAA() go BBB() go CCC()</code></pre> <p>很少有人去关心启动的这三个goroutine应该在什么情况下去关闭，应该怎么关闭，他们得运行状态是怎么样的，在服务重新启动时候，是等待执行完毕还是强制中断。<br /> 这个原则应该会指引我们去做一些可靠的架构和规划。这个遇到的太多了，有必要花时间去整理这里。</p> <p><strong>永远不要在不知道何时停止的情况下启动 goroutine</strong></p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-661.htm">Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required List parame</a></p>
                                                <p>下一个：<a href="/html/category/article-663.htm">Redis的数据淘汰策略和数据过期后的删除策略</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-767.htm" title="超详细，Python 多线程总结的太到位了">超详细，Python 多线程总结的太到位了</a></li>
                        <li class="py-2"><a href="/html/category/article-1943.htm" title="linux磁盘清理方法详解">linux磁盘清理方法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1057.htm" title="mysql 数据库密码问题">mysql 数据库密码问题</a></li>
                        <li class="py-2"><a href="/html/category/article-787.htm" title="微服务架构学习与思考(09)：分布式链路追踪系统-dapper论文学习">微服务架构学习与思考(09)：分布式链路追踪系统-dapper论文学习</a></li>
                        <li class="py-2"><a href="/html/category/article-752.htm" title="jpa 原生SQL写法">jpa 原生SQL写法</a></li>
                        <li class="py-2"><a href="/html/category/article-762.htm" title="SpringBoot入门教程：浅聊POJO简单对象(VO、DTO、Entity)">SpringBoot入门教程：浅聊POJO简单对象(VO、DTO、Entity)</a></li>
                        <li class="py-2"><a href="/html/category/article-785.htm" title="C语言程序设计——用户密码输入与判断">C语言程序设计——用户密码输入与判断</a></li>
                        <li class="py-2"><a href="/html/category/article-1356.htm" title="utils层与tools层，manager层与service层，helper层概念理解">utils层与tools层，manager层与service层，helper层概念理解</a></li>
                        <li class="py-2"><a href="/html/category/article-1058.htm" title="Map循环遍历的常用方法">Map循环遍历的常用方法</a></li>
                        <li class="py-2"><a href="/html/category/article-769.htm" title="Vue实战篇：用树型组件实现一个文档目录结构">Vue实战篇：用树型组件实现一个文档目录结构</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>