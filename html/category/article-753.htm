<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-753.htm" />
    <title>爬虫系列：爬虫验证码识别_在线工具 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>爬虫系列：爬虫验证码识别_在线工具</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<h3>读取验证码与训练 Tesseract</h3> <p>在上一篇文章中我们介绍了<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.pdflibr.com/blog/crawler-series-processing-well-formed-text"  target="_blank" rel="nofollow">使用 Tesseract 如何识别格式规范的文字</a>，在这篇文章中我们将详细介绍使用 Tesseract 如何识别图像验证码。</p> <p>虽然大多数人对单词“CAPTCHA”都很熟悉，但是很少人知道它的具体含义：全自动区分计算机和人类的图灵测试（Completely Automated Public Turing test to tell Computers and Humans Apart）。它的奇怪缩写似乎表示，它一直在扮演着十分奇怪的角色。其目的是为了阻止网站访问，而不是让访问更通畅，它经常让人类和非人类的网络机器人深陷验证码识别的泥潭不能自拔。</p> <p>图灵测试首次出现在阿兰·图灵（Alan Turing）1950 年发表的论文“计算装置与智能”（Computing Machinery and Intelligence）中。他在论文中描述了这样一种场景：一个人可以和其他人交流，也可以通过计算机终端和人工智能程序交流。如果一番对话之后这个人不能区分人和人工智能程序，那么就认为这个人工智能程序通过了图灵测试，图灵认为这个人工智能程序就可以真正地“思考”所有的事情。</p> <p>令人啼笑皆非的是，60多年以后，我们开始用这些原本测试程序的题目来测试我们自己。Google 的 reCAPTCHA 难得令人发指，作为目前最具有安全意识的流行网站，Google 拦截了多达 25% 的准备访问网站的正常人类用户。</p> <p>大多数其他的验证码都是比较简单的。例如，流行的 PHP 内容管理系统 Drupal 有一个名的<a class="external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.drupal.org/project/captcha"  target="_blank" rel="nofollow">验证码模块</a>，可以生成不同难度的验证码。默认图片如图下图所示：</p> <p><a class="fancybox" href="http://img.555519.xyz/uploads3/20220509/308ec1459a64c952e14adc84c94590a7.jpg" rel="nofollow"><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/308ec1459a64c952e14adc84c94590a7.jpg" alt="爬虫系列：爬虫验证码识别_在线工具"/></a></p> <p>那么与其他验证码相比，究竟是什么让这个验证码更容易被人类和机器（<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.pdflibr.com/"  target="_blank" rel="nofollow">爬虫</a>）读懂呢？</p> <ul> <li> <p>母外面画一个方框，而不会重叠在一起。</p> </li> <li> <p>图片没有背景色、线条或其他对 OCR 程序产生干扰的噪点。</p> </li> <li> <p>虽然不能因一个图片下定论，但是这个验证码用的字体种类很少，而且用的是 sans-serif（无衬线字体） 字体（像“4”和“M”）和一种手写形式的字体（像“m”“C”和“3”）。</p> </li> <li> <p>白色背景色与深色字母之间的对比度很高。</p> </li> </ul> <p>上面验证码只做了一点点改变，就让 OCR 程序很难识别。</p> <ul> <li> <p>字母和数据都使用了，这会增加待搜索字符的数量。</p> </li> <li> <p>字母随机的倾斜程度会迷惑 OCR 软件，但是人类还是很容易识别的。</p> </li> <li> <p>那个比较陌生的手写字体很有挑战性，背景加了一些噪点，同时“M”和”Y“都进行了变换，计算机需要进行额外的训练才能识别。</p> </li> </ul> <p>用下面的代码运行 Tesseract 识别图片：</p> <pre><code>E:\Tesseract-OCR&gt;tesseract.exe "E:\我的文档\My Pictures\Saved Pictures\image_captcha_example.max_239x290.png" "E:\我的文档\My Pictures\Saved Pictures\1.txt"</code></pre> <p>我们得到的结果是一个空文本文件，有换行符。</p> <h3>训练 Tesseract</h3> <p>要训练 Tesseract 识别一种文字，无论是晦涩难懂的字体还是验证码，你都需要向 Tesseract 提供每个字符不同形式的样本。</p> <p>做这个枯燥的工作可能要花好几个小时的时间，你可能更想用这点儿时间找个好看的视频或电影看看。首先要把大量的验证码样本下载到一个文件夹里。下载的样本数量由验证码的复杂程度决定，我在训练集里一共放了100个样本（一共 500 个字符，平均每个字符 8 个样本；a~z 大小写字母加 0~9 数字，一共 62 个字符），应该足够训练的了。</p> <p>提示：建议使用验证码的真实结果给每个样本文件命名（即 4MmC3.jpg）。这样可以帮你一次性对大量的文件进行快速检查——你可以先把图片调成缩略图模式，然后通过文件名对比不同的图片。这样在后面的步骤中进行训练效果的检查也会很方便。</p> <p>第二步是准确地告诉 Tesseract 一张图片中的每个字符是什么，以及每个字符的具体位置。这里需要创建一些矩形定位文件（box file），个验证码图片生成一个矩形定位文件。一个验证码图片的矩形定位文件如下所示：</p> <pre><code>A 11 5 46 36 0 c 47 9 69 32 0 r 75 10 94 32 0 E 105 8 131 43 0</code></pre> <p>第一列符号是图片中的每个字符，后面的4个数字分别是包围这个字符的最小矩形的坐标（图片左下角是原点（0,0）,4个数字分别对应每个字符的左下角 x 坐标、左下角 y 坐标、右上角 x 坐标和右上角 y 坐标），最后一个数字“0”表示图片样本的编号。</p> <p>显然，手工创建这些图片矩形定位文件很无聊，不过有一些工具可以帮你完成。</p> <p>矩形定位文件必须保存在一个 .box 后缀的文本文件中。和图片文件一样，文本文件也是用验证码的实际结果命名（例如：4MmC3.box）。另外，这样便于检查 .box 文件的内容和文件的名称，而且按文件名对目录中的文件排序之后，就可以让 .box 文件与对应的图片文件的实际结果进行对比。</p> <p>你还需要创建大约 100 个 .box 文件来保证你有足够的训练数据。因为 Tesseract 会忽略那些不能读取的文件，所以建议你尽量多做一些矩形定位文件，以保证训练足够充分。如果你觉得训练的 OCR 结果没有达到你的目标,或者 Tesseract 识别某些字符时总是出错，多创建一些训练数据然后重新训练将是一个不错的改进方法。</p> <p>创建完满载 .box 文件和图片文件的数据文件夹之后，在做进一步分析之前最好备份一下这个文件夹。虽然在数据上运行训练程序不太可能删除任何数据，但是创建.box 文件用了你好几个小时的时间，来之不易，稳妥一点儿总没错。此外,能够抓取一个满是编译数据的混乱目录，然后再尝试一次，总是好的。</p> <p>完成所有的数据分析工作和创建 Tesseract 所需的训练文件，一共有六个步骤。有一些工具可以帮你处理图片和 .box 文件，不过目前 Tesseract 3.02 还不支持。</p> <p>我再 github 上找到了一个 Python 版的<a class="external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/REMitchell/tesseract-trainer"  target="_blank" rel="nofollow">解决方案</a>来处理同时包含图片文件和 .box 文件的数据文件夹，然后自动创建所有必需的训练文件。</p> <p>这个解决方案的主要配置方式和步骤都在 main 方法（目前，作者已经在 GitHub 中将示例代码修改为 __init__ 方法,符合 Python 的类定义原则）和 runAll 方法里：</p> <div class="cnblogs_Highlighter"> <pre class="brush:python;gutter:true;">from PIL import Image import subprocess import os   # Steps to take before running: # Set TESSDATA_PREFIX to correct directory # Put image and box files together in the same directory # Label each corresponding file with the same filenames  class TesseractTrainer:     def __init__(self):         new_path = os.path.join(os.getcwd(), 'a_z\\')         self.languageName = "eng"         self.fontName = "captchaFont"         self.directory = new_path         self.trainingList = None         self.boxList = None      def runAll(self):         self.createFontFile()         # self.cleanImages()         self.renameFiles()         self.extractUnicode()         self.runShapeClustering()         self.runMfTraining()         self.runCnTraining()         self.createTessData()      def cleanImages(self):         print("CLEANING IMAGES...")         files = os.listdir(self.directory)          for fileName in files:             if fileName.endswith("tif") or fileName.endswith("jpeg") or fileName.endswith("png"):                 image = Image.open(self.directory + "/" + fileName)                 # # Set a threshold value for the image, and save                 # image = image.point(lambda x: 0 if x &lt; 250 else 255)                 (root, ext) = os.path.splitext(fileName)                  newFilePath = root + ".tiff"                 image.save(self.directory + "/" + newFilePath)      # Looks for box files, uses the box filename to find the corresponding     # .tiff file. Renames all files with the appropriate "&lt;language&gt;.&lt;font&gt;.exp&lt;N&gt;" filename     def renameFiles(self):         files = os.listdir(self.directory)         boxString = ""         i = 0         for fileName in files:             if fileName.endswith(".box"):                 (root, ext) = os.path.splitext(fileName)                 tiffFile = self.languageName + "." + self.fontName + ".exp" + str(i) + ".tiff"                 boxFile = self.languageName + "." + self.fontName + ".exp" + str(i) + ".box"                  os.rename(self.directory + "/" + root + ".tiff", self.directory + "/" + tiffFile)                 os.rename(self.directory + "/" + root + ".box", self.directory + "/" + boxFile)                 boxString += " " + boxFile                 self.createTrainingFile(self.languageName + "." + self.fontName + ".exp" + str(i))                 i += 1          return boxString      # Creates a training file for a single tiff/box pair     # Called by renameFiles     def createTrainingFile(self, prefix):         print("CREATING TRAINING DATA...")         currentDir = os.getcwd()         os.chdir(self.directory)         p = subprocess.Popen(["tesseract", prefix + ".tiff", prefix, "nobatch", "box.train"], stdout=subprocess.PIPE,                              stderr=subprocess.PIPE)         returnValue = p.communicate()[1]         returnValue = returnValue.decode("utf-8", errors='ignore')         if "Empty page!!" in returnValue:             os.chdir(self.directory)             subprocess.call(["tesseract", "-psm", "7", prefix + ".tiff", prefix, "nobatch", "box.train"])         os.chdir(currentDir)      def extractUnicode(self):         currentDir = os.getcwd()         print("EXTRACTING UNICODE...")         boxList = self.getBoxFileList()         boxArr = boxList.split(" ")         boxArr.insert(0, "unicharset_extractor")         boxArr = [i for i in boxArr if i != '']         os.chdir(self.directory)         p = subprocess.Popen(boxArr)         p.wait()         os.chdir(currentDir)      def createFontFile(self):         currentDir = os.getcwd()         os.chdir(self.directory)         fname = self.directory + "/font_properties"         with open(fname, 'w') as fout:             fout.write(self.fontName + " 0 0 0 0 0")         os.chdir(currentDir)      def runShapeClustering(self):         print("RUNNING SHAPE CLUSTERING...")         # shapeclustering -F font_properties -U unicharset eng.captchaFont.exp0.tr...         self.getTrainingFileList()         shapeCommand = self.trainingList.split(" ")         shapeCommand.insert(0, "shapeclustering")         shapeCommand.insert(1, "-F")         shapeCommand.insert(2, "font_properties")         shapeCommand.insert(3, "-U")         shapeCommand.insert(4, "unicharset")         shapeCommand = [i for i in shapeCommand if i != '']         currentDir = os.getcwd()         os.chdir(self.directory)         p = subprocess.Popen(shapeCommand)         p.wait()         os.chdir(currentDir)      def runMfTraining(self):         # mftraining -F font_properties -U unicharset eng.captchaFont.exp0.tr...         print("RUNNING MF CLUSTERING...")         self.getTrainingFileList()         mfCommand = self.trainingList.split(" ")         mfCommand.insert(0, "mftraining")         mfCommand.insert(1, "-F")         mfCommand.insert(2, "font_properties")         mfCommand.insert(3, "-U")         mfCommand.insert(4, "unicharset")         mfCommand = [i for i in mfCommand if i != '']          currentDir = os.getcwd()         os.chdir(self.directory)         p = subprocess.Popen(mfCommand)         p.wait()         os.chdir(currentDir)      def runCnTraining(self):         # cntraining -F font_properties -U unicharset eng.captchaFont.exp0.tr...         print("RUNNING MF CLUSTERING...")         self.getTrainingFileList()         cnCommand = self.trainingList.split(" ")         cnCommand.insert(0, "cntraining")         cnCommand.insert(1, "-F")         cnCommand.insert(2, "font_properties")         cnCommand.insert(3, "-U")         cnCommand.insert(4, "unicharset")         cnCommand = [i for i in cnCommand if i != '']          currentDir = os.getcwd()         os.chdir(self.directory)         p = subprocess.Popen(cnCommand)         p.wait()         os.chdir(currentDir)      def createTessData(self):         print("CREATING TESS DATA...")         # Rename all files and run combine_tessdata &lt;language&gt;.         currentDir = os.getcwd()         os.chdir(self.directory)         os.rename("unicharset", self.languageName + ".unicharset")         os.rename("shapetable", self.languageName + ".shapetable")         os.rename("inttemp", self.languageName + ".inttemp")         os.rename("normproto", self.languageName + ".normproto")         os.rename("pffmtable", self.languageName + ".pffmtable")          p = subprocess.Popen(["combine_tessdata", self.languageName + "."])         p.wait()         os.chdir(currentDir)      def getBoxFileList(self):         if self.boxList is not None:             return self.boxList         self.boxList = ""         files = os.listdir(self.directory)         commandString = "unicharset_extractor"         filesFound = False          for fileName in files:             if fileName.endswith(".box"):                 filesFound = True                 self.boxList += " " + fileName          if not filesFound:             self.boxList = None         return self.boxList      # Retrieve a list of created training files, caches     # the list, so this only needs to be done once.     def getTrainingFileList(self):         if self.trainingList is not None:             return self.trainingList          self.trainingList = ""          files = os.listdir(self.directory)         commandString = "unicharset_extractor"         filesFound = False          for fileName in files:             if fileName.endswith(".tr"):                 filesFound = True                 self.trainingList += " " + fileName          if not filesFound:             self.trainingList = None         return self.trainingList   if __name__ == '__main__':     trainer = TesseractTrainer()     trainer.runAll()</pre> </div> <p>你需要动手设置的只有三个变量。</p> <ul> <li>LanguageName</li> </ul> <p>Tesseract 用三个字母的语言缩写代码表示识别的语言种类。可能大多数情况下，你都会用”eng“表示英语（English）。</p> <ul> <li>fontName</li> </ul> <p>表示你选择的字体名称，可以是任意名称，但必须是一个不包含空格的单词。</p> <ul> <li>directory</li> </ul> <p>表示包含所有图片和 .box 文件的目录。建议你使用文件夹的绝对路径，但是如果你使用相对路径，可能需要以Python 代码运行的目录位置为原点。如果你使用绝对路径，就可以在电脑的任意位置运行代码了。 让我们再看看runAll 里每个函数的用法。</p> <p><code>createFontFile</code>&nbsp;创建了一个<code>font_properties</code>&nbsp;文件，让 Tesseract 知道我们要创建的新字体：</p> <pre><code>captchaFont 0 0 0 0 0</code></pre> <p>这个文件包括字体的名称，后面跟着若干 1 和 0，分别表示应该使用斜体、加粗或其他版本的字体（用这些属性训练字体是一个很好玩儿的练习）。</p> <p><code>cleanImages</code>&nbsp;首先创建所有样本图片的高对比度版本，然后转换成灰度图，并进行一些清理，让 Tesseract 更容易读取图片文件。如果你要处理的验证码图片上面有一些很容易过滤掉的噪点，那么你可以在这里增加一些步骤来处理它们。</p> <p><code>renameFiles</code>&nbsp;把所有的图片文件和 .box 文件的文件名改变成 Tesseract 需要的形式（fileNumber 是文件序号，用来区别每个文件）：</p> <pre><code>&lt;languageName&gt;.&lt;fontName&gt;.exp&lt;fileNumber&gt;.box  &lt;languageName&gt;,&lt;fontName&gt;.exp&lt;fileNumber&gt;.tiff</code></pre> <p><code>extractUnicode</code>&nbsp;函数会检查所有已创建的 .box 文件，确定要训练的字符集范围。抽取出的 Unicode 会告诉你一共找到了多少个不重复的字符，这也是一个查询字符的好方法，如果你漏了字符可以用这个结果快速排查。</p> <p>之后的三个函数，<code>runShapeClustering</code>、<code>runMfTraining</code>&nbsp;和<code>runCtTraining</code>&nbsp;分别用来创建文件<code>shapetable</code>、<code>pfftable</code>&nbsp;和<code>normproto</code>。它们会生成每个字符的几何和形状信息，也为 Tesseract 提供计算字符若干可能结果的概率统计信息。</p> <p>最后，Tesseract 会用之前设置的语言名称对数据文件夹编译出的每个文件进行重命名（例如：<code>shapetable</code>&nbsp;被重命名为<code>eng.shapetable</code>），然后把所有的文件编译到最终的训练文件<code>eng.traineddata</code>&nbsp;中。</p> <p>你需要动手完成的唯一步骤,就是用下面的 Linux 和 Mac 命令行把刚刚创建的<code>eng-traineddata</code>&nbsp;文件复制到<code>tessdata</code>&nbsp;文件夹里，Windows 系统类似：</p> <pre><code>$cp /path/to/data/eng.traineddata $TESSDATA_PREFIX/tessdata</code></pre> <p>经过这些步骤之后，你就可以用这些 Tesseract 训练过的验证码来识别新图片了。</p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-752.htm">jpa 原生SQL写法</a></p>
                                                <p>下一个：<a href="/html/category/article-754.htm">手把手带你入门链表的基本操作及其优化</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-758.htm" title="Spring Security 一键接入验证码登录和小程序登录">Spring Security 一键接入验证码登录和小程序登录</a></li>
                        <li class="py-2"><a href="/html/category/article-763.htm" title="PyMySQL中where __ in__ 的用法">PyMySQL中where __ in__ 的用法</a></li>
                        <li class="py-2"><a href="/html/category/article-787.htm" title="微服务架构学习与思考(09)：分布式链路追踪系统-dapper论文学习">微服务架构学习与思考(09)：分布式链路追踪系统-dapper论文学习</a></li>
                        <li class="py-2"><a href="/html/category/article-744.htm" title="Django项目引入NPM和gulp管理前端资源">Django项目引入NPM和gulp管理前端资源</a></li>
                        <li class="py-2"><a href="/html/category/article-762.htm" title="SpringBoot入门教程：浅聊POJO简单对象(VO、DTO、Entity)">SpringBoot入门教程：浅聊POJO简单对象(VO、DTO、Entity)</a></li>
                        <li class="py-2"><a href="/html/category/article-777.htm" title="基于51单片机的秒表，单独按键控制启动，暂停，复位。">基于51单片机的秒表，单独按键控制启动，暂停，复位。</a></li>
                        <li class="py-2"><a href="/html/category/article-764.htm" title="SpringBoot中使用RestTemplate发送文件流，以及读取zip压缩包中文件的方法">SpringBoot中使用RestTemplate发送文件流，以及读取zip压缩包中文件的方法</a></li>
                        <li class="py-2"><a href="/html/category/article-754.htm" title="手把手带你入门链表的基本操作及其优化">手把手带你入门链表的基本操作及其优化</a></li>
                        <li class="py-2"><a href="/html/category/article-742.htm" title="聊聊 node 如何优雅地获取 mac 系统版本">聊聊 node 如何优雅地获取 mac 系统版本</a></li>
                        <li class="py-2"><a href="/html/category/article-741.htm" title="Spring 5 中文解析数据存储篇-JDBC数据存储(下)">Spring 5 中文解析数据存储篇-JDBC数据存储(下)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>