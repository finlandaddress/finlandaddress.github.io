<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-565.htm" />
    <title>Google C++编程风格指南（二）：作用域 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/xcblog/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>Google C++编程风格指南（二）：作用域</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div id="content_views" class="htmledit_views"> <p>1. .cc中的不具名命名空间可避免命名冲突、限定作用域，避免直接使用using提示符污染命名空间； 2. 嵌套类符合局部使用原则，只是不能在其他头文件中前置声明，尽量不要public；3. 尽量不用全局函数和全局变量，考虑作用域和命名空间限制，尽量单独形成编译单元…… </p> <ul> <li> <strong>作用域</strong> </li> </ul> <p><strong>1. 命名空间（Namespaces）</strong> </p> <p>在.cc文件中，提倡使用不具名的命名空间（unnamed namespaces，译者注：不具名的命名空间就像不具名的类一样，似乎被介绍的很少:-(）。使用具名命名空间时，其名称可基于项目或路径名称，不要使用using指示符。</p> <p><strong>定义：</strong> 命名空间将全局作用域细分为不同的、具名的作用域，可有效防止全局作用域的命名冲突。</p> <p><strong>优点：</strong> 命名空间提供了（可嵌套）命名轴线（name axis，译者注：将命名分割在不同命名空间内），当然，类也提供了（可嵌套）的命名轴线（译者注：将命名分割在不同类的作用域内）。</p> <p>举例来说，两个不同项目的全局作用域都有一个类Foo，这样在编译或运行时造成冲突。如果每个项目将代码置于不同命名空间中，project1::Foo和project2::Foo作为不同符号自然不会冲突。</p> <p><strong>缺点：</strong> 命名空间具有迷惑性，因为它们和类一样提供了额外的（可嵌套的）命名轴线。在头文件中使用不具名的空间容易违背C++的唯一定义原则（One Definition Rule (ODR)）。</p> <p><strong>结论：</strong> 根据下文将要提到的策略合理使用命名空间。</p> <p><strong>1) 不具名命名空间（Unnamed Namespaces）</strong> </p> <p>在.cc文件中，允许甚至提倡使用不具名命名空间，以避免运行时的命名冲突：</p> <p>namespace {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // .cc 文件中 </p> <p>// 命名空间的内容无需缩进<br /> enum { UNUSED, EOF, ERROR };&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 经常使用的符号<br /> bool AtEof() { return pos_ == EOF; }&nbsp;&nbsp; // 使用本命名空间内的符号EOF </p> <p>}&nbsp; // namespace </p> <p>然而，与特定类关联的文件作用域声明在该类中被声明为类型、静态数据成员或静态成员函数，而不是不具名命名空间的成员。像上文展示的那样，不具名命名空间结束时用注释// namespace标识。 </p> <p>不能在.h文件中使用不具名命名空间。 </p> <p><strong>2) 具名命名空间（Named Namespaces）</strong> </p> <p>具名命名空间使用方式如下：</p> <p>命名空间将除文件包含、全局标识的声明/定义以及类的前置声明外的整个源文件封装起来，以同其他命名空间相区分。</p> <p>// .h文件<br /> namespace mynamespace { </p> <p>// 所有声明都置于命名空间中<br /> // 注意不要使用缩进<br /> class MyClass {<!-- --><br /> public:<br /> &nbsp; ...<br /> &nbsp; void Foo();<br /> }; </p> <p>}&nbsp; // namespace mynamespace</p> <p>// .cc文件<br /> namespace mynamespace { </p> <p>// 函数定义都置于命名空间中<br /> void MyClass::Foo() {<!-- --><br /> &nbsp; ...<br /> } </p> <p>}&nbsp; // namespace mynamespace </p> <p>通常的.cc文件会包含更多、更复杂的细节，包括对其他命名空间中类的引用等。 </p> <p>#include "a.h" </p> <p>DEFINE_bool(someflag, false, "dummy flag"); </p> <p>class C;&nbsp; // 全局命名空间中类C的前置声明<br /> namespace a { class A; }&nbsp; // 命名空间a中的类a::A的前置声明 </p> <p>namespace b { </p> <p>...code for b...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // b中的代码 </p> <p>}&nbsp; // namespace b</p> <p>不要声明命名空间std下的任何内容，包括标准库类的前置声明。声明std下的实体会导致不明确的行为，如，不可移植。声明标准库下的实体，需要包含对应的头文件。</p> <p>最好不要使用using指示符，以保证命名空间下的所有名称都可以正常使用。</p> <p>// 禁止——污染命名空间<br /> using namespace foo;</p> <p>在.cc文件、.h文件的函数、方法或类中，可以使用using。</p> <p>// 允许：.cc文件中<br /> // .h文件中，必须在函数、方法或类的内部使用<br /> using ::foo::bar;</p> <p>在.cc文件、.h文件的函数、方法或类中，还可以使用命名空间别名。</p> <p>// 允许：.cc文件中<br /> // .h文件中，必须在函数、方法或类的内部使用</p> <p>namespace fbz = ::foo::bar::baz;</p> <p><strong>2. 嵌套类（Nested Class）</strong> </p> <p>当公开嵌套类作为接口的一部分时，虽然可以直接将他们保持在全局作用域中，但将嵌套类的声明置于命名空间中是更好的选择。</p> <p><strong>定义：</strong> 可以在一个类中定义另一个类，嵌套类也称成员类（member class）。 </p> <p>class Foo { </p> <p>private:<br /> &nbsp; // Bar是嵌套在Foo中的成员类<br /> &nbsp; class Bar {<!-- --><br /> &nbsp;&nbsp;&nbsp; ...<br /> &nbsp; }; </p> <p>}; </p> <p><strong>优点：</strong> 当嵌套（成员）类只在被嵌套类（enclosing class）中使用时很有用，将其置于被嵌套类作用域作为被嵌套类的成员不会污染其他作用域同名类。可在被嵌套类中前置声明嵌套类，在.cc文件中定义嵌 套类，避免在被嵌套类中包含嵌套类的定义，因为嵌套类的定义通常只与实现相关。 </p> <p><strong>缺点：</strong> 只能在被嵌套类的定义中才能前置声明嵌套类。因此，任何使用Foo::Bar*指针的头文件必须包含整个Foo的声明。 </p> <p><strong>结论：</strong> 不要将嵌套类定义为public，除非它们是接口的一部分，比如，某个方法使用了这个类的一系列选项。 </p> <p><strong>3. 非成员函数（Nonmember）、静态成员函数（Static Member）和全局函数（Global Functions）</strong> </p> <p>使用命名空间中的非成员函数或静态成员函数，尽量不要使用全局函数。 </p> <p><strong>优点：</strong> 某些情况下，非成员函数和静态成员函数是非常有用的，将非成员函数置于命名空间中可避免对全局作用域的污染。 </p> <p><strong>缺点：</strong> 将非成员函数和静态成员函数作为新类的成员或许更有意义，当它们需要访问外部资源或具有重要依赖时更是如此。 </p> <p><strong>结论：</strong> </p> <p>有时，不把函数限定在类的实体中是有益的，甚至需要这么做，要么作为静态成员，要么作为非成员函数。非成员函数不应依赖于外部变量，并尽量置于某个命名空间中。相比单纯为了封装若干不共享任何静态数据的静态成员函数而创建类，不如使用命名空间。 </p> <p>定义于同一编译单元的函数，被其他编译单元直接调用可能会引入不必要的耦合和连接依赖；静态成员函数对此尤其敏感。可以考虑提取到新类中，或者将函数置于独立库的命名空间中。 </p> <p>如果你确实需要定义非成员函数，又只是在.cc文件中使用它，可使用不具名命名空间或static关联（如<code><span style="font-family: NSimsun;">static int Foo() {...}</span> </code> ）限定其作用域。 </p> <p><strong>4. 局部变量（Local Variables）</strong> </p> <p>将函数变量尽可能置于最小作用域内，在声明变量时将其初始化。</p> <p>C++允许在函数的任何位置声明变量。我们提倡在尽可能小的作用域中声明变量，离第一次使用越近越好。这使得代码易于阅读，易于定位变量的声明位置、变量类型和初始值。特别是，应使用初始化代替声明+赋值的方式。</p> <p>int i;<br /> i = f();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 坏——初始化和声明分离<br /> nt j = g();&nbsp;&nbsp; // 好——初始化时声明</p> <p>注意：gcc可正确执行for (int i = 0; i &lt; 10; ++i)（i的作用域仅限for循环），因此其他for循环中可重用i。if和while等语句中，作用域声明（scope declaration）同样是正确的。</p> <p>while (const char* p = strchr(str, '/')) str = p + 1;</p> <p>注意：如果变量是一个对象，每次进入作用域都要调用其构造函数，每次退出作用域都要调用其析构函数。</p> <p>// 低效的实现<br /> for (int i = 0; i &lt; 1000000; ++i) {<!-- --><br /> &nbsp; Foo f;&nbsp; // 构造函数和析构函数分别调用1000000次！<br /> &nbsp; f.DoSomething(i);<br /> }</p> <p>类似变量放到循环作用域外面声明要高效的多：</p> <p>Foo f;&nbsp; // 构造函数和析构函数只调用1次<br /> for (int i = 0; i &lt; 1000000; ++i) {<!-- --><br /> &nbsp; f.DoSomething(i);<br /> }</p> <p><strong>5. 全局变量（Global Variables）</strong> </p> <p>class类型的全局变量是被禁止的，内建类型的全局变量是允许的，当然多线程代码中非常数全局变量也是被禁止的。永远不要使用函数返回值初始化全局变量。</p> <p>不幸的是，全局变量的构造函数、析构函数以及初始化操作的调用顺序只是被部分规定，每次生成有可能会有变化，从而导致难以发现的bugs。</p> <p>因此，禁止使用class类型的全局变量（包括STL的string, vector等等），因为它们的初始化顺序有可能导致构造出现问题。内建类型和由内建类型构成的没有构造函数的结构体可以使用，如果你一定要使用 class类型的全局变量，请使用单件模式（singleton pattern）。</p> <p>对于全局的字符串常量，使用C风格的字符串，而不要使用STL的字符串：</p> <p>const char kFrogSays[] = "ribbet";</p> <p>虽然允许在全局作用域中使用全局变量，使用时务必三思。大多数全局变量应该是类的静态数据成员，或者当其只在.cc文件中使用时，将其定义到不具名命名空间中，或者使用静态关联以限制变量的作用域。</p> <p>记住，静态成员变量视作全局变量，所以，也不能是class类型！</p> <p>______________________________________ </p> <p>译者：这一篇主要提到的是作用域的一些规则，总结一下： </p> <p><strong>1. .cc中的不具名命名空间可避免命名冲突、限定作用域，避免直接使用using提示符污染命名空间；</strong> </p> <p><strong>2. 嵌套类符合局部使用原则，只是不能在其他头文件中前置声明，尽量不要public；</strong> </p> <p><strong>3. 尽量不用全局函数和全局变量，考虑作用域和命名空间限制，尽量单独形成编译单元；</strong> </p> <p><strong>4. 多线程中的全局变量（含静态成员变量）不要使用class类型（含STL容器），避免不明确行为导致的bugs</strong> <strong>。</strong> </p> <p><strong>作用域的使用，除了考虑名称污染、可读性之外，主要是为降低耦合度，提高编译、执行效率。</strong> </p> <p> 原文：<a title="Google C++ Style Guide" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml?showone=Displaying_Hidden_Details_in_this_Guide"  target="_blank" rel="nofollow">Google C++ Style Guide</a> </p> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-564.htm">PHP可迭代</a></p>
                                                <p>下一个：<a href="/html/category/article-566.htm">Redis的内存淘汰机制和删除策略</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-741.htm" title="Spring 5 中文解析数据存储篇-JDBC数据存储(下)">Spring 5 中文解析数据存储篇-JDBC数据存储(下)</a></li>
                        <li class="py-2"><a href="/html/category/article-729.htm" title="visual studio 使用cmake构建项目并远程连接虚拟机centos7">visual studio 使用cmake构建项目并远程连接虚拟机centos7</a></li>
                        <li class="py-2"><a href="/html/category/article-751.htm" title="Azure Service Fabric 踩坑日志_在线工具">Azure Service Fabric 踩坑日志_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-738.htm" title="通过源码了解Java的自动装箱拆箱">通过源码了解Java的自动装箱拆箱</a></li>
                        <li class="py-2"><a href="/html/category/article-766.htm" title="Java：线程的三种中断方式">Java：线程的三种中断方式</a></li>
                        <li class="py-2"><a href="/html/category/article-781.htm" title="一文搞定CompletableFuture并行处理，成倍缩短查询时间。">一文搞定CompletableFuture并行处理，成倍缩短查询时间。</a></li>
                        <li class="py-2"><a href="/html/category/article-787.htm" title="微服务架构学习与思考(09)：分布式链路追踪系统-dapper论文学习">微服务架构学习与思考(09)：分布式链路追踪系统-dapper论文学习</a></li>
                        <li class="py-2"><a href="/html/category/article-778.htm" title="nginx.conf配置文件结构小结_nginx">nginx.conf配置文件结构小结_nginx</a></li>
                        <li class="py-2"><a href="/html/category/article-744.htm" title="Django项目引入NPM和gulp管理前端资源">Django项目引入NPM和gulp管理前端资源</a></li>
                        <li class="py-2"><a href="/html/category/article-786.htm" title="pandas读取csv文件提示字符读取失败">pandas读取csv文件提示字符读取失败</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">22</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>