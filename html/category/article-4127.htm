<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-4127.htm" />
    <title>MQTT物联网通讯协议入门及Demo实现 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>MQTT物联网通讯协议入门及Demo实现</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div class="toc"> <div class="toc-container-header"><span style="font-size: 1.5em;">一、MQTT协议概念</span></div> </div> <p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），它是一个极其<strong>轻量级</strong>的<code>发布/订阅</code>消息传输协议，轻量级指的是较少的代码和带宽。因为在物联网行业有类似充电桩、娃娃机、遥控飞行器等等这样的设备，它们的网络可能存在不稳定的情况并且只需要传输少量的数据，MQTT就应运而生专为受限设备和低带宽、高延迟或不可靠的网络而设计。</p> <h4 id="发布订阅机制">发布/订阅机制</h4> <p>发布/订阅模型<strong>将发送消息的客户端（发布者）与接收消息的客户端（订阅者）分离</strong>。发布者和订阅者从不直接联系。他们甚至不知道对方的存在，它们之间由一个第三方组件（<strong>代理</strong>）处理帮助筛选所有传入消息，并将其正确分发给订阅者。<strong>消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/08a53f2ee2239f2b8229ebba7cc710ca.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> <p>这个机制最重要的是将发布者和订阅者进行解耦</p> <ol> <li>发布者、订阅者不需要交换端口知道对方的主机，只需要知道代理的主机和端口</li> <li>发布者、订阅者不需要同时都运行，哪怕一方下线</li> <li>发布或接收期间，这两个组件上的操作都不需要中断</li> </ol> <h4 id="mqtt客户端">MQTT客户端</h4> <p>发布者和订阅者都是客户端，可以是设备也可以是服务器，简单来说就是<strong>网络连接到MQTT代理的任何设备</strong>。</p> <h4 id="broker代理服务器">Broker代理（服务器）</h4> <p><strong>代理负责接收所有消息、过滤消息、确定谁订阅了每条消息，并将消息发送到这些订阅的客户端。</strong>代理还保存具有持久会话的所有客户端的会话数据，包括订阅和丢失的消息。代理的另一个职责是客户端的身份验证和授权。通常，代理是可扩展的，这有助于自定义身份验证、授权和集成到后端系统中。</p> <h4 id="mqtt消息结构">MQTT消息结构</h4> <p>MQTT消息包含三个部分：</p> <ul> <li> <p>固定头（Fixed header）</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/fd83780622996498da06dcfaa64eaea8.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> </li> <li> <p>可变头（Variable header）</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c2971a9ee77ae4f7d1f3884284cf8cb8.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> </li> <li> <p>消息体（payload）</p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/3728cffb597e5562f105384f920e501f.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> <h2 id="二mqtt协议实现原理">二、MQTT协议实现原理</h2> <p>MQTT 客户端需要连接到代理后立即发布消息，然后订阅者从里面订阅数据，这里涉及到六个部分：<code>CONNECT</code>、<code>Publish</code>、<code>Subscribe</code>、<code>Unsubscribe</code>、<code>SUBACK</code>、<code>Unsuback</code></p> <h4 id="mqtt连接">MQTT连接</h4> <p>客户端向代理发送CONNECT消息。代理响应一个CONNACK消息和一个状态码。连接建立后，代理将保持连接打开，直到客户端发送断开连接命令或连接断开</p> <p><strong>CONNECT</strong>消息主要包含以下内容：</p> <ul> <li> <p>ClientId：代理使用ClientId来标识客户端和客户端当前状态，对于每个客户端和代理ClientId是唯一的</p> </li> <li> <p>Clean Session：标志告诉代理客户端是否想要建立一个持久会话。如果为false代理会存储客户端的所有订阅以及使用服务质量(QoS)级别1或2进行订阅的客户端的所有错过的消息。如果为true代理不为客户端存储任何内容，并清除以前任何持久会话中的所有信息</p> </li> <li> <p>Username/Password：用户名和密码用于客户端身份验证和授权。强烈建议用户名和密码与安全传输使用SSL证书验证客户端，因此不需要用户名和密码</p> </li> <li> <p>Will Message：遗嘱，当客户端断开连接时，此消息通知其他客户端</p> </li> <li> <p>KeepAlive：客户端指定并在连接建立时与代理通信。这个间隔定义了代理和客户端在不发送消息的情况下可以忍受的最长时间</p> </li> <li> <p>LWT字段：包含lastWillTopic、lastWillMessage、lastWillRetain、lastWillQos</p> <p>这个字段可以帮助了解客户端是正常断开连接（使用 MQTT<em>断开连接</em>消息）还是不正常断开连接（没有断开连接消息），检测到客户端已不正常地断开连接。为了响应不正常的断开连接，代理将最后一个将消息发送到最后一个将消息主题的所有订阅客户端。如果客户端使用正确的断开连接消息正常断开连接，那么代理将丢弃存储的 LWT 消息</p> </li> </ul> <p>代理收到 CONNECT 消息时，返回连接确认标志</p> <h4 id="mqtt消息发布">MQTT消息发布</h4> <p><strong>每条消息都必须包含一个主题，代理可以使用该主题将消息转发给感兴趣的客户端</strong></p> <p><strong>Publish</strong>消息包含以下内容：</p> <ul> <li> <p>packetID：数据包标识符在消息在客户端和代理之间流动时唯一标识消息。数据包标识符仅与大于零的 QoS 级别相关</p> </li> <li> <p>topicName：主题名称，<strong>主题区分大小写</strong></p> <p>主题格式就像URL：deviceName/1638791867</p> <ol> <li><strong>+</strong>：表示任意匹配某一级主题，例如<code>deviceName/+/weaved</code>可以匹配<code>deviceName/1638791867/weaved</code>，但是无法匹配<code>deviceName/1638791867/weaving</code></li> <li><strong>#：</strong>表示匹配多级，例如<code>deviceName/#</code>可以匹配<code>deviceName/1638791867/weaved</code></li> <li><strong>$：</strong>是为 MQTT 代理的内部统计信息保留的，客户端无法向这些主题发布消息</li> </ol> </li> <li> <p>QOS：服务级别质量，有3 个 QoS 级别</p> <ol> <li> <p>最多一次 （0）</p> <p>只会传输一次，不能保证对方一定会收到</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1cdb3dc0e91aef56cd5af5877b6efb6e.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> </li> <li> <p>至少一次 （1）<strong>常用</strong></p> <p>至少保证对方能够收到一次消息，获得接收方发来的 PUBACK数据包，如果发送方在合理的时间内未收到 PUBACK 数据包，则发送方将重新发送 PUBLISH 数据包</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9be23c3e2418a3d20e342f80e5984d5e.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> </li> <li> <p>正好一次 （2）</p> <p>QoS 2 是最安全、最慢的服务质量级别，由发送方和接收方之间的至少两个请求/响应流（四部分握手）提供。</p> <p>（1）、当接收方从发送方获取 QoS 2 PUBLISH 数据包时，它会相应地处理发布消息，并使用确认 PUBLISH 数据包的PUBREC 数据包回复发送方。如果发送方未从接收方获取 PUBREC 数据包，它将再次发送带有重复 （DUP） 标志的 PUBLISH 数据包，直到收到确认。</p> <p>（2）、接收方收到<code>PUBREC</code> 数据包，发送方就可以安全地丢弃初始<code>PUBLISH</code> 数据包。</p> <p>（3）、发送方存储来自接收方的<code>PUBREC</code> 数据包，并使用<code>PUBREL</code>数据包进行响应</p> <p>（4）、接收方获得<code>PUBREL</code> 数据包后，它可以丢弃所有存储的状态并使用<code>PUBCOMP</code>数据包进行应答</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9ac0e5dabc33f2bea7a2f27bffd64b73.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> </li> </ol> <p>如果数据包在此过程中丢失，发件人负责在合理的时间内重新传输消息</p> </li> <li> <p>retainFlag：消息是否由代理保存为指定主题的最后一个已知正确值。当新客户端订阅某个主题时，它们会收到保留在该主题上的最后一条消息</p> <p><strong>保留的消息可帮助新订阅的客户端在订阅主题后立即获取状态更新，而不需要等到客户端下一次推送消息。保留的消息消除了等待发布客户端发送下一个更新的时间</strong></p> </li> <li> <p>payload：消息的实际内容包含图像，任何编码的文本，加密数据以及二进制的数据</p> </li> <li> <p>dupFlag：标志指示邮件是重复的，这个重复发送跟QoS大于0的时候有关</p> </li> </ul> <p>客户端将消息发送到 MQTT代理进行发布时，<strong>代理将读取消息，确认消息（根据 QoS 级别），并处理消息</strong>。代理的处理包括确定哪些客户端订阅了主题并向它们发送消息</p> <h4 id="mqtt订阅机制">MQTT订阅机制</h4> <p>MQTT客户端发送了消息。如果没人接收消息将毫无意义，所以也会有客户端来订阅消息，客户端会向 MQTT 代理发送一条 SUBSCRIBE消息</p> <p><strong>Subscribe</strong>消息包含以下内容：</p> <ul> <li> <p>packetID：数据包标识符在消息在客户端和代理之间流动时唯一标识消息。数据包标识符仅与大于零的 QoS 级别相关</p> </li> <li> <p>订阅列表：一个 SUBSCRIBE 消息可以包含一个客户端的多个订阅，每个订阅都由一个主题和一个 QoS 级别组成</p> </li> </ul> <h4 id="mqtt订阅确认">MQTT订阅确认</h4> <p>为了确认每个订阅，代理向客户端发送 SUBACK确认消息</p> <p><strong>SUBACK</strong>消息包含以下内容：</p> <ul> <li>packetID：数据包标识符在消息在客户端和代理之间流动时唯一标识消息</li> <li>rerurnCode：每订阅一个主题发送一个返回代码</li> </ul> <table> <thead> <tr> <th>返回代码</th> <th>返回代码响应</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>成功 - 最大 QoS 0</td> </tr> <tr> <td>1</td> <td>成功 - 最大 QoS 1</td> </tr> <tr> <td>2</td> <td>成功 - 最大 QoS 2</td> </tr> <tr> <td>128</td> <td>失败</td> </tr> </tbody> </table> <p>客户端成功发送 SUBSCRIBE 消息并接收 SUBACK 消息后，它将获取与 SUBSCRIBE 消息包含的订阅中的主题匹配的每个已发布消息</p> <h4 id="mqtt取消订阅">MQTT取消订阅</h4> <p>消息可以订阅那么也可以取消订阅，会删除代理上客户端的现有预订</p> <p><strong>Unsubscribe</strong>消息包含以下内容：</p> <ul> <li>packetID：数据包标识符在消息在客户端和代理之间流动时唯一标识消息</li> <li>List of Topic（主题列表）：主题列表可以包含多个客户要取消订阅的主题。只需发送主题</li> </ul> <h4 id="mqtt确认取消订阅">MQTT确认取消订阅</h4> <p>要确认取消订阅，代理会向客户端发送 Unsuback确认消息</p> <p><strong>Unsuback</strong>消息包含以下内容：</p> <ul> <li>packetID：数据包标识符在消息在客户端和代理之间流动时唯一标识消息，这与取消订阅消息中的数据包标识符相同</li> </ul> <h2 id="三mqtt基本功能">三、MQTT基本功能</h2> <h4 id="持久会话">持久会话</h4> <p>客户端需要连接到代理并且订阅主题，但是客户端和代理之间如果连接在非持久会话中中断，那么主题会丢失，需要在重新连接时再次订阅。为了避免这个问题可以使用持久会话功能，它主要是在代理中存储了：</p> <ul> <li>客户端的会话以及订阅</li> <li>QOS为1和2中没有确认的消息</li> <li>客户端在断联时候错过的消息</li> <li>客户端接收到的所有尚未完全确认的 QoS 2 消息</li> </ul> <p>为了开启代理上的持久会话，在MQTT客户端连接到代理服务器的时候有个<code>cleanSession</code>字段设置为false表示开启持久会话，所有信息和消息都将保留，<strong>代理存储会话，直到客户端重新联机并收到消息</strong>，如果长时间不联机，那么会消耗内存</p> <p>客户端上的持久会话，当客户端请求服务器保存会话数据时，客户端负责存储以下信息：</p> <ul> <li>QoS 1 或 2 流中尚未由代理确认的所有消息</li> <li>从代理接收到的所有尚未完全确认的 QoS 2 消息</li> </ul> <h2 id="四mqtt-demo">四、MQTT Demo</h2> <h4 id="搭建mqtt服务器">搭建MQTT服务器</h4> <p>官方文档：产品概览 | EMQX 文档</p> <p><em>EMQX</em> (Erlang/Enterprise/Elastic MQTT Broker) 是基于 Erlang/OTP 平台开发的开源物联网 MQTT 消息服务器。</p> <p>Erlang/OTP是出色的软实时 (Soft-Realtime)、低延时 (Low-Latency)、分布式 (Distributed)的语言平台。</p> <p>MQTT 是轻量的 (Lightweight)、发布订阅模式 (PubSub) 的物联网消息协议。</p> <p>EMQX 设计目标是实现高可靠，并支持承载海量物联网终端的 MQTT 连接，支持在海量物联网设备间低延时消息路由:</p> <ol> <li>稳定承载大规模的 MQTT 客户端连接，单服务器节点支持 200 万连接。</li> <li>分布式节点集群，快速低延时的消息路由。</li> <li>消息服务器内扩展，支持定制多种认证方式、高效存储消息到后端数据库。</li> <li>完整物联网协议支持，MQTT、MQTT-SN、CoAP、LwM2M、WebSocket 或私有协议支持</li> </ol> <p><strong>使用Docker安装EMQX</strong></p> <p>1、获取Docker镜像</p> <pre><code class="language-shell">docker pull emqx/emqx:4.4.3</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/29e6224c7d2dc3a8c71d27231ef405b6.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> <p>2、启动Docker</p> <pre><code>docker run -d --name emqx -p 1883:1883 -p 8081:8081 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 emqx/emqx:4.4.3</code></pre> <p>3、访问Web管理控制台</p> <p>控制台地址:http://XXXXXX:18083，默认用户: admin，密码：public</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/00e0cd75dd389534ded0c3c3143cdc3b.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> <blockquote> <p>各个服务端口说明：<br /> 1883：MQTT 协议端口<br /> 8883：MQTT/SSL 端口<br /> 8083：MQTT/WebSocket 端口<br /> 8080：HTTPAPI 端口<br /> 18083：Dashboard 管理控制台端口</p> </blockquote> <h4 id="搭建mqtt消息推送客户端">搭建MQTT消息推送客户端</h4> <p>引入相关依赖包</p> <pre><code class="language-xml">  <dependencies>         <dependency>             <groupId>org.eclipse.paho</groupId>             <artifactId>org.eclipse.paho.client.mqttv3</artifactId>             <version>1.2.5</version>         </dependency>         <dependency>             <groupId>org.projectlombok</groupId>             <artifactId>lombok</artifactId>             <version>1.18.22</version>             <optional>true</optional>         </dependency>     </dependencies></code></pre> <p><strong>MQTT客户端</strong></p> <pre><code class="language-java">import lombok.extern.slf4j.Slf4j; import lombok.val; import org.eclipse.paho.client.mqttv3.*; import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence; import org.springframework.stereotype.Component;  /**  * 消息推送客户端  *  * @author yanglingcong  */ @Slf4j @Component public class MyMqttClient {      private final static int QOS_1 = 1;      private final static String USER_NAME = "ylc";      private final static int PASSWORLD = 123456;      private final static int KEEP_ALIVE = 60;      /**      * 连接地址      * */     public static final String HOST = "tcp://XXXXX:1883";      /**     * 订阅主题     * */     public static final String TOPIC = "deviceName/";      //客户端唯一ID     private static final String clientid = "pubClient";       public static void main(String[] args) {         MqttClient mqtt = createMqtt();         publishMessage("Hello", TOPIC, mqtt);     }      public static MqttClient createMqtt() {         MqttClient client = null;          MqttConnectOptions connectOptions = new MqttConnectOptions();         //断开之后自动重联         connectOptions.setAutomaticReconnect(true);         //设置会话心跳时间 代理和客户端在不发送消息的情况下可以忍受的最长时间         connectOptions.setKeepAliveInterval(KEEP_ALIVE);         //不建立持久会话         connectOptions.setCleanSession(true);         //用户名         connectOptions.setUserName(USER_NAME);         //密码         connectOptions.setPassword(String.valueOf(PASSWORLD).toCharArray());         try {             client = new MqttClient(HOST, clientid, new MemoryPersistence());             //MQTT连接             client.connect(connectOptions);             //消息回调             client.setCallback(new MqttCallBackHandle(client));         } catch (MqttException e) {             log.warn("MQTT消息异常{}", e);          }         return client;      }      /**      * 消息推送      *      * @param message 消息内容      * @param topic   发送的主题      * @author yanglingcong      * @date 2022/4/18 21:25      */     public static void publishMessage(String message, String topic, MqttClient mqttClient) {         MqttMessage mqttMessage = new MqttMessage();         mqttMessage.setQos(QOS_1);         //保留在该主题上的最后一条消息         //mqttMessage.setRetained(true);         mqttMessage.setPayload(message.getBytes());         try {             mqttClient.publish(topic, mqttMessage);             log.info("MQTT消息发送成功:{}", message);         } catch (MqttException e) {             log.warn("MQTT消息推送失败");             e.printStackTrace();         }     }  }</code></pre> <p><strong>MQTT回调接口</strong></p> <pre><code class="language-Java">import lombok.extern.slf4j.Slf4j; import org.eclipse.paho.client.mqttv3.*; import org.eclipse.paho.client.mqttv3.MqttClient;  /**  * MQTT消息回调方法  */ @Slf4j public class MqttCallBackHandle implements MqttCallbackExtended {       private MqttClient client;      public  MqttCallBackHandle(MqttClient client){         this.client=client;     }      //订阅主题     private final static String CMD_TOP_FORMAT = "deviceName/";      /**      * 连接成功后调用该方法      * @param reconnect      * @param serverURI      */     @Override     public void connectComplete(boolean reconnect, String serverURI) {         try {             //重新订阅主题             client.subscribe(CMD_TOP_FORMAT);             log.info("=====MQTT重联成功=====");         } catch (MqttException e) {             e.printStackTrace();         }     }      /**       * 断开连接后回调方法      * @param throwable      */     @Override     public void connectionLost(Throwable throwable) {         log.info("=====MQTT连接断开=====");     }      /**      * 接收订阅到的消息      * @param topic      * @param message      * @throws Exception      */     @Override     public void messageArrived(String topic, MqttMessage message) throws Exception {         log.info("=====MQTT消息订阅成功=====");         log.info("主题：{}，内容：{}",topic,message);     }      /**      * 发送完成      * @param iMqttDeliveryToken      */     @Override     public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken) {         log.info("=====MQTT消息发送完毕=====");     } }</code></pre> <h4 id="搭建mqtt消息订阅客户端">搭建MQTT消息订阅客户端</h4> <pre><code class="language-java">import lombok.extern.slf4j.Slf4j; import org.eclipse.paho.client.mqttv3.MqttClient; import org.eclipse.paho.client.mqttv3.MqttConnectOptions; import org.eclipse.paho.client.mqttv3.MqttException; import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence; import org.springframework.stereotype.Component;  /**  * 消息订阅客户端  *  * @author yanglingcong*/ @Component @Slf4j public class MyMqttSubClient {      private final static int QOS_1 = 1;      private final static String USER_NAME = "ylc";      private final static int PASSWORLD = 123456;      private final static int KEEP_ALIVE = 60;      //连接地址     public static final String HOST = "tcp://xxxx:1883";      // 订阅主题     public static final String TOPIC = "deviceName/";      //客户端唯一ID     private static final String clientid = "subClient";       public static void main(String[] args) {         subscribe();     }      public MyMqttSubClient() throws MqttException {         //订阅         subscribe();     }      public  static void subscribe()  {         MqttClient client=null;          MqttConnectOptions connectOptions=new MqttConnectOptions();         //断开之后自动重联         connectOptions.setAutomaticReconnect(true);         //设置会话心跳时间 代理和客户端在不发送消息的情况下可以忍受的最长时间         connectOptions.setKeepAliveInterval(KEEP_ALIVE);         //不建立持久会话         connectOptions.setCleanSession(true);         //用户名         connectOptions.setUserName(USER_NAME);         //密码         connectOptions.setPassword(String.valueOf(PASSWORLD).toCharArray());          try {             client=new MqttClient(HOST,clientid, new MemoryPersistence());             //MQTT连接             client.connect(connectOptions);          } catch (MqttException e) {             e.printStackTrace();         }         //消息回调         client.setCallback(new MqttCallBackHandle(client));           try {             client.subscribe(TOPIC,QOS_1);         } catch (MqttException e) {             log.warn("MQTT消息订阅异常{}",e);             e.printStackTrace();         }     } }</code></pre> <h4 id="环境测试">环境测试</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/27d3b946eface1efff28382c6ed44595.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> <p>1、MQTT客户端<code>pubClient</code>向服务器推送消息</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/0c70cf7c9ab29497247094013e9e3e79.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> <p>2、MQTT客户端<code>subClient</code>从服务器订阅消息</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/dc6b359d2e6b8581b1a340510590b812.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> <p>3、踢除客户端，会自动重联，因为设置了MQTT断开自动重联</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/27184a9dc0bc0241adb62ca5b01b17ed.jpg" alt="MQTT物联网通讯协议入门及Demo实现"></p> <h2 id="五mqtt常见问题">五、MQTT常见问题</h2> <h4 id="mqtt消息持久化">MQTT消息持久化</h4> <p>如果 cleanSession 设为true，一旦掉线客户端不会存储任何内容，并清除以前任何持久会话中的所有信息</p> <p>如果 cleanSession 设为false，重连后可以接收之前订阅主题的消息，还有离线时期未接收的消息</p> <h4 id="mqtt订阅恢复机制">MQTT订阅恢复机制</h4> <p>MQTT掉线设置自动重联之后，无法再进行订阅。MqttCallbackExtended接口有一个connectComplete方法用于重新订阅主题</p> <h4 id="mqtt和消息队列的区别">MQTT和消息队列的区别</h4> <ul> <li> <p>消息队列可以存储消息，直到被消费为止</p> </li> <li> <p>消息队列只能被消费处理一次，不像MQTT订阅的人都可以收到消息</p> </li> <li> <p>消息队列需要先创建队列，MQTT可以使用时候创建</p> </li> <li> <p>MQTT是一种通信协议，MQ是消息通道</p> </li> <li> <p>MQTT面向海量设备连接、MQ是面向海量数据</p> </li> </ul> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-4100.htm">解决Vue Cli安装Element-plus后启动失败的问题</a></p>
                                                <p>下一个：<a href="/html/category/article-4128.htm">详解Mysql事务隔离级别与锁机制</a></p>
                                            </div>

                                        <div class="panel panel-default mt-5">
                        <div class="panel-heading">
                            <h3 class="m-0">推荐文章</h3>
                        </div>
                        <div class="panel-body">
                            <ul class="p-0 x-0">
                                                                <li class="py-2"><a href="/html/category/article-3126.htm">pytorch cuda上tensor的定义  以及 减少cpu操作的方法</a></li>
                                                                <li class="py-2"><a href="/html/category/article-1957.htm">Element修改弹窗类组件的层级</a></li>
                                                                <li class="py-2"><a href="/html/category/article-770.htm">win11系统怎么更改屏幕刷新率</a></li>
                                                                <li class="py-2"><a href="/html/category/article-727.htm">用Python读hdfs集群parquet格式文件</a></li>
                                                                <li class="py-2"><a href="/html/category/article-725.htm">深入理解Kafka核心设计及原理（二）：生产者</a></li>
                                                                <li class="py-2"><a href="/html/category/article-681.htm">docker之SonarQube安装</a></li>
                                                                <li class="py-2"><a href="/html/category/article-674.htm">vue项目中安装sass方法</a></li>
                                                                <li class="py-2"><a href="/html/category/article-617.htm">springboot开启异步注解功能</a></li>
                                                                <li class="py-2"><a href="/html/category/article-605.htm">数据库的四大特性以及不同隔离级别</a></li>
                                                                <li class="py-2"><a href="/html/category/article-550.htm">iSCSI服务器CHAP双向认证配置</a></li>
                                                            </ul>
                        </div>
                    </div>
                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4590.htm" title="宠物免费问诊（宠物免费问诊线上平台）">宠物免费问诊（宠物免费问诊线上平台）</a></li>
                        <li class="py-2"><a href="/html/category/article-7217.htm" title="蒜苔炒肉的做法川菜(川菜蒜薹肉丝的做法)">蒜苔炒肉的做法川菜(川菜蒜薹肉丝的做法)</a></li>
                        <li class="py-2"><a href="/html/category/article-7124.htm" title="侠骨丹心电视剧（侠骨丹心电视剧全集免费观看）">侠骨丹心电视剧（侠骨丹心电视剧全集免费观看）</a></li>
                        <li class="py-2"><a href="/html/category/article-6940.htm" title="为什么常熟羊毛羊绒大衣这两年发展得这么好呢(常熟的羊绒大衣批发在哪里)">为什么常熟羊毛羊绒大衣这两年发展得这么好呢(常熟的羊绒大衣批发在哪里)</a></li>
                        <li class="py-2"><a href="/html/category/article-6848.htm" title="动物疫苗的使用方法视频（动物疫苗的使用方法及注意事项）">动物疫苗的使用方法视频（动物疫苗的使用方法及注意事项）</a></li>
                        <li class="py-2"><a href="/html/category/article-7355.htm" title="北京宠爱国际动物医疗机构怎么样啊（北京宠爱国际动物医疗机构怎么样啊知乎）">北京宠爱国际动物医疗机构怎么样啊（北京宠爱国际动物医疗机构怎么样啊知乎）</a></li>
                        <li class="py-2"><a href="/html/category/article-6895.htm" title="动物诊疗许可申请表在哪里拿（动物诊疗许可申请表在哪里拿到）">动物诊疗许可申请表在哪里拿（动物诊疗许可申请表在哪里拿到）</a></li>
                        <li class="py-2"><a href="/html/category/article-7078.htm" title="动物疫苗排行榜 动物疫苗排行榜前十名">动物疫苗排行榜 动物疫苗排行榜前十名</a></li>
                        <li class="py-2"><a href="/html/category/article-7171.htm" title="兰州宠物用品批发地点在哪里呀（兰州宠物用品批发市场在哪里）">兰州宠物用品批发地点在哪里呀（兰州宠物用品批发市场在哪里）</a></li>
                        <li class="py-2"><a href="/html/category/article-6986.htm" title="什么牌子的蟑螂药最管用(什么牌子的蟑螂药最管用最好)">什么牌子的蟑螂药最管用(什么牌子的蟑螂药最管用最好)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>