<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-634.htm" />
    <title>Java 线程安全与锁 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>Java 线程安全与锁</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<h1 id="java-线程安全-与-锁">Java 线程安全 与 锁</h1> <h2 id="多线程内存模型">多线程内存模型</h2> <ul> <li>线程私有栈内存 <ul> <li>每个线程 私有的内存区域</li> </ul> </li> <li>进程公有堆内存 <ul> <li>同一个进程 共有的内存区域</li> </ul> </li> </ul> <h2 id="为什么会有线程安全问题">为什么会有线程安全问题？</h2> <ul> <li>多个线程同时具有对同一资源的操作权限，又发生了同时对该资源进行读取、写入的情况，那么就会出现重复操作的情况</li> </ul> <h2 id="如何解决线程安全问题呢-加锁">如何解决线程安全问题呢？ 加锁</h2> <h3 id="什么是锁">什么是锁？</h3> <p>锁就是对于操作资源的一种权限</p> <h3 id="锁可以做什么">锁可以做什么？</h3> <p>对于一个资源加锁后，每次只能有一个线程对该资源进行操作，当该线程操作结束后，才会解锁。<br /> 解锁之后，所有的线程获得竞争此资源的机会。</p> <h3 id="什么情况下需要加锁">什么情况下需要加锁?</h3> <ul> <li>读读 不需要加锁</li> <li>写写 需要加锁</li> <li>读写 需要加锁</li> </ul> <h2 id="加锁的两种方式synchronized关键字与lock对象">加锁的两种方式（synchronized关键字与Lock对象）</h2> <h3 id="第一种synchronized关键字">第一种：synchronized关键字</h3> <ul> <li> <p>方法前加synchronized关键字</p> <ul> <li>功能：线程进入用synchronized声明的方法时就上锁，方法执行完自动解锁，锁的是当前类的对象</li> <li>调用synchronized声明的方法一定是排队运行的</li> <li>当A线程 调用object对象的synchronized声明的X方法时 <ul> <li>B线程可以调用其他非synchronized声明的方法</li> <li>B线程不能调用其他synchronized声明的非X方法</li> </ul> </li> </ul> </li> <li> <p>synchronized锁重入</p> <ul> <li>锁重入的概念：自己可以重复获得自己的内部锁。即synchronized声明的方法，可以调用本对象的其他synchronized方法。</li> <li>锁重入支持继承的环境，即子类的synchronized方法也可以调用父类的synchronized方法。</li> </ul> </li> <li> <p>synchronized同步代码块</p> <ul> <li> <p>synchronized关键字与synchronized代码块的区别</p> <ul> <li>synchronized声明的方法是将当前对象作为锁</li> <li>synchronized代码块是将任意对象作为锁</li> </ul> </li> <li> <p>当两个线程访问同一个对象的synchronized代码块时，只有一个线程可以得到执行，另一个线程只能等待当前线程执行完才能执行。</p> <ul> <li>一半同步，一半异步 <ul> <li>不在synchronized代码块中就是异步执行，在synchronized代码块中就是同步执行</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>下面对“一半同步，一半异步”进行代码验证</p> <ul> <li>创建项目ltl0002 ,文件Task的代码如下：</li> </ul> <pre><code class="language-java">package ltl0002;  public class Task {      public void doTask(){         for (int i = 0; i &lt; 100; i++) {             System.out.println("no synchronized ThreadName = " + Thread.currentThread().getName() + " i = " + (i+1));         }         synchronized (this){             for (int i = 0; i &lt; 100; i++) {                 System.out.println("synchronized ThreadName = " + Thread.currentThread().getName() + " i = " + (i+1));             }         }              } }</code></pre> <ul> <li>两个线程类代码</li> </ul> <pre><code class="language-java">package ltl0002;  public class MyThread1 implements Runnable{      private Task task = new Task();      public MyThread1(Task task){         this.task = task;     }      @Override     public void run() {          task.doTask();     } }</code></pre> <pre><code class="language-java">package ltl0002;  public class MyThread2 implements Runnable{      private Task task = new Task();      public MyThread2(Task task){         this.task = task;     }      @Override     public void run() {          task.doTask();     } }</code></pre> <p>文件Run.java代码如下：</p> <pre><code class="language-java">package ltl0002;  public class Run {     public static void main(String[] args) {         Task task = new Task();         MyThread1 myThread1 = new MyThread1(task);         MyThread2 myThread2 = new MyThread2(task);         Thread tr1 = new Thread(myThread1);         Thread tr2 = new Thread(myThread2);         tr1.start();         tr2.start();     }  }</code></pre> <p>程序运行结果如图所示<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/522938c98702bd636c2592ad73bcbcb8.jpg" alt="Java 线程安全与锁"></p> <p>进入synchronized代码块之后，排队运行，运行结果如图所示<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/208c17e179f28acc676e15fad1c7d849.jpg" alt="Java 线程安全与锁"></p> <p>在第一张图我们可以看到，线程0 和 1交叉输出，说明是异步进行，而在第二张图可以看出线程0运行完之后，线程1才运行，说明它们是同步运行，验证完毕。</p> <ul> <li>现有三个线程，线程一对num进行修改，线程二三对num进行读取，如何可以实现，线程一与线程二三同步执行，而线程二三异步执行呢？<br /> 现在创建项目ltl0003进行测试，Number文件代码如下</li> </ul> <pre><code class="language-java">package ltl0003; /**  * @author liTianLu  * @Date 2022/4/23 15:53  * @purpose 成员变量有int num,以及get set方法  */ public class Number {   private int num;   private boolean change = false;    public int getNum() {     return num;   }    public void setNum(int num) {     this.num = num;   }   public boolean isChangeing(){     return change;   }    public void setChange(boolean change) {     this.change = change;   } }</code></pre> <p>两个线程类的代码如下：</p> <pre><code class="language-java">package ltl0003; /**  * @author liTianLu  * @Date 2022/4/23 15:36  * @purpose 更改num的值  */ public class MyThread01 implements Runnable{   static int num = 0;   Number number;   public MyThread01(Number num ){     this.number = num ;   }   @Override   public void run() {     synchronized (this){       number.setChange(true);       for (int i = 0; i &lt; 10000; i++) {         number.setNum(num++);       }       number.setChange(false);     }   } }</code></pre> <pre><code class="language-java">package ltl0003;  import static java.lang.Thread.sleep; /**  * @author liTianLu  * @Date 2022/4/23 15:35  * @purpose 读取num的值  */ public class MyThread02 implements Runnable{   Number number;    public MyThread02(Number num ){     this.number = num ;   }    @Override   public void run() {     for (int i = 0; i &lt; 1000 ; i++) {       //如果number正在更改,就休眠1ms       while(number.isChangeing()){         try {           sleep(1);         } catch (InterruptedException e) {           e.printStackTrace();         }       }       System.out.println(Thread.currentThread().getName()+"的输出为： num = " + number.getNum());     }   }  }</code></pre> <p>主函数文件Run代码如下：</p> <pre><code class="language-java">package ltl0003; /**  * @author liTianLu  * @Date 2022/4/23 15:15  * @purpose 解决锁问题 线程一对num进行修改，线程二三对num进行读取，此代码要实现：线程一与线程二三同步执行，而线程二三异步执行。  */ public class Run {   public static void main(String[] args) {     Number number = new Number();     number.setNum(0);     MyThread01 myThread01 = new MyThread01(number);     MyThread02 myThread02 = new MyThread02(number);     Thread tr1 = new Thread(myThread01);     Thread tr2 = new Thread(myThread02);     Thread tr3 = new Thread(myThread02);     tr1.start();     tr2.start();     tr3.start();   } }</code></pre> <p>实验结果如图所示</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/56d4b608cb936a6b26d752e1259ec2ac.jpg" alt="Java 线程安全与锁"></p> <p>我们发现，线程2/3执行的时候，线程1已经执行完毕，且线程2、3异步进行。</p> <h3 id="第二种lock对象的使用">第二种：Lock对象的使用</h3> <ul> <li>ReentrantLock类可以达到与synchronized同样的效果。</li> <li>用法：</li> </ul> <pre><code class="language-java">ReentrantLock lock = new ReentrantLock ();  lock.lock();//加锁 lock.unlock();//解锁          //使用try catch finally 可以确保finally 中的代码执行，在finally中解锁 try{     while(true){         lock.lock ();         //操作代码     } }catch (Exception e) {     e.printStackTrace(); }finally {     lock.unlock (); }</code></pre> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-633.htm">SpringBoot 使用 Feign进行远程调用、文件上传等操作</a></p>
                                                <p>下一个：<a href="/html/category/article-635.htm">python-数据类型的转换_变量的缓存机制</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7078.htm" title="动物疫苗排行榜 动物疫苗排行榜前十名">动物疫苗排行榜 动物疫苗排行榜前十名</a></li>
                        <li class="py-2"><a href="/html/category/article-7493.htm" title="刀切馒头的做法大全(刀切馒头的做法教程)">刀切馒头的做法大全(刀切馒头的做法教程)</a></li>
                        <li class="py-2"><a href="/html/category/article-6108.htm" title="动物疫苗管理法律法规（动物疫苗的管理方法）">动物疫苗管理法律法规（动物疫苗的管理方法）</a></li>
                        <li class="py-2"><a href="/html/category/article-6197.htm" title="圣诞系列歌曲(圣诞节著名歌曲)">圣诞系列歌曲(圣诞节著名歌曲)</a></li>
                        <li class="py-2"><a href="/html/category/article-5573.htm" title="领养宠物机构（宠物领养中心要钱吗）">领养宠物机构（宠物领养中心要钱吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6940.htm" title="为什么常熟羊毛羊绒大衣这两年发展得这么好呢(常熟的羊绒大衣批发在哪里)">为什么常熟羊毛羊绒大衣这两年发展得这么好呢(常熟的羊绒大衣批发在哪里)</a></li>
                        <li class="py-2"><a href="/html/category/article-5933.htm" title="动物打完疫苗可以洗澡吗有影响吗知乎（动物打疫苗后多久能杀了吃）">动物打完疫苗可以洗澡吗有影响吗知乎（动物打疫苗后多久能杀了吃）</a></li>
                        <li class="py-2"><a href="/html/category/article-6803.htm" title="2021年开宠物店赚钱吗（开宠物店收益怎么样）">2021年开宠物店赚钱吗（开宠物店收益怎么样）</a></li>
                        <li class="py-2"><a href="/html/category/article-7308.htm" title="动物疫苗注射的作用是什么呢（动物 疫苗）">动物疫苗注射的作用是什么呢（动物 疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4589.htm" title="上海宠物医院有多少家（上海宠物医院数量）">上海宠物医院有多少家（上海宠物医院数量）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>