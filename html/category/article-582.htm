<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-582.htm" />
    <title>源码中的设计模式&#8211;单例模式 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>源码中的设计模式&#8211;单例模式</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<h1>一、模式入场</h1> <p>单例模式在众多的设计模式中应该是最简单的一个，但是要掌握的点也不少。先看下《head first 设计模式》中给出的释义，</p> <blockquote> <p><strong><span style="font-size: 18px">单件模式</span></strong>确保一个类只有一个实例，并提供一个全局访问点。</p> </blockquote> <p>&nbsp;下面对这个释义进行逐字解释。单件可以称之为单例其实是一个意思。这个释义给出了单例模式中重要的两点，</p> <ol> <li>一个类只有一个实例；</li> <li>提供一个全局的访问点；</li> </ol> <p>先说第一条，一个类只有一个实例，在一个系统中会有很多类，如下面的订单类Order</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Order {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String orderId;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> BigDecimal orderAmount;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String orderPerson; }</span></pre> </div> <p>那么现在就有一个问题，如何保证一个类只有一个实例，最先想到的是强制要求这个系统中的所有开发人员，在开发的时候只能实例一次，一个人实例化了，另一个人就不能实例化，这是一个办法，但是却不可行，因为我要实例化这个类的时候总不能先问下其他人，你们实例化过没有，只有其他人没有实例化的前提下你才可以实例化，而且你还要告知其他人以后谁都不能再实例化Order了，这样是不是太傻了，并且效率也太低了，纯靠人为约定肯定是行不通了。有没有其他的方法呐，答案是有的。</p> <p>大家都知道，通常情况下实例化一个类，最简单的方式就是new一个，谁说我没有女朋友，new一个啊。现在我们也new一个Order，但是我们发现任何一个人都可以new，这怎么能保证只有一个实例，那么我把它的构造方法设为私有的，这样你们都不能new了吧，能new的只有一个拉，也就是在Order的内部可以new，这就可以保证一个类只有一个实例了，因为只有在类的内部才可以调用其私有的构造方法，其他地方想调用“对不起，您没有访问权限”。</p> <p>好了上面通过把类的构造方法设为私有的，保证了一个类只有一个实例，那么如何才能访问到这个实例呐，假设现在的代码是这样的，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Order {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String orderId;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> BigDecimal orderAmount;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String orderPerson;</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 私有的构造方法</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Order(){              }</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 通过私有构造方法生成的唯一实例</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">     Order order</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Order(); }</span></pre> </div> <p>我们现在就要访问到通过私有构造方法生成的实例order，怎么才能访问到呐？提供一个静态方法，静态方法是类级别的，不依赖于实例，可以通过类名.静态方法名的方式访问，如下</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Order {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String orderId;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> BigDecimal orderAmount;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String orderPerson;</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 私有的构造方法</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Order(){      }</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 通过私有构造方法生成的唯一实例</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span> Order order=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Order();</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 全局访问点，静态方法      *</span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> Order getInstance(){</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> order;     } }</span></pre> </div> <p>通过提供一个静态方法，由静态方法返回该唯一实例，由于静态方法中要引用order实例，所以该实例也必须是静态的，静态方法是公共的，那么order也应设为私有的，这样就提供了一个全局的访问点，任何地方想使用这个唯一实例调用该静态方法即可。</p> <p>&nbsp;好了，到目前为止你已经掌握了一些单例模式的方法。</p> <h1>二、深入单例模式</h1> <p>一般情况下，单例模式分为懒汉和饿汉两种模式，这两种模式很容易记混，我这里有一个好的记忆方式，下面会提到。</p> <p>上面的演示中其实就是饿汉模式，下面看懒汉模式，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Singleton {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> Singleton singleton;</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 全局访问点，提供singleton实例的唯一访问      *</span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> Singleton getInstance(){</span><span style="color: rgba(0, 0, 255, 1)">if</span>(singleton==<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">){             singleton</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Singleton();         }</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> singleton;     }</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 唯一的私有构造函数，提供唯一的实例</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Singleton(){              }      }</span></pre> </div> <p>上面便是懒汉模式。</p> <p>对比饿汉模式和懒汉模式，可以发现其区别在于<strong>什么时机调用私有的构造方法生成实例</strong>，区分方式是，<strong>懒汉模式只有在调用全局访问点的时候才会生成实例，而饿汉模式则在类加载的时候便会生成实例</strong>，所以根据生成实例的时机去区分饿汉和懒汉就容易的多了。</p> <p>这里想留几个思考问题，</p> <ol> <li>上面的懒汉模式有问题吗？</li> <li>生成实例的方式除了new还有其他方式吗？</li> </ol> <h1>三、追寻源码</h1> <p>&nbsp;在这个模块中想通过源码来学习下单例模式，让大家看看优秀的人是怎么使用单例模式的。</p> <h2>1、ErrorContext</h2> <p>在经常使用的mybatis的源码中有ErrorContext这样的一个类，下面贴出ErrorContext中的部分代码</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> org.apache.ibatis.executor;</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">  *</span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> Clinton Begin</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> ErrorContext {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">final</span> String LINE_SEPARATOR = System.getProperty("line.separator","\n"<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">final</span> ThreadLocal&lt;ErrorContext&gt; LOCAL =<span style="color: rgba(0, 0, 255, 1)">new</span> ThreadLocal&lt;&gt;<span style="color: rgba(0, 0, 0, 1)">();</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> ErrorContext stored;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String resource;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String activity;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String object;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String message;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String sql;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Throwable cause;<br/>  //私有构造方法</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> ErrorContext() {   }   //全局访问点</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> ErrorContext instance() {     ErrorContext context</span>=<span style="color: rgba(0, 0, 0, 1)"> LOCAL.get();</span><span style="color: rgba(0, 0, 255, 1)">if</span> (context ==<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {       context</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ErrorContext();       LOCAL.set(context);     }</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> context;   } }</span></pre> </div> <p>在上面的代码中，ErrorContext有私有的构造方法，同时具有instance()方法提供全局唯一访问点，而且从方法我们知道这应该是一个懒汉模式。</p> <p>再看下instance()方法，细心的小伙伴会说，这个不是全局唯一访问点，这是从Local变量中取的ErrorContext对象，而Local是ThreadLocal级别的，不是整个系统只有一份啊，这里我要说，大家不必局限于字眼，我们也可以把ThreadLocal看成是一个系统啊，它毕竟是属于线程级别的啊，要真正掌握的是单例的本质，可以仔细体会下。</p> <h2>2、LogFactory</h2> <p>同样是在mybatis的源码中有LogFactory类，局部代码如下，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> LogFactory {</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">    * Marker to be used by logging implementations that support markers</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">final</span> String MARKER = "MYBATIS"<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span> Constructor&lt;?<span style="color: rgba(0, 0, 255, 1)">extends</span> Log&gt;<span style="color: rgba(0, 0, 0, 1)"> logConstructor;</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> {     tryImplementation(LogFactory::useSlf4jLogging);     tryImplementation(LogFactory::useCommonsLogging);     tryImplementation(LogFactory::useLog4J2Logging);     tryImplementation(LogFactory::useLog4JLogging);     tryImplementation(LogFactory::useJdkLogging);     tryImplementation(LogFactory::useNoLogging);   } //私有构造方法</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> LogFactory() {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> disable construction</span><span style="color: rgba(0, 0, 0, 1)">  } }</span></pre> </div> <p>在该类中可以看到有私有方法，但是却没有提供全局的访问入口，您会说这也是单例模式吗，我说算，这个类符合单例的定义啊，具有私有构造方法肯定只有一个实例，但是却没有创建实例，这个类中其他的方法均是工具方法，为什么不提供全局访问入口，答案是用不到，用不到所以就不提供了啊。</p> <h2>3、单例bean</h2> <p>现在开发中用的最多的就是springboot，springboot的基础是spring，把类交给spring管理使用@Autowired就搞定了，您是不是也知道spring中的bean默认都是单例的，没错spring中使用了单例模式，有同学就说了，在平时写的类中也没有提供私有的构造方法啊，是如何保证单例的呐，还记得上边的思考问题吗？除了使用new的方式还有其他的方式，spring使用的是反射的方式，具体代码先不贴了，太多了，一时半会分析不明白，那全局的访问方式呐，答案是beanFactory</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/bce6809a14e8971ed974a569370519f2.jpg" alt="源码中的设计模式--单例模式"></p> <p>在beanFactory中定义了很多getBean的方法，调用这些方法便会返回一个单例bean，那这些单例bean存储在什么地方那，答案在DefaultSingletonBeanRegistry中，该类中有一个singletonObjects属性，该属性中就存着所有spring管理的单例bean，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/47a198f2903f214c64230dfc02433dbc.jpg" alt="源码中的设计模式--单例模式"></p> <p>老铁们，看到了吧，这也是单例模式，但这个单例模式比平时自己写的单例模式高明多了，在生成唯一实例时使用的是反射，在提供全局的访问入口的时候，是从hashmap中返回的，比自己写个静态方法高明多了。</p> <p>有的小伙伴会问，一个类被spring管理也没提供私有方法，是不是可以自己new啊，是可以的，随便new多少个都行，但是只要被spring管理了默认就是单例的。</p> <p>好了，本次就说这么多，我们下次见！</p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-581.htm">Tensorflow中张量（Tensor）打印信息中shape字段的理解方式</a></p>
                                                <p>下一个：<a href="/html/category/article-583.htm">C#语法糖系列聊聊 ref，in 修饰符底层玩法</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1335.htm" title="Java实现MD5和国密SM3摘要算法">Java实现MD5和国密SM3摘要算法</a></li>
                        <li class="py-2"><a href="/html/category/article-1336.htm" title="SpringMVC拦截器path路径的坑">SpringMVC拦截器path路径的坑</a></li>
                        <li class="py-2"><a href="/html/category/article-769.htm" title="Vue实战篇：用树型组件实现一个文档目录结构">Vue实战篇：用树型组件实现一个文档目录结构</a></li>
                        <li class="py-2"><a href="/html/category/article-1929.htm" title="Android7.0特性及适配">Android7.0特性及适配</a></li>
                        <li class="py-2"><a href="/html/category/article-773.htm" title="C ++中的最大和圆子数组">C ++中的最大和圆子数组</a></li>
                        <li class="py-2"><a href="/html/category/article-776.htm" title="vue实现文字滚动效果_vue.js">vue实现文字滚动效果_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-3428.htm" title="Docker 解决Error response from daemon">Docker 解决Error response from daemon</a></li>
                        <li class="py-2"><a href="/html/category/article-3734.htm" title="面试官：@Transactional 注解是如何实现的？面试必问！">面试官：@Transactional 注解是如何实现的？面试必问！</a></li>
                        <li class="py-2"><a href="/html/category/article-1634.htm" title="SM2密码算法数据结构">SM2密码算法数据结构</a></li>
                        <li class="py-2"><a href="/html/category/article-784.htm" title="Pytorch Conv1d()">Pytorch Conv1d()</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>