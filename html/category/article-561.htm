<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-561.htm" />
    <title>vue中计算属性computed理解说明包括vue侦听器,缓存与computed的区别_vue.js - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/xcblog/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>vue中计算属性computed理解说明包括vue侦听器,缓存与computed的区别_vue.js</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<h2>一、计算属性(computed)</h2> <h3>1、vue computed 说明</h3> <blockquote> <p>当一些数据需要根据其它数据变化时,需要进行处理才能去展示,虽然vue提供了绑定数据表达式绑定的方式,但是设计它的初衷只是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护,对于一些比较复杂和特殊的计算有可能就捉襟见肘了,而且计算的属性写在模板里也不利于项目维护</p> </blockquote> <p><strong>computed主要的作用:</strong></p> <blockquote> <p>分离逻辑(模板和数据分离)</p> <p>缓存值</p> <p>双向绑定(getter,setter)</p> </blockquote> <h3>2、语法格式</h3> <p>格式</p> <div class="ay1code"> <pre class="brush:js;">computed:{ [key: string]: Function | { get: Function, set: Function } }  </pre> </div> <p>参数说明：</p> <blockquote> <p>key：字符串类型</p> <p>值：可以是一个方法,如果是方法默认是get操作,也可以是对象 ,设置get属性或者set属性</p> </blockquote> <h3>3、基础用法</h3> <p><strong>说明</strong></p> <blockquote> <p>在一个计算属性里可以完成各种复杂的逻辑，包括运算、函数调用等，最终返回一个结果,</p> <p>计算属性还可以依赖多个Vue 实例的数据，只要其中任一数据变化，计算属性就会重新执行，视图也会更新,适用于<strong>比较费时</strong>的数据计算</p> </blockquote> <p>示例代码</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app"&gt;      &lt;!--使用表达式的方式--&gt;      &lt;p v-text="originalPrice - discountPrice"&gt;&lt;/p&gt;      &lt;!--使用计算属性的方式--&gt;      &lt;p v-text="currentPrice"&gt;&lt;/p&gt;  &lt;/div&gt;  &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;  &lt;script&gt;      let app = new Vue({          el: '#app',          data: {               id:1,              originalPrice:1200,              discountPrice:200,          },          //计算属性          computed: {              // 把日期换成 常见规格格式的字符串。              currentPrice: function () {                  return "当前价格:" + (this.originalPrice - this.discountPrice);              }          }      });  </pre> </div> <h3>4、setter与getter</h3> <p>说明</p> <blockquote> <p>每一个计算属性都包含一个<strong>getter</strong> 和一个<strong>setter</strong>，上面的示例都是计算属性的默认用法， 只是利用了<strong>getter</strong>来读取</p> <p>如果需要，也可以提供一个<strong>setter</strong> 函数， 当修改计算属性的值就像修改一个普通数据那样时，就会触发<strong>setter</strong> 函数</p> </blockquote> <p>示例代码</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app1"&gt;      &lt;p v-text="currentPrice"&gt;&lt;/p&gt;  &lt;/div&gt;  &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;  &lt;script&gt;      let app = new Vue({          el: '#app',          data: {              id: 1,              originalPrice: 1200,              discountPrice: 200,          },          //计算属性          computed: {               cache:false,              // 把日期换成 常见规格格式的字符串。              currentPrice: {                  get: function () {                      return "当前价格:" + (this.originalPrice - this.discountPrice);                  },                  // 注意必须要传递参数,否则没有意义                  set: function (value) {                       //执行自定义的一下操作                      this.discountPrice = value                  }              }          }      });  &lt;/script&gt;  &lt;!--   在 console 中 输入 app.currentPrice=300   1&gt; 先执行get方法改变discountPrice的值  2&gt; 因为数据发生改变了 所以会重新计算当前的价格, 执行get方法  --&gt;  </pre> </div> <p>注意</p> <blockquote> <p>绝大多数情况下，我们只会用默认的<code>getter</code>方法来读取一个计算属性，在业务中很少用到<code>setter</code>,所以在声明一个计算属性时，可以直接使用默认的写法</p> </blockquote> <h3>5、缓存</h3> <p>说明</p> <blockquote> <p>计算属性基于它们的依赖进行缓存的，只有相关依赖发生改变的时候才会重新求值，一般为响应式依赖</p> <p>什么是响应式依赖，Vue <strong>不能检测到对象属性的添加或删除</strong>。由于 Vue 会在初始化实例时对属性执行 <code>getter/setter</code> 转化过程，所以属性必须在 <code>data</code> 对象上存在才能让 Vue 转换它，这样才能让它是响应</p> </blockquote> <p>示例代码</p> <div class="ay1code"> <pre class="brush:java;">&lt;!-- 响应式依赖 --&gt;  &lt;script&gt;      var vm = new Vue({        data: {          // 声明 message 为一个空值字符串          message: ''        },      })      // 响应式      vm.message = 'Hello!'        vm.v="非响应式的的值"  &lt;/script&gt;  </pre> </div> <p> </p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app"&gt;      &lt;button @click="getMethodsDate"&gt;methods&lt;/button&gt;      &lt;button @click="getComputedDate"&gt;computed带缓存&lt;/button&gt;  &lt;/div&gt;  &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;  &lt;script type="text/javascript"&gt;      new Vue({          el: '#app',          methods: {              getMethodsDate: function () {                  console.log(new Date().toLocaleTimeString())              },              // 返回computed选项中设置的计算属性——computedDate              getComputedDate: function () {                  console.log("缓存---&gt;" + this.computedDate)              }          },          computed: {              computedDate: function () {                  return new Date().toLocaleTimeString()              }          }      })  &lt;/script&gt;    </pre> </div> <h3>6、与methods的区别</h3> <p>computed 只有符合：存在依赖型数据，依赖型数据发生改变这两个条件，computed才会重新计算。而methods下的数据，是每次都会进行计算的</p> <p>调用方式不一样，<code>computed</code>定义的成员像属性一样访问，而<code>methods</code>定义的成员必须以函数形式调用。</p> <p><code>computed</code>是带缓存的，只有其引用的响应式属性发生改变时才会重新计算，而<code>methods</code>里的函数在每次调用时都要执行。</p> <h2>五、侦听器(watch)</h2> <h3>1、说明</h3> <blockquote> <p>官方:当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的，watch 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态</p> <p><code>watch</code>和我们前面介绍的<code>methods</code>相同的语法，但是有一个关键的区别。虽然嵌套属性的值确实是函数，但键的名称必须对应数据属性中的名称</p> </blockquote> <h3>2、语法格式</h3> <blockquote> <div class="ay1code"> <pre class="brush:js;">watch:{  [key: string]: string | Function | Object }]  </pre> </div> </blockquote> <h3>3、语法说明</h3> <p>key：必须是Vue对象data中定义的属性</p> <p>值：值可以是一个字符串，这个字符串是方法名；值可以是一个函数；值也可以是一个对象，其中包含回调函数可以其他选项：比如是否深度遍历。</p> <h3>4、基础使用</h3> <p>示例代码</p> <div class="ay1code"> <pre class="brush:js;">&lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;      let vm = new Vue({          data: {              test: "111",              user: {                  name: "码帝",                  address: {                      city: "大武汉"                  }              }          },          methods: {              fun: function (val) {                  alert(val)              }          },          watch: {              // 方法名方式 对应 methods中的函数名              // test: 'fun',              // 函数方式              test: function (v1, v2) {                  alert("新值" + v1 + "====旧值:" + v2)              },              /**               *什么是深度 例如  data: {test: "111", user: {name: "码帝" ,address{city:'大武汉'}}               * user属性对应值就是深层,一次内推               * 如果我们监听的user属性 当user.name属性发生改变的时候 watch监听是不到,所有我们这里需要使用深层监听               */              //              user: {                  handler: function (val) {                      alert(val.name)                  },                  // 是否深度监听 默认是false                  // 如果不设置为true当我们手动设置vm.user.name = "撸帝"的时候,是监听不到的                  deep: true              },              /**               * 或者也可以使用下面的方式来监听               * 注意键值必须是一个字符串，所以用引号括起来               *               */                "user.address.city": function (val) {                  alert(val)              }          }      });      vm.test = '333';      vm.user.name = "撸帝";      vm.user.address.city = '长沙'  </pre> </div> <p> </p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app"&gt;      &lt;input type="text" v-model="search"/&gt;      &lt;ul&gt;          &lt;li v-for="result in results" v-text="result"&gt;&lt;/li&gt;      &lt;/ul&gt;  &lt;/div&gt;  &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;      let vm = new Vue({          el: "#app",          data: {              user:{                  name:"码帝",              }              search: "",              results: [],                        },          methods: {            fun: function () {              alert("111");            }          }          watch: {           // 使用函数              search: function (v1, v2) {               console.log('新值: %s, 旧值: %s', v1, v2)                  this.results.push(v1)              }          }                })  &lt;/script&gt;  </pre> </div> <h3>5、与computed的区别</h3> <p><strong>触发条件不同</strong></p> <blockquote> <p>computed计算属性会依赖于使用它的data属性，只要是依赖的data属性值有变动，则自定义重新调用计算属性执行一次。</p> <p>watch则是在监控的data属性值发生变动时，其会自动调用watch回调函数。</p> </blockquote> <p><strong>应用场景不同</strong></p> <blockquote> <p>执行异步操作，开销较大的操作，避免堵塞主线程，使用watch。</p> <p>简单且串行返回的，使用computed</p> </blockquote> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-560.htm">ASP.NET Core使用EF为关系数据库建模_实用技巧</a></p>
                                                <p>下一个：<a href="/html/category/article-562.htm">SpringBoot 整合 Kafka 以及 @KafkaListener 注解的使用</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-775.htm" title="toString()、new String()和(String) 、String.ValueOf()的区别">toString()、new String()和(String) 、String.ValueOf()的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-783.htm" title="Vue中所有的v-指令">Vue中所有的v-指令</a></li>
                        <li class="py-2"><a href="/html/category/article-772.htm" title="如何在代码层面提高CPU分支预测效率">如何在代码层面提高CPU分支预测效率</a></li>
                        <li class="py-2"><a href="/html/category/article-767.htm" title="超详细，Python 多线程总结的太到位了">超详细，Python 多线程总结的太到位了</a></li>
                        <li class="py-2"><a href="/html/category/article-759.htm" title="golang中的panic">golang中的panic</a></li>
                        <li class="py-2"><a href="/html/category/article-751.htm" title="Azure Service Fabric 踩坑日志_在线工具">Azure Service Fabric 踩坑日志_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-786.htm" title="pandas读取csv文件提示字符读取失败">pandas读取csv文件提示字符读取失败</a></li>
                        <li class="py-2"><a href="/html/category/article-766.htm" title="Java：线程的三种中断方式">Java：线程的三种中断方式</a></li>
                        <li class="py-2"><a href="/html/category/article-746.htm" title="云环境下集合隐私计算-解读">云环境下集合隐私计算-解读</a></li>
                        <li class="py-2"><a href="/html/category/article-758.htm" title="Spring Security 一键接入验证码登录和小程序登录">Spring Security 一键接入验证码登录和小程序登录</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">22</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>