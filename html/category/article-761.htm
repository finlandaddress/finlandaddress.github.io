<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-761.htm" />
    <title>springMVC拦截器从Request中获取Json格式并解决request的请求流只能读取一次的问题 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>springMVC拦截器从Request中获取Json格式并解决request的请求流只能读取一次的问题</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night"> <h5 id="背景">背景</h5> <blockquote> <p>在使用SSM（你问我什么叫SSM，我一拳锤爆你的狗头）做开发的时候，经常会使用@RequestBody注解，这个注解是非常的好用。但是如果你想在请求参数传到后台的时候做一个参数检验，当然可以！使用SpringMVC的拦截器，在拦截器里把request的数据读取出来不就行了！！，但是在使用了拦截器的时候会出现一个问题！！！！你在拦截器读取了request的数据，在Controller里面@RequestBody注解获取Json就会失败就读取不到数据！！！！那就是RequestBody是流的形式读取的，流读取一次就没有了！！</p> </blockquote> <h5 id="为什么使用requestbody只能读取一遍请求数据流">为什么使用RequestBody只能读取一遍请求数据流？</h5> <blockquote> <p>那是因为流对应的是数据，数据放在内存中，有的是部分放在内存中。read 一次标记一次当前位置（mark position），第二次read就从标记位置继续读（从内存中copy）数据。 所以这就是为什么读了一次第二次是空了。 怎么让它不为空呢？只要inputstream 中的pos 变成0就可以重写读取当前内存中的数据。javaAPI中有一个方法<strong><em>public void reset()</em></strong> 这个方法就是可以重置pos为起始位置，但是不是所有的IO读取流都可以调用该方法！ServletInputStream是不能调用reset方法，这就导致了只能调用一次getInputStream()。</p> </blockquote> <h5 id="解决办法重写httpservletrequestwrapper方法">解决办法：重写HttpServletRequestWrapper方法</h5> <blockquote> <p>这种方法就是通过重写HttpServletRequestWrapper把request的保存下来，然后通过过滤器保存下来的request在填充进去，这样就可以多次读取request了</p> </blockquote> <p>1.重写HttpServletRequestWrapper方法</p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServletRequestWrapper</span> {<!-- --></span>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String body;     <span class="hljs-keyword">public</span> <span class="hljs-title">RequestWrapper</span>(HttpServletRequest request) <span class="hljs-keyword">throws</span> IOException {         <span class="hljs-keyword">super</span>(request);         StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();         BufferedReader bufferedReader = <span class="hljs-keyword">null</span>;         <span class="hljs-keyword">try</span> {             InputStream inputStream = request.getInputStream();             <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-keyword">null</span>) {                 bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(inputStream));                 <span class="hljs-keyword">char</span>[] charBuffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">128</span>];                 <span class="hljs-keyword">int</span> bytesRead = -<span class="hljs-number">1</span>;                 <span class="hljs-keyword">while</span> ((bytesRead = bufferedReader.read(charBuffer)) &gt; <span class="hljs-number">0</span>) {                     stringBuilder.append(charBuffer, <span class="hljs-number">0</span>, bytesRead);                 }             } <span class="hljs-keyword">else</span> {                 stringBuilder.append(<span class="hljs-string">""</span>);             }         } <span class="hljs-keyword">catch</span> (IOException ex) {             <span class="hljs-keyword">throw</span> ex;         } <span class="hljs-keyword">finally</span> {             <span class="hljs-keyword">if</span> (bufferedReader != <span class="hljs-keyword">null</span>) {                 <span class="hljs-keyword">try</span> {                     bufferedReader.close();                 } <span class="hljs-keyword">catch</span> (IOException ex) {                     <span class="hljs-keyword">throw</span> ex;                 }             }         }         body = stringBuilder.toString();     }      <span class="hljs-annotation">@Override</span>     <span class="hljs-keyword">public</span> ServletInputStream <span class="hljs-title">getInputStream</span>() <span class="hljs-keyword">throws</span> IOException {         <span class="hljs-keyword">final</span> ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(body.getBytes());         ServletInputStream servletInputStream = <span class="hljs-keyword">new</span> ServletInputStream() {             <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFinished</span>() {                 <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;             }             <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isReady</span>() {                 <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;             }             <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setReadListener</span>(ReadListener readListener) {}             <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span>() <span class="hljs-keyword">throws</span> IOException {                 <span class="hljs-keyword">return</span> byteArrayInputStream.read();             }         };         <span class="hljs-keyword">return</span> servletInputStream;      }     <span class="hljs-annotation">@Override</span>     <span class="hljs-keyword">public</span> BufferedReader <span class="hljs-title">getReader</span>() <span class="hljs-keyword">throws</span> IOException {         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">this</span>.getInputStream()));     }     <span class="hljs-keyword">public</span> String <span class="hljs-title">getBody</span>() {         <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.body;     }  }</code></pre> <p>2.拦截器CommonInterceptor</p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HandlerInterceptorAdapter</span> {<!-- --></span>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Log log = LogFactory.getLog(CommonInterceptor.class);     <span class="hljs-keyword">public</span> <span class="hljs-title">CommonInterceptor</span>() {     }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span>(HttpServletRequest request, HttpServletResponse response, Object handler) <span class="hljs-keyword">throws</span> Exception {         RequestWrapper myRequestWrapper = <span class="hljs-keyword">new</span> RequestWrapper((HttpServletRequest) request);         String body = myRequestWrapper.getBody();         System.out.println(<span class="hljs-string">"我是拦截器："</span>+body);         <span class="hljs-comment">// do something</span>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;      }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span>(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) <span class="hljs-keyword">throws</span> Exception {         <span class="hljs-keyword">super</span>.postHandle(request, response, handler, modelAndView);     }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span>(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) <span class="hljs-keyword">throws</span> Exception {         <span class="hljs-keyword">super</span>.afterCompletion(request, response, handler, ex);     }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterConcurrentHandlingStarted</span>(HttpServletRequest request, HttpServletResponse response, Object handler) <span class="hljs-keyword">throws</span> Exception {         <span class="hljs-keyword">super</span>.afterConcurrentHandlingStarted(request, response, handler);     } }</code></pre> <p>3.在spring-mvc.xml声明springMVC的拦截器</p> <pre class="prettyprint"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptors</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptor</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-title">mvc:mapping</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/**"</span>/&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"com.sdut.platform.core.CommonInterceptor"</span>/&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptor</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptors</span>&gt;</span></code></pre> <p>4.过滤器HttpServletFilter类</p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpServletFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> {<!-- --></span>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span>(FilterConfig filterConfig) <span class="hljs-keyword">throws</span> ServletException {     }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span>(ServletRequest request, ServletResponse response, FilterChain chain) <span class="hljs-keyword">throws</span> IOException, ServletException {         ServletRequest requestWrapper = <span class="hljs-keyword">null</span>;         System.out.println(<span class="hljs-string">"我是过滤器"</span>);         <span class="hljs-keyword">if</span>(request <span class="hljs-keyword">instanceof</span> HttpServletRequest) {             requestWrapper = <span class="hljs-keyword">new</span> RequestWrapper((HttpServletRequest) request);         }         <span class="hljs-keyword">if</span>(requestWrapper == <span class="hljs-keyword">null</span>) {             chain.doFilter(request, response);         } <span class="hljs-keyword">else</span> {             chain.doFilter(requestWrapper, response);         }     }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span>() {      } }</code></pre> <p>5.在web.xml中注册过滤器</p> <pre class="prettyprint"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>requestFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>com.sdut.platform.core.HttpServletFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>requestFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span></code></pre> <p>经过测试完全可以并且不出现其他错误。</p> <h5 id="解决办法aop切面获取request一般做日志管理会经常使用这种办法">解决办法：AOP切面获取request(一般做日志管理会经常使用这种办法)</h5> <p>这个办法我还没做测试 </p> <pre class="prettyprint"><code class="hljs avrasm">HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder<span class="hljs-preprocessor">.currentRequestAttributes</span>())<span class="hljs-preprocessor">.getRequest</span>()<span class="hljs-comment">;</span> HttpServletResponse response = ((ServletRequestAttributes) RequestContextHolder<span class="hljs-preprocessor">.currentRequestAttributes</span>())<span class="hljs-preprocessor">.getResponse</span>()<span class="hljs-comment">;</span></code></pre> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-760.htm">win11系统怎么隐藏菜单</a></p>
                                                <p>下一个：<a href="/html/category/article-762.htm">SpringBoot入门教程：浅聊POJO简单对象(VO、DTO、Entity)</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-794.htm" title="flex布局实现 内容区域高度自适应">flex布局实现 内容区域高度自适应</a></li>
                        <li class="py-2"><a href="/html/category/article-784.htm" title="Pytorch Conv1d()">Pytorch Conv1d()</a></li>
                        <li class="py-2"><a href="/html/category/article-3428.htm" title="Docker 解决Error response from daemon">Docker 解决Error response from daemon</a></li>
                        <li class="py-2"><a href="/html/category/article-4406.htm" title="国外宠物品牌（国外宠物品牌排行榜）">国外宠物品牌（国外宠物品牌排行榜）</a></li>
                        <li class="py-2"><a href="/html/category/article-3126.htm" title="pytorch cuda上tensor的定义  以及 减少cpu操作的方法">pytorch cuda上tensor的定义  以及 减少cpu操作的方法</a></li>
                        <li class="py-2"><a href="/html/category/article-4326.htm" title="动物医院教案幼儿园 动物医院教案小班">动物医院教案幼儿园 动物医院教案小班</a></li>
                        <li class="py-2"><a href="/html/category/article-1356.htm" title="utils层与tools层，manager层与service层，helper层概念理解">utils层与tools层，manager层与service层，helper层概念理解</a></li>
                        <li class="py-2"><a href="/html/category/article-4373.htm" title="属马的适不适合养猫（属马的可以养猫吗?）">属马的适不适合养猫（属马的可以养猫吗?）</a></li>
                        <li class="py-2"><a href="/html/category/article-3734.htm" title="面试官：@Transactional 注解是如何实现的？面试必问！">面试官：@Transactional 注解是如何实现的？面试必问！</a></li>
                        <li class="py-2"><a href="/html/category/article-4327.htm" title="宠物之家官网（深圳宠物之家官网）">宠物之家官网（深圳宠物之家官网）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>