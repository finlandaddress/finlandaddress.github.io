<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-533.htm" />
    <title>C++虚函数与纯虚函数 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>C++虚函数与纯虚函数</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div id="content_views" class="htmledit_views"> <h2>C++的虚函数与纯虚函数</h2> <p>C++项目看起来真的是太恼火了，源码阅读起来有点不便，幸亏有source insight 保命。C++有个很重要的特性，那就是多态。多态的实现主要是两种方式：<strong>一个就是函数的重载，另一个就是继承中对虚函数的重写</strong>。虚函数的引入对C++大型项目接口设计统一标准起到了非常重要的作用，与虚函数相对应的就是纯虚函数。</p> <p><strong>虚函数</strong>：用 virtual 标识标记的函数就是虚函数，<strong>只含有</strong>虚函数（且不含纯虚函数）的类就叫做<strong>虚类或者虚基类</strong>。<strong>虚函数必须要实现，可以是空函数体</strong>。被子类继承，子类不重写的话那就是直接基类的方法。</p> <p><strong>纯虚函数</strong>：同样含有 virtual 标识符，但是定义时函数则是在函数名后直接加 =0 定义；<strong>含有</strong>纯虚函数的类叫<strong>纯虚类</strong>，<strong>纯虚函数不用实现</strong>。子类只继承函数名，具体功能需要子类自己实现。</p> <p>栗子奉上：</p> <pre class="has"><code class="language-cpp">virtual void printTest();         //虚函数，需要函数体  virtual void printTest() = 0;     //纯虚函数，只用定义</code></pre> <h2>Java抽象类和接口</h2> <p>写过Java的人会发现，这个的功能特性与 java 的<strong>抽象类和接口的函数</strong>是类似的</p> <p><strong>抽象类</strong>：用 abstract 标识符标记的类就叫抽象类。抽象类的函数需要函数体，类似C++虚函数一样。</p> <p><strong>接口</strong>：与类（class）相对，用 Interface 标识符标记。接口只定义函数名，不具体实现。这个类似C++纯虚函数</p> <p>直接栗子：</p> <pre class="has"><code class="language-java">// 以下为多个文件 //-------------------- Base.java----------------- package test;  abstract public class Base {        // 基类，抽象类     public void printClass() {      // 抽象类函数必须实现，不然会报错         System.out.println("print base class");     } }   //------------------ Child1.java---------------- package test;  public class Child1 extends Base{    // 子类继承，可直接继承基类函数，不用实现  }   //------------------Child2.java---------------- package test;  public class Child2 extends Base {     @Override     public void printClass() {        // 子类继承，可对基类函数进行重写         System.out.println("print child2 class");     } }  //**************************************************************************** //------------------------------ IBase.java------------------------- package test;  public interface IBase {    //接口，只定义接口函数形式，不具体实现     void printClass(); }   //----------------------------- Child1_IBase.java---------------------- package test;  public class Child1_IBase implements IBase {     @Override     public void printClass() {        // 实现接口类，函数必须重写         System.out.println("print Interface Child1");     } }   //*************************************************************************** //------------------TestMain.java-------------- package test;  public class TestMain {     public static void main(String[] args) {         Child1 child1 = new Child1();    //未进行函数重写         Child2 child2 = new Child2();    //已进行函数重写         child1.printClass();                // 基类函数打印         child2.printClass();                // Child2 子类函数打印          Child1_IBase child1Interface = new Child1_IBase();         child1Interface.printClass();     } } </code></pre> <h2>虚类和纯虚类 虚函数和纯虚函数</h2> <p>话说回C++，C++的虚函数和纯虚函数的实现也就跟这 java 抽象类和接口差不多了。栗子二连</p> <pre class="has"><code class="language-cpp">#include &lt;iostream&gt; using namespace std;  class base {    //虚基类 public:     virtual void printClass() {    //虚函数实现         cout &lt;&lt;"print base class" &lt;&lt;endl;     } };  class baseVirtual {    //纯虚类，只要含有一个纯虚函数即是纯虚类 public:     virtual void printClass() {        //虚函数，需要实现         cout &lt;&lt;"print baseVirtual class" &lt;&lt;endl;     }     virtual void printClassVirtual() = 0;    //纯虚函数，不需实现 };  //--------------------------------------------------------------- class sameChild1: public base {    //子类继承，不自己重写虚函数  };  class overrideChild2: public base{ public:     void printClass() override {        // 虚函数重写，override 可不加上         cout &lt;&lt;"print child2 class" &lt;&lt;endl;     } };  class virtualChild3 : public baseVirtual { public:     void printClassVirtual() override {    // 纯虚函数实现，override 可不加上         cout &lt;&lt;"print virtualChild3 class" &lt;&lt;endl;     } };  //--------------------------------------------------------------- int main() {     base baseIns;        //虚基类，可以进行实例化     baseIns.printClass();      sameChild1 child1;    // 子类，函数直接继承父类     child1.printClass();      overrideChild2 child2;    // 子类，进行了函数重写     child2.printClass();      // baseVirtual baseVirIns;    // 纯虚类，不可实例化     // baseVirIns.printClassVirtual();      virtualChild3 child3;        // 纯虚类的子类，进行了纯虚函数的重写     child3.printClassVirtual();     return 0; }</code></pre> <p>结果输出：</p> <p><img fetchpriority="high" decoding="async" alt="" class="has" height="102" src="http://img.555519.xyz/uploads/20230209/b3c40bed8d1818868375424d37b7a2fa.jpg"></p> <p>&nbsp;与java不同之处：</p> <p>1. java 的抽象类和接口都是不可以单独实例化的，只能由子类实例化</p> <p>2. C++只有纯虚类不可以实例化，普通的虚基类可以进行实例化；因为方法有实现（但其实Java抽象类也有实现，哈哈哈）。</p> <p>同时既然说到了 override，就说一下我的理解：</p> <h2>C++ override的使用</h2> <p>首先需要明确一个问题，那就是子类到底从基类中继承到了什么，这里只讨论函数方法</p> <p>1. 基类中的纯虚函数，子类<strong>仅继承接口形式</strong>，具体函数体需要自己实现。</p> <p>2. 基类中的虚函数，子类继承到了<strong>接口形式+缺省实现。</strong>具体函数<strong>一般还是要子类自己实现</strong>，当然也可直接使用基类的。</p> <p>3. 基类中的非虚函数，子类继承到<strong>接口形式+具体实现</strong>。具体函数<strong>一般不需要子类自己实现</strong>，当然你强行想再实现也是可以的。</p> <p>那就好像有没有 override 都可以正常实现虚函数的重写，那为什么要加个 override 呢？其实 override 是C++ 11之后加入的保留字，<strong>用于对虚函数重写的强制检查</strong>。举个栗子，还是上面那个示例，</p> <pre class="has"><code class="language-cpp">class overrideChild2: public base{ public:     /**     * 函数名写错！！!     * 假如没有 override ，程序员以为是对基类函数的重写，实际函数写错了。编译也不会有任何问题，到             * 函数调用的时候，仍然使用基类的接口形式调用；那么就会出现于预想中不一样的结果     **/     void printClassSSSP() /*override*/ {                 cout &lt;&lt;"print child2 class" &lt;&lt;endl;     } };</code></pre> <p>对基类虚函数重写的错误，有可能因为函数名，参数类型，返回类型等等这些产生错误；但是这个是书写错误，这个是不容易查找出来的。派生类只会把这个当成是一个全新的函数，这是会带来很大的困扰，于是就有了 override 。<strong>被override 标识的函数，就明确表示是对基类函数的重写，那么必然需要有存在这样一个基类函数，在编译过程就会进行一个强制检查</strong>。如果发现基类中并没有这个函数，那说明是我们写错了函数，这样会保证虚函数的有效重写。所以 override 针对对象是基类的<strong>虚函数</strong>，<strong>非虚函数表示基类一般希望子类继承自己的方法实现，加上一个 override 同样也会报错提醒</strong>。</p> <p><strong>override 使用前提</strong>：</p> <p>1）子类想改写基类函数；</p> <p>2）基类函数为虚函数；&nbsp;</p> <p>3）函数形式与基类保持一致（包括函数名，参数，返回类型）&nbsp;</p> <p>说白了 override 就是一种辅助的措施，防止一些不必要的错误</p> <p>ps: 还是写这些杂的轻松快乐。磕盐要加糖，我们都一样。</p> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-532.htm">pyspark结合hive使用 spark on hive方式开发代码附上代码实例</a></p>
                                                <p>下一个：<a href="/html/category/article-534.htm">pycharm中新增less</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4373.htm" title="属马的适不适合养猫（属马的可以养猫吗?）">属马的适不适合养猫（属马的可以养猫吗?）</a></li>
                        <li class="py-2"><a href="/html/category/article-7171.htm" title="兰州宠物用品批发地点在哪里呀（兰州宠物用品批发市场在哪里）">兰州宠物用品批发地点在哪里呀（兰州宠物用品批发市场在哪里）</a></li>
                        <li class="py-2"><a href="/html/category/article-5933.htm" title="动物打完疫苗可以洗澡吗有影响吗知乎（动物打疫苗后多久能杀了吃）">动物打完疫苗可以洗澡吗有影响吗知乎（动物打疫苗后多久能杀了吃）</a></li>
                        <li class="py-2"><a href="/html/category/article-6665.htm" title="同安有哪些宠物医院好的（同安有哪些宠物医院好的地方）">同安有哪些宠物医院好的（同安有哪些宠物医院好的地方）</a></li>
                        <li class="py-2"><a href="/html/category/article-6020.htm" title="宠物疫苗能带上高铁吗国内（宠物疫苗可以过安检吗）">宠物疫苗能带上高铁吗国内（宠物疫苗可以过安检吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6987.htm" title="宠物托运检疫证明去哪里办宁波（宠物托运检疫证明去哪里办）">宠物托运检疫证明去哪里办宁波（宠物托运检疫证明去哪里办）</a></li>
                        <li class="py-2"><a href="/html/category/article-6849.htm" title="两个月大的猫抓伤（两个月大的猫抓伤可要打狂犬疫苗）">两个月大的猫抓伤（两个月大的猫抓伤可要打狂犬疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7216.htm" title="动物疫苗研究现状（动物疫苗研究现状分析）">动物疫苗研究现状（动物疫苗研究现状分析）</a></li>
                        <li class="py-2"><a href="/html/category/article-4518.htm" title="最便宜的批发平台（最便宜的批发网站大全）">最便宜的批发平台（最便宜的批发网站大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-6196.htm" title="1970年农历四月二十七是什么星座女 1970年农历四月二十七是什么星座女生">1970年农历四月二十七是什么星座女 1970年农历四月二十七是什么星座女生</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>