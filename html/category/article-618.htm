<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-618.htm" />
    <title>Kotlin（二） 标准函数和静态方法 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>Kotlin（二） 标准函数和静态方法</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2> 1、标准函数</h2> <p>标准函数是指Standard.kt文件中定义的函数</p> <h4> 1.1、let函数</h4> <p>let函数提供了函数式API编程接口，并将原始对象作为参数传递到Lambda表达式中，标准的写法如下：</p> <pre><code>obj.let {             obj1->需要执行的逻辑         }          </code></pre> <p>obj1就是obj对象这里写成obj1只是为了防止命名重复的问题，使用的场景如下：</p> <pre><code>fun doStudy(study: Study?) {         study?.readBook()         study?.doHomeWork()     } </code></pre> <p>上面代码相当于每次调用Study对象的方法，都需要对study进行判空，我们可以使用let函数配合?.即可解决这个问题。</p> <pre><code>fun doStudy(study: Study?) {         study?.let {             it.readBook()             it.doHomeWork()         }     } </code></pre> <h4> 1.2、with函数</h4> <p>with函数接收两个参数：</p> <ul> <li>第一个参数：任意类型的对象</li> <li>第二个参数：一个Lambda表达式</li> </ul> <p>with函数会在Lambda表达式中提供第一个参数对象的上下文，并将Lambda表达式最后一行代码作为返回值返回。</p> <ul> <li>with函数的作用：它可以在连续调用同一个对象的多个方法时使代码变得简洁。具体示例如下：</li> </ul> <pre><code>val list= listOf<String>("Apple","Banana","Orange","Pear","Grape") val builder=StringBuilder() builder.append("Start eating fruit \n") for(fruit in list){     builder.append("$fruit \n") } builder.append("Ate all fruit") val result=builder.toString() println(result)     </code></pre> <p>仔细观察上面代码，我们多次使用builder对象调用append()进行字符串的拼接，这个时候我们就可以使用with函数来简化这个过程。</p> <pre><code>val list= listOf<String>("Apple","Banana","Orange","Pear","Grape") val result=with(StringBuilder()){     append("Start eating fruit \n")     for(fruit in list){         append("$fruit \n")     }     append("Ate all fruit") toString() } println(result) </code></pre> <h4> 1.3、run函数</h4> <p>run函数的使用场景和with函数的使用场景一样，只不过用法上有点差别。</p> <ol> <li>run函数必须由对象调用。</li> <li>run函数只接受一个参数即Lambda表达式，并将调用对象作为Lambda表达式的上下文。</li> <li>Lambda表达式最后一行代码作为run函数的返回值返回。<br /> 具体示例如下：</li> </ol> <pre><code>val list=listOf("Apple","Banana","Orange","Pear","Grape") val builder=StringBuilder() val result=builder.run {     append("Start eating fruit \n")     for(fruit in list){         append("$fruit \n")     }     append("Ate all fruits")     toString() } </code></pre> <p>和with函数基本一致，只不过是将调用with函数传入StringBuilder对象改成了StringBuilder对象调用run函数。其他没有什么区别。</p> <h4> 1.4、apply函数</h4> <p>apply函数和run函数也是极其相似的，都是在某个对象上使用并且只接受一个Lambda表达式参数，调用对象作为Lambda表达式的上下文，不同的是apply函数无法指定返回值，而是返回调用对象本身。示例如下：</p> <pre><code>val list=listOf("Apple","Banana","Orange","Pear","Grape") val builder=StringBuilder() val result=builder.apply{     append("Start eating fruit \n")     for(fruit in list){         append("$fruit \n")     }     append("Ate all fruits") } println(result.toString()) </code></pre> <p>由于apply函数无法指定返回值，只返回调用对象本身，所以这里的result是StringBuilder对象。</p> <h4> 1.5、repeat函数</h4> <p>repeat函数接收2个参数，第一个参数是Int类型的，第二个参数Lambda表达式。第一个参数的意思表示的是指Lambda表达式中内容执行的次数。</p> <pre><code>  val list=ArrayList<String>()         repeat(2) {             list.add("1")             list.add("2")         } //集合中的数据就是1,2,1,2 </code></pre> <p>可以看到1,2添加了2遍。</p> <h4> 1.6、also函数</h4> <p>also函数接收一个参数Lambda表达式。可以在表达式执行前进行非null校验,传入参数为it,返回值固定为this自身类型</p> <pre><code>val list=listOf("Apple","Banana","Orange","Pear","Grape") val builder=StringBuilder() val result=builder?.also{     it.append("Start eating fruit \n")     for(fruit in list){         it.append("$fruit \n")     }     it.append("Ate all fruits") } println(result.toString()) </code></pre> <p>只返回调用对象本身，所以这里的result是StringBuilder对象。</p> <h2> 2、定义静态方法</h2> <p>在Kotlin中实现静态方法反而没那么简单，实现方式如下：</p> <h4> 1、使用单例类实现。</h4> <pre><code>object SIngleInstance {      fun doAction(){} } //调用也简单 SIngleInstance.doAction() </code></pre> <p>看上去是不是和Java中调用静态方法一样，其实Kotlin内部已经创建了唯一的SIngleInstance对象，然后使用对象调用doAction()方法，不过使用单例类的方法就会使类中的所有方法的调用全部变成了类似于静态方法调用的方式了。那么能不能只指定一个或部分方法变成静态方法的调用，这时候就需要companion object了。</p> <h4> 2、使用关键字companion object实现</h4> <pre><code class="prism language-class">    fun doAction1(){}     companion object {         fun doAction2(){             println("do action2")         }     } } </code></pre> <p>普通类Util中有2个方法doAction1()和doAction2()，他们还是有很大区别的，doAction1()的调用必须使用Util类的对象来调用，而doAction2()可以直接使用Util .doAction2()调用。<br /> 不过doAction2()其实也不是静态方法，companion object这个关键字实际上会在Util类的内部创建一个伴生类，而doAction2()这个方法就是定义在这个伴生类里面的实例方法，只不过Kotlin保证Util类只会存在一个伴生类对象，因此调用Util.doAction2()实际上调用Util类中伴生类对象的doAction2()。<br /> 由此可以看出Kotlin确实没有定义静态方法的关键字，但是提供了一些语法特性来支持静态方法调用的写法。</p> <h4> 3、确确实实的静态方法</h4> <h6> 1、注解方法实现静态方法</h6> <p>注解方式实现静态方法只能用在单例类中或companion object关键中，下面我们在companion object关键中加上注解@JvmStatic：</p> <pre><code>companion object {         @JvmStatic         fun doAction2(){             println("do action2")         }     } </code></pre> <h6> 2、顶层方法实现静态方法</h6> <p>顶层方法是指那些没有定义在任何类中的方法，Kotlin编译器会将所有顶层方法编译成静态方法。比如我们在新建的Kotlin FileHelper.kt中定义一个doSomething()方法</p> <pre><code>fun doSomething() {     println("do Something") } </code></pre> <ul> <li>1、在Kotlin中调用很简单，不用管包名路径，也不用创建实例对象，在任意位置都能调用该方法。</li> <li>2、但是在Java中调用，就不能按Kotlin中这样写否则会报错，在Java中没有顶层方法的概念，所有方法都必须在类中。我们刚才创建的Helper.kt文件，Kotlin编译器就会创建一个HelperKt的Java类，所以在在Java中调用方式为：</li> </ul> <pre><code>HelperKt.doSomething(); </code></pre> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-617.htm">springboot开启异步注解功能</a></p>
                                                <p>下一个：<a href="/html/category/article-619.htm">Antd的Form.Item自定义类型输入框</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3733.htm" title="Springboot使用@Cacheable注解实现数据缓存">Springboot使用@Cacheable注解实现数据缓存</a></li>
                        <li class="py-2"><a href="/html/category/article-2827.htm" title="用纯RUST实现音视频流媒体服务(RTMP/HTTPFLV/HLS)XIU">用纯RUST实现音视频流媒体服务(RTMP/HTTPFLV/HLS)XIU</a></li>
                        <li class="py-2"><a href="/html/category/article-1325.htm" title="RBAC-基于角色的访问控制详解">RBAC-基于角色的访问控制详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1335.htm" title="Java实现MD5和国密SM3摘要算法">Java实现MD5和国密SM3摘要算法</a></li>
                        <li class="py-2"><a href="/html/category/article-1633.htm" title="javaScript深拷贝和浅拷贝简单梳理_在线工具">javaScript深拷贝和浅拷贝简单梳理_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-4071.htm" title="Kubernetes部署单元-Pod">Kubernetes部署单元-Pod</a></li>
                        <li class="py-2"><a href="/html/category/article-3734.htm" title="面试官：@Transactional 注解是如何实现的？面试必问！">面试官：@Transactional 注解是如何实现的？面试必问！</a></li>
                        <li class="py-2"><a href="/html/category/article-1944.htm" title="简单了解 TiDB 架构">简单了解 TiDB 架构</a></li>
                        <li class="py-2"><a href="/html/category/article-4483.htm" title="养小猫要打什么针（家养小猫要打什么疫苗）">养小猫要打什么针（家养小猫要打什么疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4326.htm" title="动物医院教案幼儿园 动物医院教案小班">动物医院教案幼儿园 动物医院教案小班</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>