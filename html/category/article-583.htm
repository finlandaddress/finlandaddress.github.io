<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-583.htm" />
    <title>C#语法糖系列聊聊 ref，in 修饰符底层玩法 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>C#语法糖系列聊聊 ref，in 修饰符底层玩法</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<p>自从 C# 7.3 放开 ref 之后，这玩法就太花哨了，也让 C# 这门语言变得越来越多范式，越来越重，这篇我们就来聊聊 ref，本质上来说 ref 的放开就是把 C/C++ 指针的那一套又拿回来了，而且还封装成一套自己的玩法，下面一一解读下。</p> <h2 id="一方法参数上的-ref">一：方法参数上的 ref</h2> <p>我想设计者的初心把 ref 的功能限制的死死的，可能也考虑到 C# 是一门面向业务开发的语言，讲究的是做项目快狠准，性能反而不是第一要素，这个时候的 ref 很简单，看一下代码：</p> <pre><code class="language-C#">     class Program     {         static void Main(string[] args)         {             long price = 0;              GetPrice(ref price);              Console.WriteLine($"output: price={price}");         }          public static void GetPrice(ref long price)         {             price = 10;         }     }  output: price=10</code></pre> <p>我相信很有朋友都知道，方法参数中的<code>ref long price</code>  拿的是栈地址，对栈地址上的值进行修改，自然就修改了指向这些地址上的变量，和引用类型原理一致，接下来我们从汇编角度去验证，在 Price 方法上下一个断点。</p> <pre><code class="language-C#"> D:\net5\ConsoleApp4\ConsoleApp3\Program.cs @ 16: 026b048e 8d4dec          lea     ecx,[ebp-14h] 026b0491 ff15a0ebc800    call    dword ptr ds:[0C8EBA0h] (ConsoleApp3.Program.GetPrice(Int64 ByRef), mdToken: 06000002) 026b0497 90              nop 0:000&gt; bp 026b0491 0:000&gt; g Breakpoint 1 hit ChangeEngineState eax=00000000 ebx=0057f354 ecx=0057f2d4 edx=783aaa50 esi=02979e7c edi=0057f2dc eip=026b0491 esp=0057f2c4 ebp=0057f2e8 iopl=0         nv up ei pl zr na pe nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246 026b0491 ff15a0ebc800    call    dword ptr ds:[0C8EBA0h] ds:002b:00c8eba0=00c2be10</code></pre> <p>从汇编的<code>lea     ecx,[ebp-14h]</code> 就能看到，将<code>ebp-14</code> 这个单元的内存地址给了 ecx，这个 ecx 也就是作为参数传递给了<code>Price</code> 方法，后续的赋值将会影响这个<code>栈位置</code> 上的内容。</p> <h2 id="2-方法返回值上的-ref">2. 方法返回值上的 ref</h2> <p>这就有意思了，进入的时候传地址，回来的时候也想传地址，很显然<code>方法线程栈</code>上的<code>值类型</code> 是传不出去的，毕竟方法返回后，esp,ebp 所控制的方法栈帧空间是要销毁的，所以只能是堆上对象才能实现。</p> <p>为了方便理解，看如下代码：</p> <pre><code class="language-C#">     class Program     {         static void Main(string[] args)         {             ref long price = ref GetCurrentPrice();              price = 12;              Console.WriteLine($"output: price={price}");         }          public static ref long GetCurrentPrice()         {             long[] nums = { 10, 20, 30 };              return ref nums[1];         }     }  output: price=12</code></pre> <p>可以看到当前的<code>price=12</code>,同时<code>nums</code> 这个数组也被修改了，可以用 windbg 验证一下。</p> <pre><code class="language-C#"> 0:000&gt; !dumpheap  -type System.Int64[]   Address       MT     Size 027ca7b0 04c39d00       36       Statistics:       MT    Count    TotalSize Class Name 04c39d00        1           36 System.Int64[] Total 1 objects 0:000&gt; dq 027ca7b0 L4 027ca7b0  00000003`04c39d00 00000000`0000000a 027ca7c0  00000000`0000000c 00000000`0000001e</code></pre> <p>可以看到上面的<code>000000000000000c</code> 被修改成<code>price=12</code> ，这时候有人就不爽了，我不希望外面的代码能修改 price 内容，那怎么办呢？ 还得在<code>ref</code> 后面加上<code>readonly</code> ，改造后如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f4279856e14181131760eb07d993b271.jpg" alt="C#语法糖系列聊聊 ref，in 修饰符底层玩法"></p> <p>到此时写法就有点疯狂了，对 C# 开发者来说很难理解，对熟悉 C/C++ 指针的朋友来说又很不习惯，太纠结了，下面是一段翻译过来的<code>C/C++指针代码</code> 。</p> <pre><code class="language-C++"> const long long* getcurrentprice();  int main() { 	int i = 0;  	const long long* price = getcurrentprice();  	price = 12;  	printf("num=%d, price=%d \n", i, *price);  }  const long long* getcurrentprice() {  	long long* num = new long long[3]{ 10,20,30 }; 	return num + 1; }</code></pre> <p>说实话，这代码看起来就清爽多了。</p> <h2 id="2-对-ref-变量的-in-操作">2. 对 ref 变量的 in 操作</h2> <p>这又是一套 C/C++ 的玩法，有时候不希望某一个方法对 ref 变量进行修改，注意：是不希望某一个方法进行修改，其他方法是可以的，那这个怎么实现呢？这就需要在入参上加<code>in</code> 前缀，把代码修改一下。</p> <pre><code class="language-C#">     class Program     {         static void Main(string[] args)         {             ref long price = ref GetCurrentPrice();              ModifyPrice(in price);              Console.WriteLine($"output: price={price}");         }          public static ref long GetCurrentPrice()         {             long[] nums = { 10, 20, 30 };              return ref nums[1];         }          public static void ModifyPrice(in long price)         {             price = 12;             Console.WriteLine(price);         }     }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6e89468a5e3d2f0e468724a0ac70f229.jpg" alt="C#语法糖系列聊聊 ref，in 修饰符底层玩法"></p> <p>可以看到，这时候报错了，如果换成 C++ 就很简单了，只需要在参数上把 in 改成 const 即可。</p> <pre><code class="language-C++"> void modifyprice(const long long* price) { 	*price = 12; 	printf("%d", *price); }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/40e79010e54d638a0441264722297bf2.jpg" alt="C#语法糖系列聊聊 ref，in 修饰符底层玩法"></p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-582.htm">源码中的设计模式&#8211;单例模式</a></p>
                                                <p>下一个：<a href="/html/category/article-584.htm">Git撤销&amp;回滚操作</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-776.htm" title="vue实现文字滚动效果_vue.js">vue实现文字滚动效果_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-780.htm" title="@RequestBody某些属性值得不到">@RequestBody某些属性值得不到</a></li>
                        <li class="py-2"><a href="/html/category/article-771.htm" title="win11系统如何进入高级启动">win11系统如何进入高级启动</a></li>
                        <li class="py-2"><a href="/html/category/article-4072.htm" title="netty依赖精简">netty依赖精简</a></li>
                        <li class="py-2"><a href="/html/category/article-1326.htm" title="go异常/错误机制（panic和error）">go异常/错误机制（panic和error）</a></li>
                        <li class="py-2"><a href="/html/category/article-3760.htm" title="docker部署confluence">docker部署confluence</a></li>
                        <li class="py-2"><a href="/html/category/article-785.htm" title="C语言程序设计——用户密码输入与判断">C语言程序设计——用户密码输入与判断</a></li>
                        <li class="py-2"><a href="/html/category/article-2243.htm" title="Android jetpack room+ViewModel+liveData 数据自动更新">Android jetpack room+ViewModel+liveData 数据自动更新</a></li>
                        <li class="py-2"><a href="/html/category/article-3734.htm" title="面试官：@Transactional 注解是如何实现的？面试必问！">面试官：@Transactional 注解是如何实现的？面试必问！</a></li>
                        <li class="py-2"><a href="/html/category/article-2534.htm" title="C++数据结构与算法之排序桶排序">C++数据结构与算法之排序桶排序</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>