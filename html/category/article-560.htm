<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-560.htm" />
    <title>ASP.NET Core使用EF为关系数据库建模_实用技巧 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/website/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/website/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/website/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/website/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/website/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/website/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/website/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/website/css/finlandaddress/style.css" rel="stylesheet" />
    <link rel="stylesheet" href="/assets/website/css/style.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/website/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>ASP.NET Core使用EF为关系数据库建模_实用技巧</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li>1.简介</li> <li>2.表映射</li> <ul class="second_class_ul"> <li>2.1约定</li> <li>2.2数据注释</li> <li>2.3Fluent API</li> </ul> <li>3.列映射</li> <ul class="second_class_ul"> <li>3.1约定</li> <li>3.2数据注释</li> <li>3.3Fluent API</li> </ul> <li>4.数据类型</li> <ul class="second_class_ul"> <li>4.1约定</li> <li>4.2数据注释</li> <li>4.3Fluent API</li> </ul> <li>5.主键</li> <ul class="second_class_ul"> <li>5.1约定</li> <li>5.2数据注释</li> <li>5.3Fluent API</li> </ul> <li>6.默认架构</li> <ul class="second_class_ul"> <li>6.1约定</li> <li>6.2数据注释</li> <li>6.3Fluent API</li> </ul> <li>7.默认值</li> <ul class="second_class_ul"> <li>7.1约定</li> <li>7.2数据注释</li> <li>7.3Fluent API</li> </ul> <li>8.索引（关系数据库）</li> <ul class="second_class_ul"> <li>8.1约定</li> <li>8.2数据注释</li> <li>8.3Fluent API</li> </ul> </ul> </div> <p class="maodian"></p> <h2>1.简介</h2> <p>一般而言，本部分中的配置适用于关系数据库。安装关系数据库提供程序时，此处显示的变为可用扩展方法（原因在于共享的Microsoft.EntityFrameworkCore.Relational包）。</p> <p class="maodian"></p> <h2>2.表映射</h2> <p>表映射标识在数据库中哪张表应该进行内容查询和保存操作。</p> <p class="maodian"></p> <h3>2.1约定</h3> <p>按照约定，每个实体将设置为映射到名称与DbSet<TEntity> 属性（公开派生上下文中的实体）相同的表中。如果给定DbSet<TEntity>实体中不包含，则使用类名称。</p> <p class="maodian"></p> <h3>2.2数据注释</h3> <p>可以使用数据注释来配置类型映射表。</p> <div class="ay1code"> <pre class="brush:csharp;">[Table("blogs")]  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p>你还可以指定表所属的架构（数据库）。</p> <div class="ay1code"> <pre class="brush:csharp;">[Table("blogs", Schema = "blogging")]  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p class="maodian"></p> <h3>2.3Fluent API</h3> <p>你可以使用熟知的API来配置类型映射到的表。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet<Blog> Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity<Blog>()              .ToTable("blogs");      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p>你还可以指定表所属的架构（数据库）。</p> <div class="ay1code"> <pre class="brush:csharp;">modelBuilder.Entity<Blog>().ToTable("blogs", schema: "blogging");</pre> </div> <p class="maodian"></p> <h2>3.列映射</h2> <p>列映射标识在数据库中应从哪些列数据中进行查询和保存。</p> <p class="maodian"></p> <h3>3.1约定</h3> <p>按照约定，每个属性将会设置为映射到与属性具有相同名称的列。</p> <p class="maodian"></p> <h3>3.2数据注释</h3> <p>可以使用数据注释来配置属性映射到的那一列。</p> <div class="ay1code"> <pre class="brush:csharp;">namespace EFModeling.DataAnnotations.Relational.Column  {      class MyContext : DbContext      {          public DbSet<Blog> Blogs { get; set; }      }      public class Blog      {          [Column("blog_id")]          public int BlogId { get; set; }          public string Url { get; set; }      }  }</pre> </div> <p class="maodian"></p> <h3>3.3Fluent API</h3> <p>您可以使用熟知的API来配置属性映射到的列。</p> <div class="ay1code"> <pre class="brush:csharp;">namespace EFModeling.FluentAPI.Relational.Column  {      class MyContext : DbContext      {          public DbSet<Blog> Blogs { get; set; }          protected override void OnModelCreating(ModelBuilder modelBuilder)          {              modelBuilder.Entity<Blog>()                  .Property(b => b.BlogId)                  .HasColumnName("blog_id");          }      }      public class Blog      {          public int BlogId { get; set; }          public string Url { get; set; }      }  }</pre> </div> <p class="maodian"></p> <h2>4.数据类型</h2> <p>数据类型是指属性所映射到的列的数据库特定类型。</p> <p class="maodian"></p> <h3>4.1约定</h3> <p>按照约定，数据库提供程序基于属性的.NET类型选择数据类型。它还会考虑其他元数据，如配置的最大长度、属性是否是主键的一部分等。例如，SQL Server的DateTime、nvarchar(max) 用作键的属性。</p> <p class="maodian"></p> <h3>4.2数据注释</h3> <p>您可以使用数据注释为列指定精确的数据类型。例如，下面的代码将Url配置为一个非unicode字符串，其最大200长度。Rating为5至2小数位。</p> <div class="ay1code"> <pre class="brush:csharp;">public class Blog  {      public int BlogId { get; set; }      [Column(TypeName = "varchar(200)")]      public string Url { get; set; }      [Column(TypeName = "decimal(5, 2)")]      public decimal Rating { get; set; }  }</pre> </div> <p class="maodian"></p> <h3>4.3Fluent API</h3> <p>你还可以使用熟知的API为列指定相同的数据类型。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet<Blog> Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity<Blog>(eb =>          {              eb.Property(b => b.Url).HasColumnType("varchar(200)");              eb.Property(b => b.Rating).HasColumnType("decimal(5, 2)");          });      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }      public decimal Rating { get; set; }  }</pre> </div> <p class="maodian"></p> <h2>5.主键</h2> <p>为每个实体类型的键引入primary key（主键）约束。</p> <p class="maodian"></p> <h3>5.1约定</h3> <p>按照约定，会将数据库中的主键命名为PK_<type name>。</p> <p class="maodian"></p> <h3>5.2数据注释</h3> <p>不能使用数据批注配置主键的关系数据库的特定方面。</p> <p class="maodian"></p> <h3>5.3Fluent API</h3> <p>你可以使用API在数据库中配置primary key（主键）约束的名称。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet<Blog> Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity<Blog>()              .HasKey(b => b.BlogId)              .HasName("PrimaryKey_BlogId");      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p class="maodian"></p> <h2>6.默认架构</h2> <p>如果没有为该对象显式配置架构，则默认架构为将在其中创建对象的数据库架构。</p> <p class="maodian"></p> <h3>6.1约定</h3> <p>按照约定，数据库提供程序将选择最适合的默认架构。例如，Microsoft SQL Server将使用dbo架构，而且sqlite将不使用架构（因为sqlite不支持架构）。</p> <p class="maodian"></p> <h3>6.2数据注释</h3> <p>不能使用数据批注设置默认架构。</p> <p class="maodian"></p> <h3>6.3Fluent API</h3> <p>可以使用API来指定默认架构。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet<Blog> Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.HasDefaultSchema("blogging");      }  }</pre> </div> <p class="maodian"></p> <h2>7.默认值</h2> <p>如果插入新行，但没有为该列指定值，则列的默认值为要插入的值。</p> <p class="maodian"></p> <h3>7.1约定</h3> <p>按照约定，未配置默认值。</p> <p class="maodian"></p> <h3>7.2数据注释</h3> <p>不能使用数据批注设置默认值。</p> <p class="maodian"></p> <h3>7.3Fluent API</h3> <p>你可以使用API指定属性的默认值。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet<Blog> Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity<Blog>()              .Property(b => b.Rating)              .HasDefaultValue(3);      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }      public int Rating { get; set; }  }</pre> </div> <p>还可以指定用于计算默认值的SQL片段。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet<Blog> Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity<Blog>()              .Property(b => b.Created)              .HasDefaultValueSql("getdate()");      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }      public DateTime Created { get; set; }  }</pre> </div> <p class="maodian"></p> <h2>8.索引（关系数据库）</h2> <p>关系数据库中的索引映射到与实体框架核心中的索引相同的概念。</p> <p class="maodian"></p> <h3>8.1约定</h3> <p>按照约定，索引命名为IX_<type name>_<property name>。对于复合索引<property name>，将成为以下划线分隔的属性名称列表。</p> <p class="maodian"></p> <h3>8.2数据注释</h3> <p>不能使用数据批注配置索引。</p> <p class="maodian"></p> <h3>8.3Fluent API</h3> <p>你可以使用熟知的API来配置索引的名称。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet<Blog> Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity<Blog>()              .HasIndex(b => b.Url)              .HasName("Index_Url");      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p>你还可以指定筛选器。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet<Blog> Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity<Blog>()              .HasIndex(b => b.Url)              .HasFilter("[Url] IS NOT NULL");      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p>使用SQL Server提供程序EF为唯一索引中包含的所有可以为null的列添加"IS NOT NULL"筛选器。若要重写此约定，可以null提供一个值。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet<Blog> Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity<Blog>()              .HasIndex(b => b.Url)              .IsUnique()              .HasFilter(null);      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p>在SQL Server索引中包含列，当查询中的所有列都作为键列或非键列包含在索引中时，可以通过包含列配置索引以显著提高查询性能。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet<Post> Posts { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity<Post>()              .HasIndex(p => p.Url)              .IncludeProperties(p => new              {                  p.Title,                  p.PublishedOn              })              .HasName("Index_Url_Include_Title_PublishedOn");      }  }  public class Post  {      public int PostId { get; set; }      public string Url { get; set; }      public string Title { get; set; }      public DateTime PublishedOn { get; set; }  }</pre> </div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-559.htm">JavaScript如何查找两个字符串之间的共享元素</a></p>
                                                <p>下一个：<a href="/html/category/article-561.htm">vue中计算属性computed理解说明包括vue侦听器,缓存与computed的区别_vue.js</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	
<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-10160.htm" title="动物疫苗的保存温度要求 动物疫苗的保存温度要求是多少">动物疫苗的保存温度要求 动物疫苗的保存温度要求是多少</a></li>
                        <li class="py-2"><a href="/html/category/article-10207.htm" title="宠物粮食加工厂设备生产厂家有哪些呢图片（生产宠物粮的工厂有哪些）">宠物粮食加工厂设备生产厂家有哪些呢图片（生产宠物粮的工厂有哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-9378.htm" title="动物医院住院部管理制度最新（动物医院的工作流程及要点）">动物医院住院部管理制度最新（动物医院的工作流程及要点）</a></li>
                        <li class="py-2"><a href="/html/category/article-9885.htm" title="惠美乐和一品康消毒柜哪个好用(惠美乐和一品康消毒柜哪个好一点)">惠美乐和一品康消毒柜哪个好用(惠美乐和一品康消毒柜哪个好一点)</a></li>
                        <li class="py-2"><a href="/html/category/article-9609.htm" title="国内动物医院（国内动物医院排名）">国内动物医院（国内动物医院排名）</a></li>
                        <li class="py-2"><a href="/html/category/article-9792.htm" title="宠物粮进货渠道在哪里啊知乎（宠物粮进货平台）">宠物粮进货渠道在哪里啊知乎（宠物粮进货平台）</a></li>
                        <li class="py-2"><a href="/html/category/article-9930.htm" title="动物怎么办理疫苗证明书（动物疫苗证去哪里办怎么办）">动物怎么办理疫苗证明书（动物疫苗证去哪里办怎么办）</a></li>
                        <li class="py-2"><a href="/html/category/article-9011.htm" title="动物医院申请网站官网（动物医院条件）">动物医院申请网站官网（动物医院条件）</a></li>
                        <li class="py-2"><a href="/html/category/article-9148.htm" title="成人如何考取兽医证没有学历的（成人怎么考执业兽医师）">成人如何考取兽医证没有学历的（成人怎么考执业兽医师）</a></li>
                        <li class="py-2"><a href="/html/category/article-9701.htm" title="学美容美发的正规学校推荐（学美容美发的正规学校推荐西安）">学美容美发的正规学校推荐（学美容美发的正规学校推荐西安）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">22</span> <a href="/html/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/website/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/website/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/website/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/website/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/website/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/website/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/website/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>