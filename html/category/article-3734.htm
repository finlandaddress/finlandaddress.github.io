<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-3734.htm" />
    <title>面试官：@Transactional 注解是如何实现的？面试必问！ - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>面试官：@Transactional 注解是如何实现的？面试必问！</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<div id="content_views" class="htmledit_views"> <div id="js_content"> <p style="text-align:left;"><strong></strong><strong>点击关注公众号，Java干货</strong><strong>及时送达</strong><img decoding="async" src="http://img.555519.xyz/uploads/20230206/3bb68af096483f40c8f67a5dfd1314c1.jpg" alt="面试官：@Transactional 注解是如何实现的？面试必问！"></p> <h2>@Transactional注解简介</h2> <p><code>@Transactional</code>是spring中声明式事务管理的注解配置方式，相信这个注解的作用大家都很清楚。<code>@Transactional</code>注解可以帮助我们把事务开启、提交或者回滚的操作，通过aop的方式进行管理。</p> <p>通过<code>@Transactional</code>注解就能让spring为我们管理事务，免去了重复的事务管理逻辑，减少对业务代码的侵入，使我们开发人员能够专注于业务层面开发。</p> <p> <img decoding="async" src="http://img.555519.xyz/uploads/20230206/fd91fff6485225409d780e00d5ebaa09.jpg" alt="面试官：@Transactional 注解是如何实现的？面试必问！"></p> <p>我们知道实现@Transactional原理是基于spring aop，aop又是动态代理模式的实现，通过对源码的阅读，总结出下面的步骤来了解实际中，在spring 是如何利用aop来实现@Transactional的功能的。</p> <h2>spring中声明式事务实现原理猜想</h2> <p>首先，对于spring中aop实现原理有了解的话，应该知道想要对一个方法进行代理的话，肯定需要定义切点。在@Transactional的实现中，同样如此，spring为我们定义了以 @Transactional 注解为植入点的切点，这样才能知道@Transactional注解标注的方法需要被代理。</p> <p>有了切面定义之后，在spring的bean的初始化过程中，就需要对实例化的bean进行代理，并且生成代理对象。</p> <p>生成代理对象的代理逻辑中，进行方法调用时，需要先获取切面逻辑，@Transactional注解的切面逻辑类似于@Around，在spring中是实现一种类似代理逻辑。</p> <p> <img decoding="async" src="http://img.555519.xyz/uploads/20230206/64e9aed3a2294e14b4cd92d19889ce49.jpg" alt="面试官：@Transactional 注解是如何实现的？面试必问！"></p> <h2>@Transactional作用</h2> <p>根据上面的原理猜想，下面简单介绍每个步骤的源码以进行验证。推荐一个 Spring Boot 基础教程及实战示例：https://github.com/javastacks/spring-boot-best-practice</p> <p>首先是@Transactional，作用是定义代理植入点。我们知道代理对象创建的通过<code>BeanPostProcessor</code>的实现类<code>AnnotationAwareAspectJAutoProxyCreator</code>的<code>postProcessAfterInstantiation</code>方法来实现个，如果需要进行代理，那么在这个方法就会返回一个代理对象给容器，同时判断植入点也是在这个方法中。</p> <p>那么下面开始分析，在配置好注解驱动方式的事务管理之后，spring会在ioc容器创建一个<code>BeanFactoryTransactionAttributeSourceAdvisor</code>实例，这个实例可以看作是一个切点，在判断一个bean在初始化过程中是否需要创建代理对象，都需要验证一次<code>BeanFactoryTransactionAttributeSourceAdvisor</code>是否是适用这个bean的切点。如果是，就需要创建代理对象，并且把<code>BeanFactoryTransactionAttributeSourceAdvisor</code>实例注入到代理对象中。</p> <p>前文我们知道在<code>AopUtils#findAdvisorsThatCanApply</code>中判断切面是否适用当前bean，可以在这个地方断点分析调用堆栈，<code>AopUtils#findAdvisorsThatCanApply</code>一致调用，最终通过以下代码判断是否适用切点。</p> <ul> <li> <p><code>AbstractFallbackTransactionAttributeSource#computeTransactionAttribute(Method method, Class<?> targetClass)</code> 这里可以根据参数打上条件断点进行调试分析调用栈，targetClass就是目标class …一系列调用</p> </li> <li> <p>最终<code>SpringTransactionAnnotationParser#parseTransactionAnnotation(java.lang.reflect.AnnotatedElement)</code></p> </li> </ul> <pre class="has"><code class="language-go">@Override public&nbsp;TransactionAttribute&nbsp;parseTransactionAnnotation(AnnotatedElement&nbsp;ae)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;//这里就是分析Method是否被@Transactional注解标注，有的话，不用说BeanFactoryTransactionAttributeSourceAdvisor适配当前bean，进行代理，并且注入切点 &nbsp;&nbsp;&nbsp;&nbsp;//BeanFactoryTransactionAttributeSourceAdvisor &nbsp;&nbsp;&nbsp;AnnotationAttributes&nbsp;attributes&nbsp;=&nbsp;AnnotatedElementUtils.getMergedAnnotationAttributes(ae,&nbsp;Transactional.class); &nbsp;&nbsp;&nbsp;if&nbsp;(attributes&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;parseTransactionAnnotation(attributes); &nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null; &nbsp;&nbsp;&nbsp;} }</code></pre> <p>上面就是判断是否需要根据@Transactional进行代理对象创建的判断过程。@Transactional的作用一个就是标识方法需要被代理，一个就是携带事务管理需要的一些属性信息。</p> <p><strong>点击关注公众号，Java干货</strong><strong>及时送达</strong></p> <h2>动态代理逻辑实现</h2> <p>【aop实现原理分析】中知道，aop最终的代理对象的代理方法是</p> <ul> <li> <p><code>DynamicAdvisedInterceptor#intercept</code></p> </li> </ul> <p>所以我们可以在这个方法断点分析代理逻辑。</p> <pre class="has"><code class="language-go">@Override public&nbsp;Object&nbsp;intercept(Object&nbsp;proxy,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;args,&nbsp;MethodProxy&nbsp;methodProxy)&nbsp;throws&nbsp;Throwable&nbsp;{ &nbsp;&nbsp;&nbsp;Object&nbsp;oldProxy&nbsp;=&nbsp;null; &nbsp;&nbsp;&nbsp;boolean&nbsp;setProxyContext&nbsp;=&nbsp;false; &nbsp;&nbsp;&nbsp;Class<?>&nbsp;targetClass&nbsp;=&nbsp;null; &nbsp;&nbsp;&nbsp;Object&nbsp;target&nbsp;=&nbsp;null; &nbsp;&nbsp;&nbsp;try&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.advised.exposeProxy)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Make&nbsp;invocation&nbsp;available&nbsp;if&nbsp;necessary. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldProxy&nbsp;=&nbsp;AopContext.setCurrentProxy(proxy); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setProxyContext&nbsp;=&nbsp;true; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;May&nbsp;be&nbsp;null.&nbsp;Get&nbsp;as&nbsp;late&nbsp;as&nbsp;possible&nbsp;to&nbsp;minimize&nbsp;the&nbsp;time&nbsp;we &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;"own"&nbsp;the&nbsp;target,&nbsp;in&nbsp;case&nbsp;it&nbsp;comes&nbsp;from&nbsp;a&nbsp;pool... &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target&nbsp;=&nbsp;getTarget(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(target&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetClass&nbsp;=&nbsp;target.getClass(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//follow &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List<Object>&nbsp;chain&nbsp;=&nbsp;this.advised.getInterceptorsAndDynamicInterceptionAdvice(method,&nbsp;targetClass); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;retVal; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Check&nbsp;whether&nbsp;we&nbsp;only&nbsp;have&nbsp;one&nbsp;InvokerInterceptor:&nbsp;that&nbsp;is, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;no&nbsp;real&nbsp;advice,&nbsp;but&nbsp;just&nbsp;reflective&nbsp;invocation&nbsp;of&nbsp;the&nbsp;target. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(chain.isEmpty()&nbsp;&&&nbsp;Modifier.isPublic(method.getModifiers()))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;We&nbsp;can&nbsp;skip&nbsp;creating&nbsp;a&nbsp;MethodInvocation:&nbsp;just&nbsp;invoke&nbsp;the&nbsp;target&nbsp;directly. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Note&nbsp;that&nbsp;the&nbsp;final&nbsp;invoker&nbsp;must&nbsp;be&nbsp;an&nbsp;InvokerInterceptor,&nbsp;so&nbsp;we&nbsp;know &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;it&nbsp;does&nbsp;nothing&nbsp;but&nbsp;a&nbsp;reflective&nbsp;operation&nbsp;on&nbsp;the&nbsp;target,&nbsp;and&nbsp;no&nbsp;hot &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;swapping&nbsp;or&nbsp;fancy&nbsp;proxying. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;argsToUse&nbsp;=&nbsp;AopProxyUtils.adaptArgumentsIfNecessary(method,&nbsp;args); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;methodProxy.invoke(target,&nbsp;argsToUse); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;We&nbsp;need&nbsp;to&nbsp;create&nbsp;a&nbsp;method&nbsp;invocation... &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;new&nbsp;CglibMethodInvocation(proxy,&nbsp;target,&nbsp;method,&nbsp;args,&nbsp;targetClass,&nbsp;chain,&nbsp;methodProxy).proceed(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;processReturnType(proxy,&nbsp;target,&nbsp;method,&nbsp;retVal); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;retVal; &nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;finally&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(target&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;releaseTarget(target); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(setProxyContext)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Restore&nbsp;old&nbsp;proxy. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AopContext.setCurrentProxy(oldProxy); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;} }</code></pre> <p>通过分析 <code>List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)</code>返回的是TransactionInterceptor,利用TransactionInterceptor是如何实现代理逻辑调用的？</p> <p>跟踪<code>new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();</code></p> <p>发现最终是调用<code>TransactionInterceptor#invoke</code>方法，并且把CglibMethodInvocation注入到invoke方法中，从上面可以看到<code>CglibMethodInvocation</code>是包装了目标对象的方法调用的所有必须信息，因此，在<code>TransactionInterceptor#invoke</code>里面也是可以调用目标方法的，并且还可以实现类似@Around的逻辑，在目标方法调用前后继续注入一些其他逻辑，比如事务管理逻辑。</p> <p>另外，Spring 系列面试题和答案全部整理好了，微信搜索Java技术栈，在后台发送：面试，可以在线阅读。</p> <h2>TransactionInterceptor–最终事务管理者</h2> <p>下面看代码。</p> <ul> <li> <p><code>TransactionInterceptor#invoke</code></p> </li> </ul> <pre class="has"><code class="language-go">@Override public&nbsp;Object&nbsp;invoke(final&nbsp;MethodInvocation&nbsp;invocation)&nbsp;throws&nbsp;Throwable&nbsp;{ &nbsp;//&nbsp;Work&nbsp;out&nbsp;the&nbsp;target&nbsp;class:&nbsp;may&nbsp;be&nbsp;{@code&nbsp;null}. &nbsp;//&nbsp;The&nbsp;TransactionAttributeSource&nbsp;should&nbsp;be&nbsp;passed&nbsp;the&nbsp;target&nbsp;class &nbsp;//&nbsp;as&nbsp;well&nbsp;as&nbsp;the&nbsp;method,&nbsp;which&nbsp;may&nbsp;be&nbsp;from&nbsp;an&nbsp;interface. &nbsp;Class<?>&nbsp;targetClass&nbsp;=&nbsp;(invocation.getThis()&nbsp;!=&nbsp;null&nbsp;?&nbsp;AopUtils.getTargetClass(invocation.getThis())&nbsp;:&nbsp;null);  &nbsp;//&nbsp;Adapt&nbsp;to&nbsp;TransactionAspectSupport's&nbsp;invokeWithinTransaction... &nbsp;return&nbsp;invokeWithinTransaction(invocation.getMethod(),&nbsp;targetClass,&nbsp;new&nbsp;InvocationCallback()&nbsp;{ &nbsp;&nbsp;@Override &nbsp;&nbsp;public&nbsp;Object&nbsp;proceedWithInvocation()&nbsp;throws&nbsp;Throwable&nbsp;{ &nbsp;&nbsp;&nbsp;return&nbsp;invocation.proceed(); &nbsp;&nbsp;} &nbsp;}); }</code></pre> <p>继续跟踪invokeWithinTransaction，下面的代码中其实就可以看出一些逻辑端倪，就是我们猜想的实现方式，事务管理。</p> <pre class="has"><code class="language-go">protected&nbsp;Object&nbsp;invokeWithinTransaction(Method&nbsp;method,&nbsp;Class<?>&nbsp;targetClass,&nbsp;final&nbsp;InvocationCallback&nbsp;invocation) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;Throwable&nbsp;{  &nbsp;&nbsp;&nbsp;//&nbsp;If&nbsp;the&nbsp;transaction&nbsp;attribute&nbsp;is&nbsp;null,&nbsp;the&nbsp;method&nbsp;is&nbsp;non-transactional. &nbsp;&nbsp;&nbsp;final&nbsp;TransactionAttribute&nbsp;txAttr&nbsp;=&nbsp;getTransactionAttributeSource().getTransactionAttribute(method,&nbsp;targetClass); &nbsp;&nbsp;&nbsp;final&nbsp;PlatformTransactionManager&nbsp;tm&nbsp;=&nbsp;determineTransactionManager(txAttr); &nbsp;&nbsp;&nbsp;final&nbsp;String&nbsp;joinpointIdentification&nbsp;=&nbsp;methodIdentification(method,&nbsp;targetClass);  &nbsp;&nbsp;&nbsp;if&nbsp;(txAttr&nbsp;==&nbsp;null&nbsp;||&nbsp;!(tm&nbsp;instanceof&nbsp;CallbackPreferringPlatformTransactionManager))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Standard&nbsp;transaction&nbsp;demarcation&nbsp;with&nbsp;getTransaction&nbsp;and&nbsp;commit/rollback&nbsp;calls. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//开启事务 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TransactionInfo&nbsp;txInfo&nbsp;=&nbsp;createTransactionIfNecessary(tm,&nbsp;txAttr,&nbsp;joinpointIdentification); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;retVal&nbsp;=&nbsp;null; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;This&nbsp;is&nbsp;an&nbsp;around&nbsp;advice:&nbsp;Invoke&nbsp;the&nbsp;next&nbsp;interceptor&nbsp;in&nbsp;the&nbsp;chain. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;This&nbsp;will&nbsp;normally&nbsp;result&nbsp;in&nbsp;a&nbsp;target&nbsp;object&nbsp;being&nbsp;invoked. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//方法调用 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;invocation.proceedWithInvocation(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch&nbsp;(Throwable&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;target&nbsp;invocation&nbsp;exception &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//回滚事务 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;completeTransactionAfterThrowing(txInfo,&nbsp;ex); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;ex; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finally&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cleanupTransactionInfo(txInfo); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//提交事务 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;commitTransactionAfterReturning(txInfo); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;retVal; &nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;It's&nbsp;a&nbsp;CallbackPreferringPlatformTransactionManager:&nbsp;pass&nbsp;a&nbsp;TransactionCallback&nbsp;in. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;result&nbsp;=&nbsp;((CallbackPreferringPlatformTransactionManager)&nbsp;tm).execute(txAttr, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;TransactionCallback<Object>()&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;doInTransaction(TransactionStatus&nbsp;status)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TransactionInfo&nbsp;txInfo&nbsp;=&nbsp;prepareTransactionInfo(tm,&nbsp;txAttr,&nbsp;joinpointIdentification,&nbsp;status); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;invocation.proceedWithInvocation(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch&nbsp;(Throwable&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(txAttr.rollbackOn(ex))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;A&nbsp;RuntimeException:&nbsp;will&nbsp;lead&nbsp;to&nbsp;a&nbsp;rollback. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(ex&nbsp;instanceof&nbsp;RuntimeException)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;(RuntimeException)&nbsp;ex; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ThrowableHolderException(ex); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;A&nbsp;normal&nbsp;return&nbsp;value:&nbsp;will&nbsp;lead&nbsp;to&nbsp;a&nbsp;commit. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;ThrowableHolder(ex); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finally&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cleanupTransactionInfo(txInfo); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Check&nbsp;result:&nbsp;It&nbsp;might&nbsp;indicate&nbsp;a&nbsp;Throwable&nbsp;to&nbsp;rethrow. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(result&nbsp;instanceof&nbsp;ThrowableHolder)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;((ThrowableHolder)&nbsp;result).getThrowable(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch&nbsp;(ThrowableHolderException&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;ex.getCause(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;} }</code></pre> <h2>总结</h2> <p>最终可以总结一下整个流程，跟开始的猜想对照。另外，关注公众号Java技术栈，在后台回复：面试，可以获取我整理的 Spring 系列面试题和答案，非常齐全。</p> <p> <img decoding="async" src="http://img.555519.xyz/uploads/20230206/fae51ace0b8e8fb29597b45e99988c06.jpg" alt="面试官：@Transactional 注解是如何实现的？面试必问！"></p> <p>分析源码后对照</p> <p> <img decoding="async" src="http://img.555519.xyz/uploads/20230206/086e284a37bca08e3becc75291fd0227.jpg" alt="面试官：@Transactional 注解是如何实现的？面试必问！"></p> <p>原文链接：https://blog.csdn.net/qq_20597727/article/details/84868035</p> <p>版权声明：本文为CSDN博主「一撸向北」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</p> <p style="text-align:left;"></p> <p style="text-align:left;"><strong style="font-size: 16px; text-align: center;">关注Java技术栈看更多干货</strong><span style="font-size: 16px; text-align: center;">获取&nbsp;Spring Boot&nbsp;实战笔记！</span></p> <p> </div> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3733.htm">Springboot使用@Cacheable注解实现数据缓存</a></p>
                                                <p>下一个：<a href="/html/category/article-3759.htm">让我们写一个 Win32 文本编辑器吧 &#8211; 2. 计划和显示</a></p>
                                            </div>

                                        <div class="panel panel-default mt-5">
                        <div class="panel-heading">
                            <h3 class="m-0">推荐文章</h3>
                        </div>
                        <div class="panel-body">
                            <ul class="p-0 x-0">
                                                                <li class="py-2"><a href="/html/category/article-788.htm">深入浅出Vue3 Composition API</a></li>
                                                                <li class="py-2"><a href="/html/category/article-781.htm">一文搞定CompletableFuture并行处理，成倍缩短查询时间。</a></li>
                                                                <li class="py-2"><a href="/html/category/article-751.htm">Azure Service Fabric 踩坑日志_在线工具</a></li>
                                                                <li class="py-2"><a href="/html/category/article-738.htm">通过源码了解Java的自动装箱拆箱</a></li>
                                                                <li class="py-2"><a href="/html/category/article-731.htm">springboot项目部署好之后第一次启动慢的解决办法</a></li>
                                                                <li class="py-2"><a href="/html/category/article-693.htm">linux执行rm -rf /*命令后的效果原来是这样</a></li>
                                                                <li class="py-2"><a href="/html/category/article-636.htm">python中借助subprocess产生和关闭子进程</a></li>
                                                                <li class="py-2"><a href="/html/category/article-630.htm">Zalando Postgres Operator  快速上手</a></li>
                                                                <li class="py-2"><a href="/html/category/article-583.htm">C#语法糖系列聊聊 ref，in 修饰符底层玩法</a></li>
                                                                <li class="py-2"><a href="/html/category/article-559.htm">JavaScript如何查找两个字符串之间的共享元素</a></li>
                                                            </ul>
                        </div>
                    </div>
                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7676.htm" title="动物用狂犬病疫苗的作用（动物用狂犬病疫苗的作用是什么）">动物用狂犬病疫苗的作用（动物用狂犬病疫苗的作用是什么）</a></li>
                        <li class="py-2"><a href="/html/category/article-7585.htm" title="鱼竿路亚十大名牌排名">鱼竿路亚十大名牌排名</a></li>
                        <li class="py-2"><a href="/html/category/article-7492.htm" title="北欧风格家具品牌有哪些(北欧风格家具品牌有哪些牌子)">北欧风格家具品牌有哪些(北欧风格家具品牌有哪些牌子)</a></li>
                        <li class="py-2"><a href="/html/category/article-6940.htm" title="为什么常熟羊毛羊绒大衣这两年发展得这么好呢(常熟的羊绒大衣批发在哪里)">为什么常熟羊毛羊绒大衣这两年发展得这么好呢(常熟的羊绒大衣批发在哪里)</a></li>
                        <li class="py-2"><a href="/html/category/article-7677.htm" title="领养宠物协议书范本大全最新 领养宠物协议书范本大全最新版">领养宠物协议书范本大全最新 领养宠物协议书范本大全最新版</a></li>
                        <li class="py-2"><a href="/html/category/article-7216.htm" title="动物疫苗研究现状（动物疫苗研究现状分析）">动物疫苗研究现状（动物疫苗研究现状分析）</a></li>
                        <li class="py-2"><a href="/html/category/article-7907.htm" title="cctv16奥林匹克频道2021开播（燃爆了）cctv16奥林匹克频道开播了，新三国 貂蝉，cctv体育频道，">cctv16奥林匹克频道2021开播（燃爆了）cctv16奥林匹克频道开播了，新三国 貂蝉，cctv体育频道，</a></li>
                        <li class="py-2"><a href="/html/category/article-7769.htm" title="不宜养猫的4个属相女人图片（养猫不能养的植物图）">不宜养猫的4个属相女人图片（养猫不能养的植物图）</a></li>
                        <li class="py-2"><a href="/html/category/article-6618.htm" title="中国农大动物医院的咨询电话是多少号码（中国农业大学动物医院排班表）">中国农大动物医院的咨询电话是多少号码（中国农业大学动物医院排班表）</a></li>
                        <li class="py-2"><a href="/html/category/article-7538.htm" title="领养宠物狗app（领养宠物狗免费的地方）">领养宠物狗app（领养宠物狗免费的地方）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>