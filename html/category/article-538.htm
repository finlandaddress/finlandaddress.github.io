<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-538.htm" />
    <title>原生实现C#和Lua相互调用-Unity3D可用 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>原生实现C#和Lua相互调用-Unity3D可用</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				<p><strong>引言<br /></strong></p> <p><strong>&nbsp;&nbsp;&nbsp;&nbsp;本篇简单介绍如何在C#中执行Lua脚本，传递数据到Lua中使用，以及Lua中调用C#导出的方法等。在Unity中开发测试，并打IL2CPP的Android包在模拟器上运行通过。Lua版本使用的是Lua5.1.5。</strong></p> <p><strong>一、编译Lua动态链接库</strong></p> <p><strong>&nbsp;&nbsp;1. 编译Windows下使用的DLL文件</strong></p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用<strong>VS2015</strong>创建一个空的动态链接库项目，删除里面默认创建的几个文件(如果想自定义拓展可用保留)，然后把Lua的源码拷贝进来，添加到项目工程中，编译宏需要配置<strong>LUA_BUILD_AS_DLL</strong>和<strong>_CRT_SECURE_NO_WARNINGS</strong>。然后就可以编译x86和x64的DLL动态库，整体步骤简单易操作。</p> <p><strong>2. 编译Android下使用的SO文件</strong></p> <p>&nbsp; &nbsp; &nbsp; &nbsp; 通过<strong>NDK</strong>编译Android需要的so动态库，因此需要手写<strong><span title="Application.mk">Application.mk</span></strong>和<strong>Android.mk</strong>两个mk文件，下面是我使用的两个文件的内容，创建放在上面VS的工程里面即可，路径是在lua源码src的上一层目录。</p> <div class="cnblogs_Highlighter"> <pre class="brush:bash;gutter:true;"># Application.mk APP_PLATFORM = android-23 APP_ABI := armeabi-v7a arm64-v8a APP_STL := stlport_shared</pre> </div> <div class="cnblogs_Highlighter"> <pre class="brush:bash;gutter:true;"># Android.mk LOCAL_PATH := $(call my-dir) include $(CLEAR_VARS) MY_FILES_PATH  :=  $(LOCAL_PATH)/src MY_FILES_SUFFIX := %.c MY_UN_INCLUDE := %lua.c %luac.c # 递归遍历目录下的所有的文件 rwildcard=$(wildcard $1$2) $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2)) # 获取相应的源文件 MY_ALL_FILES := $(foreach src_path,$(MY_FILES_PATH), $(call rwildcard,$(src_path),*.*) )  MY_SRC_LIST  := $(filter $(MY_FILES_SUFFIX),$(MY_ALL_FILES))  MY_SRC_LIST  := $(filter-out $(MY_UN_INCLUDE),$(MY_SRC_LIST))  MY_SRC_LIST  := $(MY_SRC_LIST:$(LOCAL_PATH)/%=%) LOCAL_SRC_FILES = $(MY_SRC_LIST) #打印编译信息 $(warning 'src_list='$(LOCAL_SRC_FILES)) LOCAL_MODULE    := CSharpLua LOCAL_LDLIBS += -ldl LOCAL_CFLAGS := $(L_CFLGAS) include $(BUILD_SHARED_LIBRARY)</pre> </div> <p>&nbsp; &nbsp; 将上面的mk文件放置完成后，打开CMD命令行，执行ndk编译。由于并不是在Android的jni项目目录，因此执行命令会有所不同，可以使用下面的命令执行生成，等待ndk执行完成后就生成了需要的so库。</p> <div class="cnblogs_Highlighter"> <pre class="brush:bash;gutter:true;">ndk-build NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=./Android.mk NDK_APPLICATION_MK=./Application.mk</pre> </div> <p><strong>二、编写C#使用的API</strong></p> <p><strong></strong><strong>&nbsp;1. 动态链接库在Unity中的存放位置。</strong></p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Unity项目<strong>Assets</strong>目录里面创建<strong>Plugins</strong>目录，用于存放不同平台的DLL库。Windows需要的DLL存放的目录为<strong>Assets/<strong>Plugins</strong>/x86和Assets/<strong>Plugins</strong>/x86_64</strong>；Android需要的SO文件存放的目录为<strong>Assets/Android/[libs/arm64-v8a]</strong>括号里面的目录其实就是上面NDK编译后生成的路径。</p> <p><strong>&nbsp;&nbsp;&nbsp;2. 编写C#的API[LuaDll.cs]</strong></p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大部分的动态库中的接口直接使用以下这种方式即可使用，使用<strong>IntPtr</strong>来表示<strong>lua_State*</strong>对象，传入参数<strong>char*</strong>可用使用<strong>byte[]</strong>或者<strong>string，</strong>但是会有一点点区别。</p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">[DllImport("CSharpLua", EntryPoint = "luaL_newstate")] public static extern IntPtr luaL_newstate(); [DllImport("CSharpLua", EntryPoint = "luaL_openlibs")] public static extern void luaL_openlibs(IntPtr L); [DllImport("CSharpLua", EntryPoint = "luaL_loadbuffer")] public static extern int luaL_loadbuffer(IntPtr L, byte[] buff, uint size, string name); [DllImport("CSharpLua", EntryPoint = "lua_call")] public static extern void lua_call(IntPtr L, int nargs, int nresults); [DllImport("CSharpLua", EntryPoint = "lua_pcall")] public static extern int lua_pcall(IntPtr L, int nargs, int nresults, int errfunc);</pre> </div> <p><strong>3.需要注意的几个地方</strong></p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 返回char*时，不可直接使用string替换，否则调用会导致崩溃，因此需要像下面代码展示的那样进行一下转换才可以使用。</p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">[DllImport("CSharpLua", EntryPoint = "lua_tolstring")] private static extern IntPtr _lua_tolstring(IntPtr L, int idx, ref uint size); public static string lua_tolstring(IntPtr L, int idx, ref uint size) {     IntPtr buffer = _lua_tolstring(L, idx, ref size);     return Marshal.PtrToStringAnsi(buffer); }</pre> </div> <p>　　2. C#函数传递给Lua使用时，需要使用delegate委托类型。</p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">public delegate int LuaFunction(IntPtr L); [DllImport("CSharpLua", EntryPoint = "lua_pushcclosure")] public static extern void lua_pushcclosure(IntPtr L, LuaFunction func, int idx); public static void lua_pushcfunction(IntPtr L, LuaFunction func) {    lua_pushcclosure(L, func, 0); }</pre> </div> <p>　　3. 在lua源码中定义的宏代码是无法使用的，会提示找不到，需要在C#中手动实现，例如下面展示的2个宏。</p> <div class="cnblogs_Highlighter"> <pre class="brush:cpp;gutter:true;">#define lua_setglobal(L,s)  lua_setfield(L, LUA_GLOBALSINDEX, (s)) #define lua_getglobal(L,s)  lua_getfield(L, LUA_GLOBALSINDEX, (s))</pre> </div> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">[DllImport("CSharpLua", EntryPoint = "lua_getfield")] public static extern void lua_getfield(IntPtr L, int idx, string s); public static void lua_getglobal(IntPtr L, string s) {    lua_getfield(L, LUA_GLOBALSINDEX, s); } [DllImport("CSharpLua", EntryPoint = "lua_setfield")] public static extern void lua_setfield(IntPtr L, int idx, string s); public static void lua_setglobal(IntPtr L, string s) {    lua_setfield(L, LUA_GLOBALSINDEX, s); }</pre> </div> <p>　　4. 如需要将C#的类实例对象即<strong>userdata</strong>传递给lua，需要在C#中转换成IntPtr后传递，Lua返回的则需要通过IntPtr转换回C#的实例对象。</p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">[DllImport("CSharpLua", EntryPoint = "lua_pushlightuserdata")] public static extern void _lua_pushlightuserdata(IntPtr L, IntPtr p); public static void lua_pushlightuserdata&lt;T&gt;(IntPtr L, T p) {     IntPtr obj = Marshal.GetIUnknownForObject(p);     _lua_pushlightuserdata(L, obj); } [DllImport("CSharpLua", EntryPoint = "lua_touserdata")] public static extern IntPtr _lua_touserdata(IntPtr L, int idx); public static T lua_touserdata&lt;T&gt;(IntPtr L, int idx) {    IntPtr p = _lua_touserdata(L, idx);    return (T)Marshal.GetObjectForIUnknown(p); }</pre> </div> <p><strong>三、C#与Lua的相互调用举例</strong></p> <p><strong>&nbsp;&nbsp;1.&nbsp;C#中创建Lua环境</strong></p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">IntPtr L = LuaDll.luaL_newstate(); LuaDll.luaL_openlibs(L);</pre> </div> <p><strong>2. 加载Lua代码并执行，调用Lua的函数及向Lua传递参数。</strong></p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">var data = Resources.Load&lt;TextAsset&gt;(lua_file); int rc = LuaDll.luaL_loadbuffer(L, data.bytes, (uint)data.bytes.Length, lua_file); rc = LuaDll.lua_pcall(L, 0, 0, 0) LuaDll.lua_getglobal(L, "main"); // 传递参数 LuaDll.lua_pushinteger(L, 3333); LuaDll.lua_pushnumber(L, 3.3); // 执行main方法 int i = LuaDll.lua_pcall(L, 2, 0, 0);</pre> </div> <p><strong>3. 将C#函数提供给Lua使用，需要使用静态方法参考上面LuaFunction的定义。</strong></p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">LuaDll.lua_pushcfunction(L, LuaPrint); LuaDll.lua_setglobal(L, "print"); [MonoPInvokeCallback]   // 这个主要是在Android上需要。 static int LuaPrint(IntPtr L) {   Debug.Log(".....");   return 0; }</pre> </div> <p><strong>4. Lua代码调用C#方法并提供回调，由C#函数调用。</strong></p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">static int FindAndBind(IntPtr L) {    GameObject go = LuaDll.lua_touserdata&lt;GameObject&gt;(L, 1);    string path = LuaDll.lua_tostring(L, 2);    // 这里将lua的函数放到LUA_REGISTRYINDEX上    int idx = LuaDll.luaL_refEx(L);    Transform t = go.transform.Find(path);    Button btn = t.GetComponent&lt;Button&gt;();    btn.onClick.AddListener(delegate() {      // 从LUA_REGISTRYINDEX栈获取lua的函数进行执行。      LuaDll.lua_rawgeti(L, LuaDll.LUA_REGISTRYINDEX, idx);      LuaDll.lua_pcall(L, 0, 0, 0);    });    return 0; }</pre> </div> <p><strong>四、总结</strong></p> <p>&nbsp;&nbsp;&nbsp;&nbsp;总体来说交互调用还是比较的简单方便，跟使用C/C++与Lua交互差不多。我仅仅简单使用Lua源码进行编译动态库使用，可以方便的替换各个版本的lua进行使用。C#导出方法给Lua使用也相对简单，但是Unity中使用Lua的时候，不可能每个类例如GameObject、Transform等都手动写导出的代码给Lua使用。这块就可以去看tolua、xlua的实现，需要考虑很多东西。</p> <p></p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-537.htm">restFul风格传参, 参数中带斜杠/问题</a></p>
                                                <p>下一个：<a href="/html/category/article-539.htm">IDEA启动：Internal error. Please refer to https://jb.gg/ide/critical-startup-errors</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4406.htm" title="国外宠物品牌（国外宠物品牌排行榜）">国外宠物品牌（国外宠物品牌排行榜）</a></li>
                        <li class="py-2"><a href="/html/category/article-4297.htm" title="延吉市安泰宠物医院电话号码是多少（延吉市安泰宠物医院电话号码是多少号）">延吉市安泰宠物医院电话号码是多少（延吉市安泰宠物医院电话号码是多少号）</a></li>
                        <li class="py-2"><a href="/html/category/article-1355.htm" title="字符串连接的Java程序。">字符串连接的Java程序。</a></li>
                        <li class="py-2"><a href="/html/category/article-4373.htm" title="属马的适不适合养猫（属马的可以养猫吗?）">属马的适不适合养猫（属马的可以养猫吗?）</a></li>
                        <li class="py-2"><a href="/html/category/article-2827.htm" title="用纯RUST实现音视频流媒体服务(RTMP/HTTPFLV/HLS)XIU">用纯RUST实现音视频流媒体服务(RTMP/HTTPFLV/HLS)XIU</a></li>
                        <li class="py-2"><a href="/html/category/article-1915.htm" title="vue npm run lint修改错误配置">vue npm run lint修改错误配置</a></li>
                        <li class="py-2"><a href="/html/category/article-1916.htm" title="Python 3.10 的一些新特性">Python 3.10 的一些新特性</a></li>
                        <li class="py-2"><a href="/html/category/article-1634.htm" title="SM2密码算法数据结构">SM2密码算法数据结构</a></li>
                        <li class="py-2"><a href="/html/category/article-3759.htm" title="让我们写一个 Win32 文本编辑器吧 &#8211; 2. 计划和显示">让我们写一个 Win32 文本编辑器吧 &#8211; 2. 计划和显示</a></li>
                        <li class="py-2"><a href="/html/category/article-1633.htm" title="javaScript深拷贝和浅拷贝简单梳理_在线工具">javaScript深拷贝和浅拷贝简单梳理_在线工具</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>