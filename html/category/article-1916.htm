<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://finlandaddress.github.io/html/category/article-1916.htm" />
    <title>Python 3.10 的一些新特性 - FinlandAddress</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/finlandaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/flaticon.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/finlandaddress/style.css" rel="stylesheet" />
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a045e5bb3ae69629060e7ce2a4b98902";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Finland Address<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/html/category/" class="nav-link"><span>文章分类</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" src="/assets/addons/xcblog/img/finlandaddress/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>Python 3.10 的一些新特性</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	  				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> <a href="#title-0" title="延迟类型注释的执行">延迟类型注释的执行</a></li> <li><i class="be be-arrowright"></i> <a href="#title-1" title="新增类型注释联合操作符">新增类型注释联合操作符</a></li> <li><i class="be be-arrowright"></i> <a href="#title-2" title="TypeAlias 注释">TypeAlias 注释</a></li> <li><i class="be be-arrowright"></i> <a href="#title-3" title="函数 zip() 增加 strict 参数">函数 zip() 增加 strict 参数</a></li> <li><i class="be be-arrowright"></i> <a href="#title-4" title="新增整数的位计数器 int.bit_count()">新增整数的位计数器 int.bit_count()</a></li> <li><i class="be be-arrowright"></i> <a href="#title-5" title="字典的视图增加一个属性">字典的视图增加一个属性</a></li> </ul><span class="log-zd"><span class="log-close"><a title="隐藏目录"><i class="be be-cross"></i><strong>目录</strong></a></span></span></div>  			</div> <div id="content_views" class="htmledit_views"> <div id="js_content"> <p style="text-align: justify">Python 3.10.0a2 版本已经于 2020-11-04 发布，因此我们可以窥见 Python 3.10 的一些新特性。这些新特性很可能会改变未来的 Python 生态系统，使其朝着更明确，更易读的方向发展，同时保持我们熟知和喜欢的易用性。</p> <p style="text-align: justify">由于采用了新的发行计划：PEP 602 -- Annual Release Cycle for Python，我们可以看到更短的开发窗口，我们有望在 2021 年 10 月使用今天分享的这些新特性。</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads/20230223/32f99a890e0e2533f248a64aa52f5750.jpg" alt="Python 3.10 的一些新特性"/></p><figcaption>   PEP 602<br />   <br /></figcaption><h3>1、类型注释的进一步扩展</h3> <p style="text-align: justify">3.9 版对 Python 中的类型提示和注释进行了大幅度修改和清理，类型提示这似乎是一种持续的趋势，在 3.10 中得到进一步扩展，目的很明显，是为了更好的可读性，无需看代码即可得知变量和函数返回值的类型。</p> <span class="directory"></span><h4 id="title-0">延迟类型注释的执行</h4> <p style="text-align: justify">类型注释的运行通常被认为是在函数定义时执行，这意味着类型注释以自上而下的方式逐行进行检查。</p> <p style="text-align: justify">尽管看起来合乎逻辑，但是这样做有两个问题：</p> <p style="text-align: justify">1、引用尚未定义的类型的类型提示（前向引用）将不起作用，必须以字符串形式表示。也就是说：假如 int 是自定义类型，我们需要编写 "int" 而不是编写 int 。</p> <p style="text-align: justify">2、这会减慢模块导入的速度，因为此时会执行类型提示。</p> <p style="text-align: justify">因此，取而代之的是延迟类型注释，将类型注释将以字符串形式存储在<code>__annotations__</code>中，如果需要这些类型注释可以在运行时通过 <code>typing.get_type_hints()</code> 来解析，也可以通过<code>inspect.signature()</code> 来立即进行解析，这样的好处是可以先执行模块导入，允许前向引用，从而减少初始化时间。</p> <span class="directory"></span><h4 id="title-1">新增类型注释联合操作符</h4> <p style="text-align: justify">3.10 通过 "|" 作为逻辑或操作符。在注释数据类型时，我们可以使用 | 作为或。例如，我们有一个预期为 int 或 float 的变量，可以写为 int | float ，如下所示：</p> <pre class="has"><code class="language-go">def&nbsp;f(x:&nbsp;int&nbsp;|&nbsp;float)&nbsp;-&gt;&nbsp;float: &nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;*&nbsp;3.142 f(1)&nbsp;&nbsp;#&nbsp;pass f(1.5)&nbsp;&nbsp;#&nbsp;pass f('str')&nbsp;&nbsp;#&nbsp;linter&nbsp;will&nbsp;show&nbsp;annotation&nbsp;error </code></pre> <p style="text-align: justify">也可以使用 typing 模块提供的关键字 Union，比如 Union[int, float]</p> <span class="directory"></span><h4 id="title-2">TypeAlias 注释</h4> <p style="text-align: justify">回到前向引用问题，避免前向引用的常见解决方案是将它们编写为字符串。</p> <p style="text-align: justify">但是，将类型写为字符串会在将这些类型分配给变量时引起问题，因为 Python 会假定我们的字符串文字类型注释只是一个字符串。</p> <p style="text-align: justify">在通常使用类型注释的地方使用该类型注释变量将返回错误。例如：</p> <pre class="has"><code class="language-go">MyType&nbsp;=&nbsp;"ClassName"&nbsp;&nbsp;#&nbsp;ClassName&nbsp;is&nbsp;our&nbsp;type&nbsp;annotation def&nbsp;foo()&nbsp;-&gt;&nbsp;MyType: &nbsp;&nbsp;&nbsp;&nbsp;... </code></pre> <p style="text-align: justify">在这里，我们试图将其 MyType 用作类型的别名 ，但是， MyType 它将被读取为字符串值，而不是类型别名。只要 ClassName 在代码的后面定义，这就是有效的。当前情况下，这将引发注释错误。</p> <p style="text-align: justify">为了解决这个问题，添加了一种显式标识 MyType 为类型别名的方法 ：</p> <pre class="has"><code class="language-go">from&nbsp;typing_extensions&nbsp;import&nbsp;TypeAlias MyType:&nbsp;TypeAlias&nbsp;=&nbsp;"ClassName" def&nbsp;foo()&nbsp;-&gt;&nbsp;MyType: &nbsp;&nbsp;&nbsp;&nbsp;... OR MyType:&nbsp;TypeAlias&nbsp;=&nbsp;ClassName&nbsp;#&nbsp;if&nbsp;we&nbsp;have&nbsp;defined&nbsp;ClassName&nbsp;already def&nbsp;foo()&nbsp;-&gt;&nbsp;MyType: &nbsp;&nbsp;&nbsp;&nbsp;... </code></pre> <p style="text-align: justify">这里说下，为什么类型很重要，尽管这当然不是一个巨大的变动，但是看到 Python 开发人员加倍努力以增强类型功能，这真是太酷了。Python 的优势在于其易用性和缺乏陡峭的学习曲线。原因之一是不需要在我们的代码中显式定义类型。</p> <p style="text-align: justify">增强类型注释看起来似乎违反直觉，但是为开发人员 提供定义类型的选项 可以极大地提高代码库的可读性和可维护性。例如，从 Python transformers 库的源代码中可以看到以下说明：</p> <blockquote> <p style="text-align: justify">Even without context, we can read this code and immediately grasp what data we should expect to be fed into these functions, classes, and methods — and exactly which datatypes we should be expecting to return.</p> <p style="text-align: justify">In complex code bases (and even simple ones), type annotation can massively improve readability. Simultaneously, not everyone will want (or need) to use them — so an optional, exception-free functionality strikes a perfect balance.</p> </blockquote> <p style="text-align: justify">意思是即使没有上下文，我们也可以阅读此代码，并立即掌握应将哪些数据期望输入到这些函数，类和方法中，以及确切地期望返回哪些数据类型。</p> <p style="text-align: justify">但在复杂的代码库（甚至简单的代码库）中，类型注释可以大大提高可读性。同时，并不是每个人都希望（或需要）使用它们，因此，这是可选的。这种无异常的功能可以达到完美的平衡。</p> <p style="text-align: justify">这些改进表明 Python 对类型注释功能的承诺，基于此，我们最喜欢的库和我们自己写的代码可以大大提示可阅读性，这会对 Python 生态系统产生长期的正面影响。</p> <h3>2、新增的函数及函数参数的变化</h3> <p style="text-align: justify">除了类型提示功能的扩展外，核心 Python 功能进行了一些更新，如下。</p> <span class="directory"></span><h4 id="title-3">函数 zip() 增加 strict 参数</h4> <p style="text-align: justify">函数 zip() 增加 strict 参数，如果设置 strict = True，而传输的参数的长度不相等将会抛出异常，如下图所示：</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads/20230223/9a25f4760a7b59945f7fb11f5ccb8422.jpg" alt="Python 3.10 的一些新特性"/></p> <p style="text-align: justify">新的 strict 参数不是盲目地截断不匹配的数据，而是使我们能够控制它的行为，这将使很多开发人员免于遭受麻烦。</p> <span class="directory"></span><h4 id="title-4">新增整数的位计数器 int.bit_count()</h4> <p style="text-align: justify">此新方法使我们能够计算整数的二进制表示形式中 1 的个数，在某些场景下这个函数非常实用且高效。</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads/20230223/efb5156bee8e277ede5d0a7bb9946d96.jpg" alt="Python 3.10 的一些新特性"/></p> <p style="text-align: justify">上图中的结果即为整数以二进制位为 1 的个数：</p> <pre class="has"><code class="language-go">0&nbsp;&nbsp;&nbsp;=&nbsp;00000000 1&nbsp;&nbsp;&nbsp;=&nbsp;00000001 2&nbsp;&nbsp;&nbsp;=&nbsp;00000010 3&nbsp;&nbsp;&nbsp;=&nbsp;00000011 10&nbsp;&nbsp;=&nbsp;00001010 11&nbsp;&nbsp;=&nbsp;00001011 12&nbsp;&nbsp;=&nbsp;00001100 100&nbsp;=&nbsp;01100100 101&nbsp;=&nbsp;01100101 102&nbsp;=&nbsp;01100110 </code></pre> <span class="directory"></span><h4 id="title-5">字典的视图增加一个属性</h4> <p style="text-align: justify">字典类型的 3 个方法：dict.items()、dict.keys()、dict.values() 分别返回字典的 3 个视图，现在每个视图都增加来一个属性，叫 mapping，具体用法如下：</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads/20230223/4d349e49ae735030893296bdd68a18fd.jpg" alt="Python 3.10 的一些新特性"/></p> <p style="text-align: justify">新的属性 mapping 的类型属于 types.MappingProxyType，是围绕原字典的一个属性，在任何视图上访问 mapping 属性，都将返回原字典。</p> <p style="text-align: justify">现在就这些了，尽管我们距离 3.10 的开发时间表只有几个月的时间，但已经有很多有趣的更改，Python 的发展仍在继续，似乎还会为语言添加更多有趣的功能。</p> <p style="text-align: justify">希望您喜欢这篇文章，请点赞、转发、关注，谢谢支持。</p> <p style="text-align: center"></p> </div></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-1915.htm">vue npm run lint修改错误配置</a></p>
                                                <p>下一个：<a href="/html/category/article-1929.htm">Android7.0特性及适配</a></p>
                                            </div>

                                        <div class="panel panel-default mt-5">
                        <div class="panel-heading">
                            <h3 class="m-0">推荐文章</h3>
                        </div>
                        <div class="panel-body">
                            <ul class="p-0 x-0">
                                                                <li class="py-2"><a href="/html/category/article-1325.htm">RBAC-基于角色的访问控制详解</a></li>
                                                                <li class="py-2"><a href="/html/category/article-764.htm">SpringBoot中使用RestTemplate发送文件流，以及读取zip压缩包中文件的方法</a></li>
                                                                <li class="py-2"><a href="/html/category/article-756.htm">java 获取泛型t的class Java泛型 | Jackson TypeReference获取泛型类型信息</a></li>
                                                                <li class="py-2"><a href="/html/category/article-744.htm">Django项目引入NPM和gulp管理前端资源</a></li>
                                                                <li class="py-2"><a href="/html/category/article-714.htm">kubernetes配置ingress使用hostNetwork作为接入端口</a></li>
                                                                <li class="py-2"><a href="/html/category/article-704.htm">Spring Boot+Mockito+JUnit中的@Mock注入@InjectMocks失效</a></li>
                                                                <li class="py-2"><a href="/html/category/article-633.htm">SpringBoot 使用 Feign进行远程调用、文件上传等操作</a></li>
                                                                <li class="py-2"><a href="/html/category/article-598.htm">linux安装mysql以及允许外网访问mysql</a></li>
                                                                <li class="py-2"><a href="/html/category/article-588.htm">简单易懂的进程与线程详解</a></li>
                                                                <li class="py-2"><a href="/html/category/article-555.htm">uni-app 条件编译</a></li>
                                                            </ul>
                        </div>
                    </div>
                                    </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3759.htm" title="让我们写一个 Win32 文本编辑器吧 &#8211; 2. 计划和显示">让我们写一个 Win32 文本编辑器吧 &#8211; 2. 计划和显示</a></li>
                        <li class="py-2"><a href="/html/category/article-2244.htm" title="Spring Boot Web项目ConcurrentLinkedQueue+ReentrantLock+Condition实现消费者功能(类似MQ队列)">Spring Boot Web项目ConcurrentLinkedQueue+ReentrantLock+Condition实现消费者功能(类似MQ队列)</a></li>
                        <li class="py-2"><a href="/html/category/article-1057.htm" title="mysql 数据库密码问题">mysql 数据库密码问题</a></li>
                        <li class="py-2"><a href="/html/category/article-779.htm" title="vue中动态控制btn的disabled属性方式_vue.js">vue中动态控制btn的disabled属性方式_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-1355.htm" title="字符串连接的Java程序。">字符串连接的Java程序。</a></li>
                        <li class="py-2"><a href="/html/category/article-776.htm" title="vue实现文字滚动效果_vue.js">vue实现文字滚动效果_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-775.htm" title="toString()、new String()和(String) 、String.ValueOf()的区别">toString()、new String()和(String) 、String.ValueOf()的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-1943.htm" title="linux磁盘清理方法详解">linux磁盘清理方法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-780.htm" title="@RequestBody某些属性值得不到">@RequestBody某些属性值得不到</a></li>
                        <li class="py-2"><a href="/html/category/article-1916.htm" title="Python 3.10 的一些新特性">Python 3.10 的一些新特性</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        FinlandAddress 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.easing.1.3.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.stellar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/jquery.animateNumber.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/scrollax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/finlandaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>